
R2_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08008b58  08008b58  00018b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090fc  080090fc  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009104  08009104  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009104  08009104  00019104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009108  08009108  00019108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800910c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000088  08009190  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08009190  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127c3  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002905  00000000  00000000  00032877  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001120  00000000  00000000  00035180  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001028  00000000  00000000  000362a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022edc  00000000  00000000  000372c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2e5  00000000  00000000  0005a1a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cd8ad  00000000  00000000  00067489  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00134d36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cec  00000000  00000000  00134db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b40 	.word	0x08008b40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08008b40 	.word	0x08008b40

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <micros>:
	uint32_t us_count_tic =  us * (SystemCoreClock / 1000000U);
	DWT->CYCCNT = 0U;
	while(DWT->CYCCNT < us_count_tic);
}

__STATIC_INLINE uint32_t micros(void){
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <micros+0x24>)
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	4b07      	ldr	r3, [pc, #28]	; (8000fb0 <micros+0x28>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4907      	ldr	r1, [pc, #28]	; (8000fb4 <micros+0x2c>)
 8000f96:	fba1 1303 	umull	r1, r3, r1, r3
 8000f9a:	0c9b      	lsrs	r3, r3, #18
 8000f9c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e0001000 	.word	0xe0001000
 8000fb0:	20000010 	.word	0x20000010
 8000fb4:	431bde83 	.word	0x431bde83

08000fb8 <moveTo>:
    printf("\n");
}
#endif

void moveTo(Stepper_t* motor, long absolute)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
    if (motor->_targetPos != absolute)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	683a      	ldr	r2, [r7, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d005      	beq.n	8000fd8 <moveTo+0x20>
    {
    	motor->_targetPos = absolute;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	615a      	str	r2, [r3, #20]
		computeNewSpeed(motor);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f000 f89c 	bl	8001110 <computeNewSpeed>
		// compute new n?
    }
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <move>:

void move(Stepper_t* motor, long relative)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
    moveTo(motor, motor->_currentPos + relative);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ffdf 	bl	8000fb8 <moveTo>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <runSpeed>:

// Implements steps according to the current step interval
// You must call this at least once per step
// returns true if a step occurred
uint8_t runSpeed(Stepper_t* motor)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b084      	sub	sp, #16
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
    // Dont do anything unless we actually have a step interval
    if (!motor->_stepInterval) return 0; // false
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800100e:	2b00      	cmp	r3, #0
 8001010:	d101      	bne.n	8001016 <runSpeed+0x14>
 8001012:	2300      	movs	r3, #0
 8001014:	e040      	b.n	8001098 <runSpeed+0x96>

	unsigned long time = micros(); //Arduino: micros();
 8001016:	f7ff ffb7 	bl	8000f88 <micros>
 800101a:	60f8      	str	r0, [r7, #12]
	unsigned long nextStepTime = motor->_lastStepTime + motor->_stepInterval;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001024:	4413      	add	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]

	// Gymnastics to detect wrapping of either the nextStepTime and/or the current time
	if (((nextStepTime >= motor->_lastStepTime) && ((time >= nextStepTime) || (time < motor->_lastStepTime)))
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102c:	68ba      	ldr	r2, [r7, #8]
 800102e:	429a      	cmp	r2, r3
 8001030:	d308      	bcc.n	8001044 <runSpeed+0x42>
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	429a      	cmp	r2, r3
 8001038:	d212      	bcs.n	8001060 <runSpeed+0x5e>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d30d      	bcc.n	8001060 <runSpeed+0x5e>
	|| ((nextStepTime < motor->_lastStepTime) && ((time >= nextStepTime) && (time < motor->_lastStepTime))))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	68ba      	ldr	r2, [r7, #8]
 800104a:	429a      	cmp	r2, r3
 800104c:	d223      	bcs.n	8001096 <runSpeed+0x94>
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	429a      	cmp	r2, r3
 8001054:	d31f      	bcc.n	8001096 <runSpeed+0x94>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d21a      	bcs.n	8001096 <runSpeed+0x94>
	{
		if (motor->_direction == DIRECTION_CW)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001066:	2b01      	cmp	r3, #1
 8001068:	d105      	bne.n	8001076 <runSpeed+0x74>
		{
			// Clockwise
			motor->_currentPos += 1;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	e004      	b.n	8001080 <runSpeed+0x7e>
		}
		else
		{
			// Anticlockwise
			motor->_currentPos -= 1;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	1e5a      	subs	r2, r3, #1
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	611a      	str	r2, [r3, #16]
		}

		step(motor, motor->_currentPos);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	4619      	mov	r1, r3
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f000 fab2 	bl	80015f0 <step>

		motor->_lastStepTime = time;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	68fa      	ldr	r2, [r7, #12]
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c

		return 1; // true
 8001092:	2301      	movs	r3, #1
 8001094:	e000      	b.n	8001098 <runSpeed+0x96>
    }
    else
    {
    	return 0; // false
 8001096:	2300      	movs	r3, #0
    }
}
 8001098:	4618      	mov	r0, r3
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <distanceToGo>:

long distanceToGo(Stepper_t* motor)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
    return (motor->_targetPos - motor->_currentPos);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	695a      	ldr	r2, [r3, #20]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	691b      	ldr	r3, [r3, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <currentPosition>:
{
    return motor->_targetPos;
}

long currentPosition(Stepper_t* motor)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
    return motor->_currentPos;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	691b      	ldr	r3, [r3, #16]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <setCurrentPosition>:

// Useful during initialisations or after initial positioning
// Sets speed to 0
void setCurrentPosition(Stepper_t* motor, long position)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
	motor->_targetPos = motor->_currentPos = position;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	611a      	str	r2, [r3, #16]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691a      	ldr	r2, [r3, #16]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	615a      	str	r2, [r3, #20]
	motor->_n = 0;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
	motor->_stepInterval = 0;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
	motor->_speed = 0.0;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <computeNewSpeed>:

void computeNewSpeed(Stepper_t* motor)
{
 8001110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
    long distanceTo = distanceToGo(motor); // +ve is clockwise from curent location
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffc0 	bl	80010a0 <distanceToGo>
 8001120:	60f8      	str	r0, [r7, #12]

    long stepsToStop = (long)((motor->_speed * motor->_speed) / (2.0 * motor->_acceleration)); // Equation 16
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	ed93 7a06 	vldr	s14, [r3, #24]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	edd3 7a06 	vldr	s15, [r3, #24]
 800112e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001132:	ee17 0a90 	vmov	r0, s15
 8001136:	f7ff fa07 	bl	8000548 <__aeabi_f2d>
 800113a:	4604      	mov	r4, r0
 800113c:	460d      	mov	r5, r1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa00 	bl	8000548 <__aeabi_f2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	f7ff f89e 	bl	800028c <__adddf3>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4620      	mov	r0, r4
 8001156:	4629      	mov	r1, r5
 8001158:	f7ff fb78 	bl	800084c <__aeabi_ddiv>
 800115c:	4603      	mov	r3, r0
 800115e:	460c      	mov	r4, r1
 8001160:	4618      	mov	r0, r3
 8001162:	4621      	mov	r1, r4
 8001164:	f7ff fcf8 	bl	8000b58 <__aeabi_d2iz>
 8001168:	4603      	mov	r3, r0
 800116a:	60bb      	str	r3, [r7, #8]

    if (distanceTo == 0 && stepsToStop <= 1)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d10d      	bne.n	800118e <computeNewSpeed+0x7e>
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2b01      	cmp	r3, #1
 8001176:	dc0a      	bgt.n	800118e <computeNewSpeed+0x7e>
    {
    	// We are at the target and its time to stop
    	motor->_stepInterval = 0;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2200      	movs	r2, #0
 800117c:	629a      	str	r2, [r3, #40]	; 0x28
    	motor->_speed = 0.0;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f04f 0200 	mov.w	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
    	motor->_n = 0;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
    	return;
 800118c:	e0d6      	b.n	800133c <computeNewSpeed+0x22c>
    }

    if (distanceTo > 0)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	dd24      	ble.n	80011de <computeNewSpeed+0xce>
    {
		// We are anticlockwise from the target
		// Need to go clockwise from here, maybe decelerate now
		if (motor->_n > 0)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	2b00      	cmp	r3, #0
 800119a:	dd0d      	ble.n	80011b8 <computeNewSpeed+0xa8>
		{
			// Currently accelerating, need to decel now? Or maybe going the wrong way?
			if ((stepsToStop >= distanceTo) || motor->_direction == DIRECTION_CCW)
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	da04      	bge.n	80011ae <computeNewSpeed+0x9e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d140      	bne.n	8001230 <computeNewSpeed+0x120>
				motor->_n = -stepsToStop; // Start deceleration
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	425a      	negs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	645a      	str	r2, [r3, #68]	; 0x44
 80011b6:	e03b      	b.n	8001230 <computeNewSpeed+0x120>
		}
		else if (motor->_n < 0)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011bc:	2b00      	cmp	r3, #0
 80011be:	da37      	bge.n	8001230 <computeNewSpeed+0x120>
		{
			// Currently decelerating, need to accel again?
			if ((stepsToStop < distanceTo) && motor->_direction == DIRECTION_CW)
 80011c0:	68ba      	ldr	r2, [r7, #8]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	da33      	bge.n	8001230 <computeNewSpeed+0x120>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d12e      	bne.n	8001230 <computeNewSpeed+0x120>
				motor->_n = -motor->_n; // Start accceleration
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	425a      	negs	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	645a      	str	r2, [r3, #68]	; 0x44
 80011dc:	e028      	b.n	8001230 <computeNewSpeed+0x120>
		}
	}
	else if (distanceTo < 0)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	da25      	bge.n	8001230 <computeNewSpeed+0x120>
	{
		// We are clockwise from the target
		// Need to go anticlockwise from here, maybe decelerate
		if (motor->_n > 0)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	dd0e      	ble.n	800120a <computeNewSpeed+0xfa>
		{
			// Currently accelerating, need to decel now? Or maybe going the wrong way?
			if ((stepsToStop >= -distanceTo) || motor->_direction == DIRECTION_CW)
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	425b      	negs	r3, r3
 80011f0:	68ba      	ldr	r2, [r7, #8]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	da04      	bge.n	8001200 <computeNewSpeed+0xf0>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80011fc:	2b01      	cmp	r3, #1
 80011fe:	d117      	bne.n	8001230 <computeNewSpeed+0x120>
				motor->_n = -stepsToStop; // Start deceleration
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	425a      	negs	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
 8001208:	e012      	b.n	8001230 <computeNewSpeed+0x120>
		}
		else if (motor->_n < 0)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	2b00      	cmp	r3, #0
 8001210:	da0e      	bge.n	8001230 <computeNewSpeed+0x120>
		{
			// Currently decelerating, need to accel again?
			if ((stepsToStop < -distanceTo) && motor->_direction == DIRECTION_CCW)
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	425b      	negs	r3, r3
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	429a      	cmp	r2, r3
 800121a:	da09      	bge.n	8001230 <computeNewSpeed+0x120>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001222:	2b00      	cmp	r3, #0
 8001224:	d104      	bne.n	8001230 <computeNewSpeed+0x120>
				motor->_n = -motor->_n; // Start accceleration
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	425a      	negs	r2, r3
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	645a      	str	r2, [r3, #68]	; 0x44
		}
	}

	// Need to accelerate or decelerate
	if (motor->_n == 0)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001234:	2b00      	cmp	r3, #0
 8001236:	d10e      	bne.n	8001256 <computeNewSpeed+0x146>
	{
		// First step from stopped
		motor->_cn = motor->_c0;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	64da      	str	r2, [r3, #76]	; 0x4c
		motor->_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	2b00      	cmp	r3, #0
 8001244:	bfcc      	ite	gt
 8001246:	2301      	movgt	r3, #1
 8001248:	2300      	movle	r3, #0
 800124a:	b2db      	uxtb	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001254:	e04d      	b.n	80012f2 <computeNewSpeed+0x1e2>
	}
	else
	{
		// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
		motor->_cn = motor->_cn - ((2.0 * motor->_cn) / ((4.0 * motor->_n) + 1)); // Equation 13
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff f974 	bl	8000548 <__aeabi_f2d>
 8001260:	4604      	mov	r4, r0
 8001262:	460d      	mov	r5, r1
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f96d 	bl	8000548 <__aeabi_f2d>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	f7ff f80b 	bl	800028c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4690      	mov	r8, r2
 800127c:	4699      	mov	r9, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff f94e 	bl	8000524 <__aeabi_i2d>
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <computeNewSpeed+0x234>)
 800128e:	f7ff f9b3 	bl	80005f8 <__aeabi_dmul>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f04f 0200 	mov.w	r2, #0
 800129e:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <computeNewSpeed+0x238>)
 80012a0:	f7fe fff4 	bl	800028c <__adddf3>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4640      	mov	r0, r8
 80012aa:	4649      	mov	r1, r9
 80012ac:	f7ff face 	bl	800084c <__aeabi_ddiv>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	4620      	mov	r0, r4
 80012b6:	4629      	mov	r1, r5
 80012b8:	f7fe ffe6 	bl	8000288 <__aeabi_dsub>
 80012bc:	4603      	mov	r3, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	4618      	mov	r0, r3
 80012c2:	4621      	mov	r1, r4
 80012c4:	f7ff fc90 	bl	8000be8 <__aeabi_d2f>
 80012c8:	4602      	mov	r2, r0
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	64da      	str	r2, [r3, #76]	; 0x4c
		motor->_cn = (motor->_cn > motor->_cmin) ? motor->_cn : motor->_cmin; //max(motor->_cn, motor->_cmin);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80012da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	dd02      	ble.n	80012ea <computeNewSpeed+0x1da>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	e001      	b.n	80012ee <computeNewSpeed+0x1de>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ee:	687a      	ldr	r2, [r7, #4]
 80012f0:	64d3      	str	r3, [r2, #76]	; 0x4c
	}

	motor->_n++;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
	motor->_stepInterval = motor->_cn;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001302:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001306:	ee17 2a90 	vmov	r2, s15
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
	motor->_speed = 1000000.0 / motor->_cn;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001314:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800134c <computeNewSpeed+0x23c>
 8001318:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	edc3 7a06 	vstr	s15, [r3, #24]

	if (motor->_direction == DIRECTION_CCW)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001328:	2b00      	cmp	r3, #0
 800132a:	d107      	bne.n	800133c <computeNewSpeed+0x22c>
		motor->_speed = -motor->_speed;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001332:	eef1 7a67 	vneg.f32	s15, s15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	edc3 7a06 	vstr	s15, [r3, #24]
    printf("%ld\n", motor->_n);
    printf("%lu\n", motor->_stepInterval);
//    Serial.println(distanceTo);
//    Serial.println(stepsToStop);
#endif
}
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001344:	40100000 	.word	0x40100000
 8001348:	3ff00000 	.word	0x3ff00000
 800134c:	49742400 	.word	0x49742400

08001350 <run>:
// Run the motor to implement speed and acceleration in order to proceed to the target position
// You must call this at least once per step, preferably in your main loop
// If the motor is in the desired position, the cost is very small
// returns true if the motor is still running to the target position.
uint8_t run(Stepper_t* motor)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
    if (runSpeed(motor)) computeNewSpeed(motor);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff fe52 	bl	8001002 <runSpeed>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d002      	beq.n	800136a <run+0x1a>
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fed3 	bl	8001110 <computeNewSpeed>

    return motor->_speed != 0.0 || distanceToGo(motor) != 0;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001370:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001378:	d105      	bne.n	8001386 <run+0x36>
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fe90 	bl	80010a0 <distanceToGo>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <run+0x3a>
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <run+0x3c>
 800138a:	2300      	movs	r3, #0
 800138c:	b2db      	uxtb	r3, r3
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <InitStepper>:

void InitStepper(Stepper_t* motor, uint16_t pin1, GPIO_TypeDef* GPIOxPin1, uint16_t pin2, GPIO_TypeDef* GPIOxPin2, uint8_t enable)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	60f8      	str	r0, [r7, #12]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	817b      	strh	r3, [r7, #10]
 80013a6:	4613      	mov	r3, r2
 80013a8:	813b      	strh	r3, [r7, #8]
	motor->_currentPos = 0;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	611a      	str	r2, [r3, #16]
	motor->_targetPos = 0;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2200      	movs	r2, #0
 80013b4:	615a      	str	r2, [r3, #20]
	motor->_speed = 0.0;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	619a      	str	r2, [r3, #24]
	motor->_maxSpeed = 1.0;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013c4:	61da      	str	r2, [r3, #28]
	motor->_acceleration = 0.0;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	621a      	str	r2, [r3, #32]
	motor->_sqrt_twoa = 1.0;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80013d4:	625a      	str	r2, [r3, #36]	; 0x24
	motor->_stepInterval = 0;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2200      	movs	r2, #0
 80013da:	629a      	str	r2, [r3, #40]	; 0x28
	motor->_minPulseWidth = 1;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2201      	movs	r2, #1
 80013e0:	631a      	str	r2, [r3, #48]	; 0x30
	motor->_enablePin = 0xff;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	22ff      	movs	r2, #255	; 0xff
 80013e6:	86da      	strh	r2, [r3, #54]	; 0x36
	motor->_GPIOxEnablePin = NULL;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2200      	movs	r2, #0
 80013ec:	639a      	str	r2, [r3, #56]	; 0x38
	motor->_lastStepTime = 0;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2200      	movs	r2, #0
 80013f2:	62da      	str	r2, [r3, #44]	; 0x2c
	motor->_pin[0] = pin1;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	897a      	ldrh	r2, [r7, #10]
 80013f8:	801a      	strh	r2, [r3, #0]
	motor->_GPIOxPin[0] = GPIOxPin1;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	605a      	str	r2, [r3, #4]
	motor->_pin[1] = pin2;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	893a      	ldrh	r2, [r7, #8]
 8001404:	805a      	strh	r2, [r3, #2]
	motor->_GPIOxPin[1] = GPIOxPin2;
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	6a3a      	ldr	r2, [r7, #32]
 800140a:	609a      	str	r2, [r3, #8]

    // NEW
	motor->_n = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	645a      	str	r2, [r3, #68]	; 0x44
	motor->_c0 = 0.0;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	f04f 0200 	mov.w	r2, #0
 8001418:	649a      	str	r2, [r3, #72]	; 0x48
    motor->_cn = 0.0;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	64da      	str	r2, [r3, #76]	; 0x4c
    motor->_cmin = 1.0;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001428:	651a      	str	r2, [r3, #80]	; 0x50
    motor->_direction = DIRECTION_CCW;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    int i;
    for (i = 0; i < 2; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e008      	b.n	800144a <InitStepper+0xb4>
    	motor->_pinInverted[i] = 0;
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	330c      	adds	r3, #12
 8001440:	2200      	movs	r2, #0
 8001442:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 2; i++)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	3301      	adds	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b01      	cmp	r3, #1
 800144e:	ddf3      	ble.n	8001438 <InitStepper+0xa2>

    if (enable)
 8001450:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001454:	2b00      	cmp	r3, #0
 8001456:	d002      	beq.n	800145e <InitStepper+0xc8>
    	enableOutputs(motor);
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f000 f964 	bl	8001726 <enableOutputs>

    // Some reasonable default
    setAcceleration(motor, 1);
 800145e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001462:	68f8      	ldr	r0, [r7, #12]
 8001464:	f000 f854 	bl	8001510 <setAcceleration>
}
 8001468:	bf00      	nop
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <setMaxSpeed>:
    // Some reasonable default
    setAcceleration(motor, 1);
}

void setMaxSpeed(Stepper_t* motor, float speed)
{
 8001470:	b5b0      	push	{r4, r5, r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	ed87 0a00 	vstr	s0, [r7]
    if (motor->_maxSpeed != speed)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001482:	ed97 7a00 	vldr	s14, [r7]
 8001486:	eeb4 7a67 	vcmp.f32	s14, s15
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d038      	beq.n	8001502 <setMaxSpeed+0x92>
    {
    	motor->_maxSpeed = speed;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	61da      	str	r2, [r3, #28]
    	motor->_cmin = 1000000.0 / speed;
 8001496:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800150c <setMaxSpeed+0x9c>
 800149a:	ed97 7a00 	vldr	s14, [r7]
 800149e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		// Recompute _n from current speed and adjust speed if accelerating or cruising
		if (motor->_n > 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	dd28      	ble.n	8001502 <setMaxSpeed+0x92>
		{
			motor->_n = (long)((motor->_speed * motor->_speed) / (2.0 * motor->_acceleration)); // Equation 16
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	ed93 7a06 	vldr	s14, [r3, #24]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c0:	ee17 0a90 	vmov	r0, s15
 80014c4:	f7ff f840 	bl	8000548 <__aeabi_f2d>
 80014c8:	4604      	mov	r4, r0
 80014ca:	460d      	mov	r5, r1
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f839 	bl	8000548 <__aeabi_f2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	f7fe fed7 	bl	800028c <__adddf3>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	4620      	mov	r0, r4
 80014e4:	4629      	mov	r1, r5
 80014e6:	f7ff f9b1 	bl	800084c <__aeabi_ddiv>
 80014ea:	4603      	mov	r3, r0
 80014ec:	460c      	mov	r4, r1
 80014ee:	4618      	mov	r0, r3
 80014f0:	4621      	mov	r1, r4
 80014f2:	f7ff fb31 	bl	8000b58 <__aeabi_d2iz>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	645a      	str	r2, [r3, #68]	; 0x44
			computeNewSpeed(motor);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff fe07 	bl	8001110 <computeNewSpeed>
		}
    }
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bdb0      	pop	{r4, r5, r7, pc}
 800150a:	bf00      	nop
 800150c:	49742400 	.word	0x49742400

08001510 <setAcceleration>:
{
    return motor->_maxSpeed;
}

void setAcceleration(Stepper_t* motor, float acceleration)
{
 8001510:	b590      	push	{r4, r7, lr}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	ed87 0a00 	vstr	s0, [r7]
    if (acceleration == 0.0)
 800151c:	edd7 7a00 	vldr	s15, [r7]
 8001520:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001528:	d055      	beq.n	80015d6 <setAcceleration+0xc6>
	return;
    if (motor->_acceleration != acceleration)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001530:	ed97 7a00 	vldr	s14, [r7]
 8001534:	eeb4 7a67 	vcmp.f32	s14, s15
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d04c      	beq.n	80015d8 <setAcceleration+0xc8>
    {
	    // Recompute _n per Equation 17
    	motor->_n = motor->_n * (motor->_acceleration / acceleration);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001542:	ee07 3a90 	vmov	s15, r3
 8001546:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	ed93 6a08 	vldr	s12, [r3, #32]
 8001550:	edd7 6a00 	vldr	s13, [r7]
 8001554:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001560:	ee17 2a90 	vmov	r2, s15
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	645a      	str	r2, [r3, #68]	; 0x44
		// New c0 per Equation 7, with correction per Equation 15
    	motor->_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0;// Equation 15
 8001568:	6838      	ldr	r0, [r7, #0]
 800156a:	f7fe ffed 	bl	8000548 <__aeabi_f2d>
 800156e:	4603      	mov	r3, r0
 8001570:	460c      	mov	r4, r1
 8001572:	461a      	mov	r2, r3
 8001574:	4623      	mov	r3, r4
 8001576:	f04f 0000 	mov.w	r0, #0
 800157a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800157e:	f7ff f965 	bl	800084c <__aeabi_ddiv>
 8001582:	4603      	mov	r3, r0
 8001584:	460c      	mov	r4, r1
 8001586:	ec44 3b17 	vmov	d7, r3, r4
 800158a:	eeb0 0a47 	vmov.f32	s0, s14
 800158e:	eef0 0a67 	vmov.f32	s1, s15
 8001592:	f007 f9c9 	bl	8008928 <sqrt>
 8001596:	ec51 0b10 	vmov	r0, r1, d0
 800159a:	a311      	add	r3, pc, #68	; (adr r3, 80015e0 <setAcceleration+0xd0>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f82a 	bl	80005f8 <__aeabi_dmul>
 80015a4:	4603      	mov	r3, r0
 80015a6:	460c      	mov	r4, r1
 80015a8:	4618      	mov	r0, r3
 80015aa:	4621      	mov	r1, r4
 80015ac:	a30e      	add	r3, pc, #56	; (adr r3, 80015e8 <setAcceleration+0xd8>)
 80015ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b2:	f7ff f821 	bl	80005f8 <__aeabi_dmul>
 80015b6:	4603      	mov	r3, r0
 80015b8:	460c      	mov	r4, r1
 80015ba:	4618      	mov	r0, r3
 80015bc:	4621      	mov	r1, r4
 80015be:	f7ff fb13 	bl	8000be8 <__aeabi_d2f>
 80015c2:	4602      	mov	r2, r0
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	649a      	str	r2, [r3, #72]	; 0x48
    	motor->_acceleration = acceleration;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	621a      	str	r2, [r3, #32]
		computeNewSpeed(motor);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fd9e 	bl	8001110 <computeNewSpeed>
 80015d4:	e000      	b.n	80015d8 <setAcceleration+0xc8>
	return;
 80015d6:	bf00      	nop
    }
}
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd90      	pop	{r4, r7, pc}
 80015de:	bf00      	nop
 80015e0:	c083126f 	.word	0xc083126f
 80015e4:	3fe5a1ca 	.word	0x3fe5a1ca
 80015e8:	00000000 	.word	0x00000000
 80015ec:	412e8480 	.word	0x412e8480

080015f0 <step>:
    return motor->_speed;
}

// Subclasses can override
void step(Stepper_t* motor, long step)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
	step1(motor, step);
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 f865 	bl	80016cc <step1>
}
 8001602:	bf00      	nop
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <setOutputPins>:
// You might want to override this to implement eg serial output
// bit 0 of the mask corresponds to _pin[0]
// bit 1 of the mask corresponds to _pin[1]
// ....
void setOutputPins(Stepper_t* motor, uint8_t mask)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b084      	sub	sp, #16
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
 8001612:	460b      	mov	r3, r1
 8001614:	70fb      	strb	r3, [r7, #3]
    uint8_t numpins = 2;
 8001616:	2302      	movs	r3, #2
 8001618:	73bb      	strb	r3, [r7, #14]
	uint8_t i;
	for (i = 0; i < numpins; i++)
 800161a:	2300      	movs	r3, #0
 800161c:	73fb      	strb	r3, [r7, #15]
 800161e:	e04d      	b.n	80016bc <setOutputPins+0xb2>
	{
		//Arduino: digitalWrite(motor->_pin[i], (mask & (1 << i)) ? (HIGH ^ motor->_pinInverted[i]) : (LOW ^ motor->_pinInverted[i]));
		if(mask & (1 << i))
 8001620:	78fa      	ldrb	r2, [r7, #3]
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	fa42 f303 	asr.w	r3, r2, r3
 8001628:	f003 0301 	and.w	r3, r3, #1
 800162c:	2b00      	cmp	r3, #0
 800162e:	d021      	beq.n	8001674 <setOutputPins+0x6a>
		{
			if (0x11 ^ motor->_pinInverted[i]) HAL_GPIO_WritePin(motor->_GPIOxPin[i], motor->_pin[i], GPIO_PIN_SET);
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	7b1b      	ldrb	r3, [r3, #12]
 8001638:	2b11      	cmp	r3, #17
 800163a:	d00d      	beq.n	8001658 <setOutputPins+0x4e>
 800163c:	7bfb      	ldrb	r3, [r7, #15]
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	6858      	ldr	r0, [r3, #4]
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800164e:	2201      	movs	r2, #1
 8001650:	4619      	mov	r1, r3
 8001652:	f003 ff3b 	bl	80054cc <HAL_GPIO_WritePin>
 8001656:	e02e      	b.n	80016b6 <setOutputPins+0xac>
			else HAL_GPIO_WritePin(motor->_GPIOxPin[i], motor->_pin[i], GPIO_PIN_RESET);
 8001658:	7bfb      	ldrb	r3, [r7, #15]
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	009b      	lsls	r3, r3, #2
 800165e:	4413      	add	r3, r2
 8001660:	6858      	ldr	r0, [r3, #4]
 8001662:	7bfa      	ldrb	r2, [r7, #15]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800166a:	2200      	movs	r2, #0
 800166c:	4619      	mov	r1, r3
 800166e:	f003 ff2d 	bl	80054cc <HAL_GPIO_WritePin>
 8001672:	e020      	b.n	80016b6 <setOutputPins+0xac>
		}
		else
		{
			if (0x00 ^ motor->_pinInverted[i]) HAL_GPIO_WritePin(motor->_GPIOxPin[i], motor->_pin[i], GPIO_PIN_SET);
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	4413      	add	r3, r2
 800167a:	7b1b      	ldrb	r3, [r3, #12]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d00d      	beq.n	800169c <setOutputPins+0x92>
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	4413      	add	r3, r2
 8001688:	6858      	ldr	r0, [r3, #4]
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001692:	2201      	movs	r2, #1
 8001694:	4619      	mov	r1, r3
 8001696:	f003 ff19 	bl	80054cc <HAL_GPIO_WritePin>
 800169a:	e00c      	b.n	80016b6 <setOutputPins+0xac>
			else HAL_GPIO_WritePin(motor->_GPIOxPin[i], motor->_pin[i], GPIO_PIN_RESET);
 800169c:	7bfb      	ldrb	r3, [r7, #15]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	6858      	ldr	r0, [r3, #4]
 80016a6:	7bfa      	ldrb	r2, [r7, #15]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016ae:	2200      	movs	r2, #0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f003 ff0b 	bl	80054cc <HAL_GPIO_WritePin>
	for (i = 0; i < numpins; i++)
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	3301      	adds	r3, #1
 80016ba:	73fb      	strb	r3, [r7, #15]
 80016bc:	7bfa      	ldrb	r2, [r7, #15]
 80016be:	7bbb      	ldrb	r3, [r7, #14]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d3ad      	bcc.n	8001620 <setOutputPins+0x16>
		}
	}
}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <step1>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void step1(Stepper_t* motor, long step)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
    // _pin[0] is step, _pin[1] is direction
    setOutputPins(motor, motor->_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <step1+0x18>
 80016e0:	2302      	movs	r3, #2
 80016e2:	e000      	b.n	80016e6 <step1+0x1a>
 80016e4:	2300      	movs	r3, #0
 80016e6:	4619      	mov	r1, r3
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff8e 	bl	800160a <setOutputPins>
    setOutputPins(motor, motor->_direction ? 0b11 : 0b01); // step HIGH
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <step1+0x30>
 80016f8:	2303      	movs	r3, #3
 80016fa:	e000      	b.n	80016fe <step1+0x32>
 80016fc:	2301      	movs	r3, #1
 80016fe:	4619      	mov	r1, r3
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ff82 	bl	800160a <setOutputPins>
    // Caution 200ns setup time
    // Delay the minimum allowed pulse width
    //delay_us(motor->_minPulseWidth); //delayMicroseconds(motor->_minPulseWidth);
    setOutputPins(motor, motor->_direction ? 0b10 : 0b00); // step LOW
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <step1+0x48>
 8001710:	2302      	movs	r3, #2
 8001712:	e000      	b.n	8001716 <step1+0x4a>
 8001714:	2300      	movs	r3, #0
 8001716:	4619      	mov	r1, r3
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f7ff ff76 	bl	800160a <setOutputPins>

}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <enableOutputs>:
        else HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_RESET);
    }
}

void enableOutputs(Stepper_t* motor)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b092      	sub	sp, #72	; 0x48
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
    //Arduino: pinMode(motor->_pin[0], OUTPUT);
    GPIO_InitTypeDef GPIO_InitStruct0;
	GPIO_InitStruct0.Pin = motor->_pin[0];
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	881b      	ldrh	r3, [r3, #0]
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct0.Mode = GPIO_MODE_OUTPUT_PP;
 8001734:	2301      	movs	r3, #1
 8001736:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct0.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	63fb      	str	r3, [r7, #60]	; 0x3c
	//GPIO_InitStruct0.Speed = GPIO_SPEED_FAST;
	HAL_GPIO_Init(motor->_GPIOxPin[0], &GPIO_InitStruct0);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001744:	4611      	mov	r1, r2
 8001746:	4618      	mov	r0, r3
 8001748:	f003 fd0e 	bl	8005168 <HAL_GPIO_Init>

    //Arduino: pinMode(motor->_pin[1], OUTPUT);
	GPIO_InitTypeDef GPIO_InitStruct1;
	GPIO_InitStruct1.Pin = motor->_pin[1];
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	885b      	ldrh	r3, [r3, #2]
 8001750:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct1.Mode = GPIO_MODE_OUTPUT_PP;
 8001752:	2301      	movs	r3, #1
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct1.Pull = GPIO_PULLUP;
 8001756:	2301      	movs	r3, #1
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
	//GPIO_InitStruct1.Speed = GPIO_SPEED_FAST;
	HAL_GPIO_Init(motor->_GPIOxPin[1], &GPIO_InitStruct1);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f107 0220 	add.w	r2, r7, #32
 8001762:	4611      	mov	r1, r2
 8001764:	4618      	mov	r0, r3
 8001766:	f003 fcff 	bl	8005168 <HAL_GPIO_Init>

    if (motor->_enablePin != 0xff)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800176e:	2bff      	cmp	r3, #255	; 0xff
 8001770:	d024      	beq.n	80017bc <enableOutputs+0x96>
    {
    	//Arduino: pinMode(motor->_enablePin, OUTPUT);
    	GPIO_InitTypeDef GPIO_InitStruct;
		GPIO_InitStruct.Pin = motor->_enablePin;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001776:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001778:	2301      	movs	r3, #1
 800177a:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
		//GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
		HAL_GPIO_Init(motor->_GPIOxEnablePin, &GPIO_InitStruct);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001784:	f107 020c 	add.w	r2, r7, #12
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fcec 	bl	8005168 <HAL_GPIO_Init>

    	//Arduino: digitalWrite(motor->_enablePin, HIGH ^ motor->_enableInverted);
		if (0x11 ^ motor->_enableInverted) HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_SET);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001796:	2b11      	cmp	r3, #17
 8001798:	d008      	beq.n	80017ac <enableOutputs+0x86>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017a2:	2201      	movs	r2, #1
 80017a4:	4619      	mov	r1, r3
 80017a6:	f003 fe91 	bl	80054cc <HAL_GPIO_WritePin>
		else HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_RESET);
    }
}
 80017aa:	e007      	b.n	80017bc <enableOutputs+0x96>
		else HAL_GPIO_WritePin(motor->_GPIOxEnablePin, motor->_enablePin, GPIO_PIN_RESET);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80017b4:	2200      	movs	r2, #0
 80017b6:	4619      	mov	r1, r3
 80017b8:	f003 fe88 	bl	80054cc <HAL_GPIO_WritePin>
}
 80017bc:	bf00      	nop
 80017be:	3748      	adds	r7, #72	; 0x48
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <stop>:
    moveTo(motor, position);
    runToPosition(motor);
}

void stop(Stepper_t* motor)
{
 80017c4:	b5b0      	push	{r4, r5, r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
    if (motor->_speed != 0.0)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	edd3 7a06 	vldr	s15, [r3, #24]
 80017d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80017d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017da:	d038      	beq.n	800184e <stop+0x8a>
    {
		long stepsToStop = (long)((motor->_speed * motor->_speed) / (2.0 * motor->_acceleration)) + 1; // Equation 16 (+integer rounding)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	ed93 7a06 	vldr	s14, [r3, #24]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80017e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ec:	ee17 0a90 	vmov	r0, s15
 80017f0:	f7fe feaa 	bl	8000548 <__aeabi_f2d>
 80017f4:	4604      	mov	r4, r0
 80017f6:	460d      	mov	r5, r1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7fe fea3 	bl	8000548 <__aeabi_f2d>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	f7fe fd41 	bl	800028c <__adddf3>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4620      	mov	r0, r4
 8001810:	4629      	mov	r1, r5
 8001812:	f7ff f81b 	bl	800084c <__aeabi_ddiv>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	4618      	mov	r0, r3
 800181c:	4621      	mov	r1, r4
 800181e:	f7ff f99b 	bl	8000b58 <__aeabi_d2iz>
 8001822:	4603      	mov	r3, r0
 8001824:	3301      	adds	r3, #1
 8001826:	60fb      	str	r3, [r7, #12]

		if (motor->_speed > 0)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	edd3 7a06 	vldr	s15, [r3, #24]
 800182e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	dd04      	ble.n	8001842 <stop+0x7e>
			move(motor, stepsToStop);
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7ff fbd0 	bl	8000fe0 <move>

		else
			move(motor, -stepsToStop);
    }
}
 8001840:	e005      	b.n	800184e <stop+0x8a>
			move(motor, -stepsToStop);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	425b      	negs	r3, r3
 8001846:	4619      	mov	r1, r3
 8001848:	6878      	ldr	r0, [r7, #4]
 800184a:	f7ff fbc9 	bl	8000fe0 <move>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001858 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001864:	4b0a      	ldr	r3, [pc, #40]	; (8001890 <NRF24_DelayMicroSeconds+0x38>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a0a      	ldr	r2, [pc, #40]	; (8001894 <NRF24_DelayMicroSeconds+0x3c>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	0c9a      	lsrs	r2, r3, #18
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	fb02 f303 	mul.w	r3, r2, r3
 8001876:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001878:	bf00      	nop
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1e5a      	subs	r2, r3, #1
 800187e:	60fa      	str	r2, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1fa      	bne.n	800187a <NRF24_DelayMicroSeconds+0x22>
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	20000010 	.word	0x20000010
 8001894:	165e9f81 	.word	0x165e9f81

08001898 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d008      	beq.n	80018b8 <NRF24_csn+0x20>
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <NRF24_csn+0x38>)
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <NRF24_csn+0x3c>)
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	2201      	movs	r2, #1
 80018b0:	4619      	mov	r1, r3
 80018b2:	f003 fe0b 	bl	80054cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80018b6:	e007      	b.n	80018c8 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <NRF24_csn+0x38>)
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <NRF24_csn+0x3c>)
 80018be:	881b      	ldrh	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	4619      	mov	r1, r3
 80018c4:	f003 fe02 	bl	80054cc <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	200000b4 	.word	0x200000b4
 80018d4:	200000b8 	.word	0x200000b8

080018d8 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d008      	beq.n	80018f8 <NRF24_ce+0x20>
 80018e6:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <NRF24_ce+0x38>)
 80018e8:	6818      	ldr	r0, [r3, #0]
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <NRF24_ce+0x3c>)
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	2201      	movs	r2, #1
 80018f0:	4619      	mov	r1, r3
 80018f2:	f003 fdeb 	bl	80054cc <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80018f6:	e007      	b.n	8001908 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80018f8:	4b05      	ldr	r3, [pc, #20]	; (8001910 <NRF24_ce+0x38>)
 80018fa:	6818      	ldr	r0, [r3, #0]
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <NRF24_ce+0x3c>)
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	2200      	movs	r2, #0
 8001902:	4619      	mov	r1, r3
 8001904:	f003 fde2 	bl	80054cc <HAL_GPIO_WritePin>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200000b4 	.word	0x200000b4
 8001914:	200000ba 	.word	0x200000ba

08001918 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8001922:	2000      	movs	r0, #0
 8001924:	f7ff ffb8 	bl	8001898 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	b2db      	uxtb	r3, r3
 8001930:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001932:	f107 010c 	add.w	r1, r7, #12
 8001936:	2364      	movs	r3, #100	; 0x64
 8001938:	2201      	movs	r2, #1
 800193a:	480a      	ldr	r0, [pc, #40]	; (8001964 <NRF24_read_register+0x4c>)
 800193c:	f004 fabc 	bl	8005eb8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8001940:	f107 030c 	add.w	r3, r7, #12
 8001944:	1c59      	adds	r1, r3, #1
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4806      	ldr	r0, [pc, #24]	; (8001964 <NRF24_read_register+0x4c>)
 800194c:	f004 fbe8 	bl	8006120 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8001950:	7b7b      	ldrb	r3, [r7, #13]
 8001952:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001954:	2001      	movs	r0, #1
 8001956:	f7ff ff9f 	bl	8001898 <NRF24_csn>
	return retData;
 800195a:	7bfb      	ldrb	r3, [r7, #15]
}
 800195c:	4618      	mov	r0, r3
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	200000bc 	.word	0x200000bc

08001968 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	6039      	str	r1, [r7, #0]
 8001972:	71fb      	strb	r3, [r7, #7]
 8001974:	4613      	mov	r3, r2
 8001976:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001978:	2000      	movs	r0, #0
 800197a:	f7ff ff8d 	bl	8001898 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	f003 031f 	and.w	r3, r3, #31
 8001984:	b2db      	uxtb	r3, r3
 8001986:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001988:	f107 010c 	add.w	r1, r7, #12
 800198c:	2364      	movs	r3, #100	; 0x64
 800198e:	2201      	movs	r2, #1
 8001990:	4808      	ldr	r0, [pc, #32]	; (80019b4 <NRF24_read_registerN+0x4c>)
 8001992:	f004 fa91 	bl	8005eb8 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001996:	79bb      	ldrb	r3, [r7, #6]
 8001998:	b29a      	uxth	r2, r3
 800199a:	2364      	movs	r3, #100	; 0x64
 800199c:	6839      	ldr	r1, [r7, #0]
 800199e:	4805      	ldr	r0, [pc, #20]	; (80019b4 <NRF24_read_registerN+0x4c>)
 80019a0:	f004 fbbe 	bl	8006120 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ff77 	bl	8001898 <NRF24_csn>
}
 80019aa:	bf00      	nop
 80019ac:	3710      	adds	r7, #16
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	200000bc 	.word	0x200000bc

080019b8 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	460a      	mov	r2, r1
 80019c2:	71fb      	strb	r3, [r7, #7]
 80019c4:	4613      	mov	r3, r2
 80019c6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f7ff ff65 	bl	8001898 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f043 0320 	orr.w	r3, r3, #32
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80019d8:	79bb      	ldrb	r3, [r7, #6]
 80019da:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80019dc:	f107 010c 	add.w	r1, r7, #12
 80019e0:	2364      	movs	r3, #100	; 0x64
 80019e2:	2202      	movs	r2, #2
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <NRF24_write_register+0x40>)
 80019e6:	f004 fa67 	bl	8005eb8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80019ea:	2001      	movs	r0, #1
 80019ec:	f7ff ff54 	bl	8001898 <NRF24_csn>
}
 80019f0:	bf00      	nop
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	200000bc 	.word	0x200000bc

080019fc <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f7ff ff43 	bl	8001898 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	f043 0320 	orr.w	r3, r3, #32
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001a1c:	f107 010c 	add.w	r1, r7, #12
 8001a20:	2364      	movs	r3, #100	; 0x64
 8001a22:	2201      	movs	r2, #1
 8001a24:	4808      	ldr	r0, [pc, #32]	; (8001a48 <NRF24_write_registerN+0x4c>)
 8001a26:	f004 fa47 	bl	8005eb8 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8001a2a:	79bb      	ldrb	r3, [r7, #6]
 8001a2c:	b29a      	uxth	r2, r3
 8001a2e:	2364      	movs	r3, #100	; 0x64
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	4805      	ldr	r0, [pc, #20]	; (8001a48 <NRF24_write_registerN+0x4c>)
 8001a34:	f004 fa40 	bl	8005eb8 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f7ff ff2d 	bl	8001898 <NRF24_csn>
}
 8001a3e:	bf00      	nop
 8001a40:	3710      	adds	r7, #16
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200000bc 	.word	0x200000bc

08001a4c <NRF24_read_payload>:
	//Bring CSN high
	NRF24_csn(1);
}
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001a58:	f000 fa08 	bl	8001e6c <NRF24_getPayloadSize>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	461a      	mov	r2, r3
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d303      	bcc.n	8001a6e <NRF24_read_payload+0x22>
 8001a66:	f000 fa01 	bl	8001e6c <NRF24_getPayloadSize>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	e000      	b.n	8001a70 <NRF24_read_payload+0x24>
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff ff10 	bl	8001898 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001a78:	2361      	movs	r3, #97	; 0x61
 8001a7a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8001a7c:	f107 010e 	add.w	r1, r7, #14
 8001a80:	2364      	movs	r3, #100	; 0x64
 8001a82:	2201      	movs	r2, #1
 8001a84:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <NRF24_read_payload+0x5c>)
 8001a86:	f004 fa17 	bl	8005eb8 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	2364      	movs	r3, #100	; 0x64
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	4805      	ldr	r0, [pc, #20]	; (8001aa8 <NRF24_read_payload+0x5c>)
 8001a94:	f004 fb44 	bl	8006120 <HAL_SPI_Receive>
	NRF24_csn(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fefd 	bl	8001898 <NRF24_csn>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200000bc 	.word	0x200000bc

08001aac <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8001ab0:	21ff      	movs	r1, #255	; 0xff
 8001ab2:	20e1      	movs	r0, #225	; 0xe1
 8001ab4:	f7ff ff80 	bl	80019b8 <NRF24_write_register>
}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}

08001abc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8001ac0:	21ff      	movs	r1, #255	; 0xff
 8001ac2:	20e2      	movs	r0, #226	; 0xe2
 8001ac4:	f7ff ff78 	bl	80019b8 <NRF24_write_register>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8001ad2:	2007      	movs	r0, #7
 8001ad4:	f7ff ff20 	bl	8001918 <NRF24_read_register>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001adc:	79fb      	ldrb	r3, [r7, #7]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
	...

08001ae8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001ae8:	b082      	sub	sp, #8
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b084      	sub	sp, #16
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	61fb      	str	r3, [r7, #28]
 8001af4:	460b      	mov	r3, r1
 8001af6:	807b      	strh	r3, [r7, #2]
 8001af8:	4613      	mov	r3, r2
 8001afa:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001afc:	4b65      	ldr	r3, [pc, #404]	; (8001c94 <NRF24_begin+0x1ac>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	2258      	movs	r2, #88	; 0x58
 8001b06:	4619      	mov	r1, r3
 8001b08:	f006 fafe 	bl	8008108 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001b0c:	4a62      	ldr	r2, [pc, #392]	; (8001c98 <NRF24_begin+0x1b0>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001b12:	4a62      	ldr	r2, [pc, #392]	; (8001c9c <NRF24_begin+0x1b4>)
 8001b14:	887b      	ldrh	r3, [r7, #2]
 8001b16:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001b18:	4a61      	ldr	r2, [pc, #388]	; (8001ca0 <NRF24_begin+0x1b8>)
 8001b1a:	883b      	ldrh	r3, [r7, #0]
 8001b1c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff feba 	bl	8001898 <NRF24_csn>
	NRF24_ce(0);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fed7 	bl	80018d8 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001b2a:	2005      	movs	r0, #5
 8001b2c:	f003 f9e8 	bl	8004f00 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001b30:	2108      	movs	r1, #8
 8001b32:	2000      	movs	r0, #0
 8001b34:	f7ff ff40 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001b38:	213f      	movs	r1, #63	; 0x3f
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff ff3c 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001b40:	2103      	movs	r1, #3
 8001b42:	2002      	movs	r0, #2
 8001b44:	f7ff ff38 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001b48:	2103      	movs	r1, #3
 8001b4a:	2003      	movs	r0, #3
 8001b4c:	f7ff ff34 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001b50:	2103      	movs	r1, #3
 8001b52:	2004      	movs	r0, #4
 8001b54:	f7ff ff30 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001b58:	2102      	movs	r1, #2
 8001b5a:	2005      	movs	r0, #5
 8001b5c:	f7ff ff2c 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001b60:	210f      	movs	r1, #15
 8001b62:	2006      	movs	r0, #6
 8001b64:	f7ff ff28 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001b68:	210e      	movs	r1, #14
 8001b6a:	2007      	movs	r0, #7
 8001b6c:	f7ff ff24 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001b70:	2100      	movs	r1, #0
 8001b72:	2008      	movs	r0, #8
 8001b74:	f7ff ff20 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2009      	movs	r0, #9
 8001b7c:	f7ff ff1c 	bl	80019b8 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001b80:	23e7      	movs	r3, #231	; 0xe7
 8001b82:	733b      	strb	r3, [r7, #12]
 8001b84:	23e7      	movs	r3, #231	; 0xe7
 8001b86:	72fb      	strb	r3, [r7, #11]
 8001b88:	23e7      	movs	r3, #231	; 0xe7
 8001b8a:	72bb      	strb	r3, [r7, #10]
 8001b8c:	23e7      	movs	r3, #231	; 0xe7
 8001b8e:	727b      	strb	r3, [r7, #9]
 8001b90:	23e7      	movs	r3, #231	; 0xe7
 8001b92:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	2205      	movs	r2, #5
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	200a      	movs	r0, #10
 8001b9e:	f7ff ff2d 	bl	80019fc <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8001ba2:	23c2      	movs	r3, #194	; 0xc2
 8001ba4:	733b      	strb	r3, [r7, #12]
 8001ba6:	23c2      	movs	r3, #194	; 0xc2
 8001ba8:	72fb      	strb	r3, [r7, #11]
 8001baa:	23c2      	movs	r3, #194	; 0xc2
 8001bac:	72bb      	strb	r3, [r7, #10]
 8001bae:	23c2      	movs	r3, #194	; 0xc2
 8001bb0:	727b      	strb	r3, [r7, #9]
 8001bb2:	23c2      	movs	r3, #194	; 0xc2
 8001bb4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	2205      	movs	r2, #5
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	200b      	movs	r0, #11
 8001bc0:	f7ff ff1c 	bl	80019fc <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001bc4:	21c3      	movs	r1, #195	; 0xc3
 8001bc6:	200c      	movs	r0, #12
 8001bc8:	f7ff fef6 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001bcc:	21c4      	movs	r1, #196	; 0xc4
 8001bce:	200d      	movs	r0, #13
 8001bd0:	f7ff fef2 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001bd4:	21c5      	movs	r1, #197	; 0xc5
 8001bd6:	200e      	movs	r0, #14
 8001bd8:	f7ff feee 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001bdc:	21c6      	movs	r1, #198	; 0xc6
 8001bde:	200f      	movs	r0, #15
 8001be0:	f7ff feea 	bl	80019b8 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001be4:	23e7      	movs	r3, #231	; 0xe7
 8001be6:	733b      	strb	r3, [r7, #12]
 8001be8:	23e7      	movs	r3, #231	; 0xe7
 8001bea:	72fb      	strb	r3, [r7, #11]
 8001bec:	23e7      	movs	r3, #231	; 0xe7
 8001bee:	72bb      	strb	r3, [r7, #10]
 8001bf0:	23e7      	movs	r3, #231	; 0xe7
 8001bf2:	727b      	strb	r3, [r7, #9]
 8001bf4:	23e7      	movs	r3, #231	; 0xe7
 8001bf6:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001bf8:	f107 0308 	add.w	r3, r7, #8
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	4619      	mov	r1, r3
 8001c00:	2010      	movs	r0, #16
 8001c02:	f7ff fefb 	bl	80019fc <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001c06:	2100      	movs	r1, #0
 8001c08:	2011      	movs	r0, #17
 8001c0a:	f7ff fed5 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8001c0e:	2100      	movs	r1, #0
 8001c10:	2012      	movs	r0, #18
 8001c12:	f7ff fed1 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001c16:	2100      	movs	r1, #0
 8001c18:	2013      	movs	r0, #19
 8001c1a:	f7ff fecd 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001c1e:	2100      	movs	r1, #0
 8001c20:	2014      	movs	r0, #20
 8001c22:	f7ff fec9 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2015      	movs	r0, #21
 8001c2a:	f7ff fec5 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2016      	movs	r0, #22
 8001c32:	f7ff fec1 	bl	80019b8 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8001c36:	f000 fa49 	bl	80020cc <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8001c3a:	2100      	movs	r1, #0
 8001c3c:	201c      	movs	r0, #28
 8001c3e:	f7ff febb 	bl	80019b8 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	201d      	movs	r0, #29
 8001c46:	f7ff feb7 	bl	80019b8 <NRF24_write_register>
	/////printRadioSettings();
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001c4a:	210f      	movs	r1, #15
 8001c4c:	200f      	movs	r0, #15
 8001c4e:	f000 f8c5 	bl	8001ddc <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001c52:	2003      	movs	r0, #3
 8001c54:	f000 f94b 	bl	8001eee <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001c58:	2001      	movs	r0, #1
 8001c5a:	f000 f981 	bl	8001f60 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001c5e:	2002      	movs	r0, #2
 8001c60:	f000 f9c4 	bl	8001fec <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001c64:	f000 f916 	bl	8001e94 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001c68:	2020      	movs	r0, #32
 8001c6a:	f000 f8e7 	bl	8001e3c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001c6e:	f000 fa24 	bl	80020ba <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001c72:	204c      	movs	r0, #76	; 0x4c
 8001c74:	f000 f8cd 	bl	8001e12 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001c78:	f7ff ff18 	bl	8001aac <NRF24_flush_tx>
	NRF24_flush_rx();
 8001c7c:	f7ff ff1e 	bl	8001abc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001c80:	f000 f9dc 	bl	800203c <NRF24_powerDown>
	
}
 8001c84:	bf00      	nop
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c8e:	b002      	add	sp, #8
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	200000bc 	.word	0x200000bc
 8001c98:	200000b4 	.word	0x200000b4
 8001c9c:	200000b8 	.word	0x200000b8
 8001ca0:	200000ba 	.word	0x200000ba

08001ca4 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8001ca4:	b598      	push	{r3, r4, r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7ff fe35 	bl	8001918 <NRF24_read_register>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f043 0303 	orr.w	r3, r3, #3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	2000      	movs	r0, #0
 8001cba:	f7ff fe7d 	bl	80019b8 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8001cbe:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <NRF24_startListening+0x48>)
 8001cc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cc4:	4323      	orrs	r3, r4
 8001cc6:	d004      	beq.n	8001cd2 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8001cc8:	2205      	movs	r2, #5
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <NRF24_startListening+0x48>)
 8001ccc:	200a      	movs	r0, #10
 8001cce:	f7ff fe95 	bl	80019fc <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8001cd2:	f7ff feeb 	bl	8001aac <NRF24_flush_tx>
	NRF24_flush_rx();
 8001cd6:	f7ff fef1 	bl	8001abc <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f7ff fdfc 	bl	80018d8 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8001ce0:	2096      	movs	r0, #150	; 0x96
 8001ce2:	f7ff fdb9 	bl	8001858 <NRF24_DelayMicroSeconds>
}
 8001ce6:	bf00      	nop
 8001ce8:	bd98      	pop	{r3, r4, r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200000a8 	.word	0x200000a8

08001cf0 <NRF24_available>:
	NRF24_flush_tx();
	return retStatus;
}
//16. Check for available data to read
bool NRF24_available(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001cf4:	2000      	movs	r0, #0
 8001cf6:	f000 f9b0 	bl	800205a <NRF24_availablePipe>
 8001cfa:	4603      	mov	r3, r0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff fe9b 	bl	8001a4c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8001d16:	2017      	movs	r0, #23
 8001d18:	f7ff fdfe 	bl	8001918 <NRF24_read_register>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8001d24:	f7ff feca 	bl	8001abc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8001d28:	f000 f8ac 	bl	8001e84 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	3710      	adds	r7, #16
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}

08001d40 <NRF24_openReadingPipe>:
	const uint8_t max_payload_size = 32;
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
}
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001d40:	b590      	push	{r4, r7, lr}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4601      	mov	r1, r0
 8001d48:	e9c7 2300 	strd	r2, r3, [r7]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d104      	bne.n	8001d60 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001d56:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <NRF24_openReadingPipe+0x8c>)
 8001d5c:	e9c2 3400 	strd	r3, r4, [r2]
	
	if(number <= 6)
 8001d60:	7bfb      	ldrb	r3, [r7, #15]
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d82d      	bhi.n	8001dc2 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d808      	bhi.n	8001d7e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	4a18      	ldr	r2, [pc, #96]	; (8001dd0 <NRF24_openReadingPipe+0x90>)
 8001d70:	5cd3      	ldrb	r3, [r2, r3]
 8001d72:	4639      	mov	r1, r7
 8001d74:	2205      	movs	r2, #5
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fe40 	bl	80019fc <NRF24_write_registerN>
 8001d7c:	e007      	b.n	8001d8e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	4a13      	ldr	r2, [pc, #76]	; (8001dd0 <NRF24_openReadingPipe+0x90>)
 8001d82:	5cd3      	ldrb	r3, [r2, r3]
 8001d84:	4639      	mov	r1, r7
 8001d86:	2201      	movs	r2, #1
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe37 	bl	80019fc <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	4a10      	ldr	r2, [pc, #64]	; (8001dd4 <NRF24_openReadingPipe+0x94>)
 8001d92:	5cd2      	ldrb	r2, [r2, r3]
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <NRF24_openReadingPipe+0x98>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7ff fe0c 	bl	80019b8 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7ff fdb9 	bl	8001918 <NRF24_read_register>
 8001da6:	4603      	mov	r3, r0
 8001da8:	b25a      	sxtb	r2, r3
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	2101      	movs	r1, #1
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	b25b      	sxtb	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b25b      	sxtb	r3, r3
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	4619      	mov	r1, r3
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	f7ff fdfb 	bl	80019b8 <NRF24_write_register>
	}
	
}
 8001dc2:	bf00      	nop
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd90      	pop	{r4, r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	200000a8 	.word	0x200000a8
 8001dd0:	0800909c 	.word	0x0800909c
 8001dd4:	080090a4 	.word	0x080090a4
 8001dd8:	200000b0 	.word	0x200000b0

08001ddc <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	4603      	mov	r3, r0
 8001de4:	460a      	mov	r2, r1
 8001de6:	71fb      	strb	r3, [r7, #7]
 8001de8:	4613      	mov	r3, r2
 8001dea:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	011b      	lsls	r3, r3, #4
 8001df0:	b25a      	sxtb	r2, r3
 8001df2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001df6:	f003 030f 	and.w	r3, r3, #15
 8001dfa:	b25b      	sxtb	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	b25b      	sxtb	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	4619      	mov	r1, r3
 8001e04:	2004      	movs	r0, #4
 8001e06:	f7ff fdd7 	bl	80019b8 <NRF24_write_register>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001e1c:	237f      	movs	r3, #127	; 0x7f
 8001e1e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001e20:	7bfa      	ldrb	r2, [r7, #15]
 8001e22:	79fb      	ldrb	r3, [r7, #7]
 8001e24:	4293      	cmp	r3, r2
 8001e26:	bf28      	it	cs
 8001e28:	4613      	movcs	r3, r2
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2005      	movs	r0, #5
 8001e30:	f7ff fdc2 	bl	80019b8 <NRF24_write_register>
}
 8001e34:	bf00      	nop
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b085      	sub	sp, #20
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	4603      	mov	r3, r0
 8001e44:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001e46:	2320      	movs	r3, #32
 8001e48:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8001e4a:	7bfa      	ldrb	r2, [r7, #15]
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	bf28      	it	cs
 8001e52:	4613      	movcs	r3, r2
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <NRF24_setPayloadSize+0x2c>)
 8001e58:	701a      	strb	r2, [r3, #0]
}
 8001e5a:	bf00      	nop
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	200000b0 	.word	0x200000b0

08001e6c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
	return payload_size;
 8001e70:	4b03      	ldr	r3, [pc, #12]	; (8001e80 <NRF24_getPayloadSize+0x14>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	200000b0 	.word	0x200000b0

08001e84 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001e88:	2060      	movs	r0, #96	; 0x60
 8001e8a:	f7ff fd45 	bl	8001918 <NRF24_read_register>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001e98:	201d      	movs	r0, #29
 8001e9a:	f7ff fd3d 	bl	8001918 <NRF24_read_register>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	201d      	movs	r0, #29
 8001eaa:	f7ff fd85 	bl	80019b8 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001eae:	2100      	movs	r1, #0
 8001eb0:	201c      	movs	r0, #28
 8001eb2:	f7ff fd81 	bl	80019b8 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001eb6:	4b02      	ldr	r3, [pc, #8]	; (8001ec0 <NRF24_disableDynamicPayloads+0x2c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200000b1 	.word	0x200000b1

08001ec4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001ece:	79fb      	ldrb	r3, [r7, #7]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001ed4:	213f      	movs	r1, #63	; 0x3f
 8001ed6:	2001      	movs	r0, #1
 8001ed8:	f7ff fd6e 	bl	80019b8 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001edc:	e003      	b.n	8001ee6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2001      	movs	r0, #1
 8001ee2:	f7ff fd69 	bl	80019b8 <NRF24_write_register>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}

08001eee <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b084      	sub	sp, #16
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001ef8:	2006      	movs	r0, #6
 8001efa:	f7ff fd0d 	bl	8001918 <NRF24_read_register>
 8001efe:	4603      	mov	r3, r0
 8001f00:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	f023 0306 	bic.w	r3, r3, #6
 8001f08:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d104      	bne.n	8001f1a <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	f043 0306 	orr.w	r3, r3, #6
 8001f16:	73fb      	strb	r3, [r7, #15]
 8001f18:	e019      	b.n	8001f4e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d104      	bne.n	8001f2a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	73fb      	strb	r3, [r7, #15]
 8001f28:	e011      	b.n	8001f4e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d104      	bne.n	8001f3a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	f043 0302 	orr.w	r3, r3, #2
 8001f36:	73fb      	strb	r3, [r7, #15]
 8001f38:	e009      	b.n	8001f4e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d006      	beq.n	8001f4e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001f40:	79fb      	ldrb	r3, [r7, #7]
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	d103      	bne.n	8001f4e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001f46:	7bfb      	ldrb	r3, [r7, #15]
 8001f48:	f043 0306 	orr.w	r3, r3, #6
 8001f4c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	4619      	mov	r1, r3
 8001f52:	2006      	movs	r0, #6
 8001f54:	f7ff fd30 	bl	80019b8 <NRF24_write_register>
}
 8001f58:	bf00      	nop
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001f6e:	2006      	movs	r0, #6
 8001f70:	f7ff fcd2 	bl	8001918 <NRF24_read_register>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001f78:	4b1b      	ldr	r3, [pc, #108]	; (8001fe8 <NRF24_setDataRate+0x88>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001f7e:	7bbb      	ldrb	r3, [r7, #14]
 8001f80:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001f84:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d107      	bne.n	8001f9c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <NRF24_setDataRate+0x88>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001f92:	7bbb      	ldrb	r3, [r7, #14]
 8001f94:	f043 0320 	orr.w	r3, r3, #32
 8001f98:	73bb      	strb	r3, [r7, #14]
 8001f9a:	e00d      	b.n	8001fb8 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d107      	bne.n	8001fb2 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001fa2:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <NRF24_setDataRate+0x88>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	f043 0308 	orr.w	r3, r3, #8
 8001fae:	73bb      	strb	r3, [r7, #14]
 8001fb0:	e002      	b.n	8001fb8 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <NRF24_setDataRate+0x88>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001fb8:	7bbb      	ldrb	r3, [r7, #14]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	2006      	movs	r0, #6
 8001fbe:	f7ff fcfb 	bl	80019b8 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001fc2:	2006      	movs	r0, #6
 8001fc4:	f7ff fca8 	bl	8001918 <NRF24_read_register>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	461a      	mov	r2, r3
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d102      	bne.n	8001fd8 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
 8001fd6:	e002      	b.n	8001fde <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <NRF24_setDataRate+0x88>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3710      	adds	r7, #16
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	200000b2 	.word	0x200000b2

08001fec <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f7ff fc8e 	bl	8001918 <NRF24_read_register>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f023 030c 	bic.w	r3, r3, #12
 8002002:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8002004:	79fb      	ldrb	r3, [r7, #7]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00f      	beq.n	800202a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800200a:	79fb      	ldrb	r3, [r7, #7]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d104      	bne.n	800201a <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	f043 0308 	orr.w	r3, r3, #8
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e007      	b.n	800202a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	f043 0308 	orr.w	r3, r3, #8
 8002020:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8002022:	7bfb      	ldrb	r3, [r7, #15]
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	4619      	mov	r1, r3
 800202e:	2000      	movs	r0, #0
 8002030:	f7ff fcc2 	bl	80019b8 <NRF24_write_register>
}
 8002034:	bf00      	nop
 8002036:	3710      	adds	r7, #16
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}

0800203c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8002040:	2000      	movs	r0, #0
 8002042:	f7ff fc69 	bl	8001918 <NRF24_read_register>
 8002046:	4603      	mov	r3, r0
 8002048:	f023 0302 	bic.w	r3, r3, #2
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	2000      	movs	r0, #0
 8002052:	f7ff fcb1 	bl	80019b8 <NRF24_write_register>
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}

0800205a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8002062:	f7ff fd33 	bl	8001acc <NRF24_get_status>
 8002066:	4603      	mov	r3, r0
 8002068:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b00      	cmp	r3, #0
 8002072:	bf14      	ite	ne
 8002074:	2301      	movne	r3, #1
 8002076:	2300      	moveq	r3, #0
 8002078:	73bb      	strb	r3, [r7, #14]

  if (result)
 800207a:	7bbb      	ldrb	r3, [r7, #14]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d017      	beq.n	80020b0 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8002086:	7bfb      	ldrb	r3, [r7, #15]
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f003 0307 	and.w	r3, r3, #7
 8002090:	b2da      	uxtb	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8002096:	2140      	movs	r1, #64	; 0x40
 8002098:	2007      	movs	r0, #7
 800209a:	f7ff fc8d 	bl	80019b8 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800209e:	7bfb      	ldrb	r3, [r7, #15]
 80020a0:	f003 0320 	and.w	r3, r3, #32
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80020a8:	2120      	movs	r1, #32
 80020aa:	2007      	movs	r0, #7
 80020ac:	f7ff fc84 	bl	80019b8 <NRF24_write_register>
    }
  }
  return result;
 80020b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80020be:	2170      	movs	r1, #112	; 0x70
 80020c0:	2007      	movs	r0, #7
 80020c2:	f7ff fc79 	bl	80019b8 <NRF24_write_register>
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7ff fbe0 	bl	8001898 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80020d8:	2350      	movs	r3, #80	; 0x50
 80020da:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80020dc:	2373      	movs	r3, #115	; 0x73
 80020de:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80020e0:	1d39      	adds	r1, r7, #4
 80020e2:	2364      	movs	r3, #100	; 0x64
 80020e4:	2202      	movs	r2, #2
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <NRF24_ACTIVATE_cmd+0x30>)
 80020e8:	f003 fee6 	bl	8005eb8 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f7ff fbd3 	bl	8001898 <NRF24_csn>
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200000bc 	.word	0x200000bc

08002100 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8002100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002102:	b0a1      	sub	sp, #132	; 0x84
 8002104:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002106:	f107 0308 	add.w	r3, r7, #8
 800210a:	4ab6      	ldr	r2, [pc, #728]	; (80023e4 <printRadioSettings+0x2e4>)
 800210c:	461c      	mov	r4, r3
 800210e:	4615      	mov	r5, r2
 8002110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800211a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800211c:	682b      	ldr	r3, [r5, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	8022      	strh	r2, [r4, #0]
 8002122:	3402      	adds	r4, #2
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002128:	f107 0308 	add.w	r3, r7, #8
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f84f 	bl	80001d0 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	b29a      	uxth	r2, r3
 8002136:	f107 0108 	add.w	r1, r7, #8
 800213a:	230a      	movs	r3, #10
 800213c:	48aa      	ldr	r0, [pc, #680]	; (80023e8 <printRadioSettings+0x2e8>)
 800213e:	f005 fb5a 	bl	80077f6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f7ff fbe8 	bl	8001918 <NRF24_read_register>
 8002148:	4603      	mov	r3, r0
 800214a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800214e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	2b00      	cmp	r3, #0
 8002158:	d020      	beq.n	800219c <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800215a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800215e:	f003 0304 	and.w	r3, r3, #4
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <printRadioSettings+0x7e>
 8002166:	f107 0308 	add.w	r3, r7, #8
 800216a:	4aa0      	ldr	r2, [pc, #640]	; (80023ec <printRadioSettings+0x2ec>)
 800216c:	461c      	mov	r4, r3
 800216e:	4615      	mov	r5, r2
 8002170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800217c:	e017      	b.n	80021ae <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");
 800217e:	f107 0308 	add.w	r3, r7, #8
 8002182:	4a9b      	ldr	r2, [pc, #620]	; (80023f0 <printRadioSettings+0x2f0>)
 8002184:	461c      	mov	r4, r3
 8002186:	4615      	mov	r5, r2
 8002188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800218a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800218c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002190:	c403      	stmia	r4!, {r0, r1}
 8002192:	8022      	strh	r2, [r4, #0]
 8002194:	3402      	adds	r4, #2
 8002196:	0c13      	lsrs	r3, r2, #16
 8002198:	7023      	strb	r3, [r4, #0]
 800219a:	e008      	b.n	80021ae <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800219c:	f107 0308 	add.w	r3, r7, #8
 80021a0:	4a94      	ldr	r2, [pc, #592]	; (80023f4 <printRadioSettings+0x2f4>)
 80021a2:	461c      	mov	r4, r3
 80021a4:	4615      	mov	r5, r2
 80021a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021aa:	682b      	ldr	r3, [r5, #0]
 80021ac:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021ae:	f107 0308 	add.w	r3, r7, #8
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7fe f80c 	bl	80001d0 <strlen>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f107 0108 	add.w	r1, r7, #8
 80021c0:	230a      	movs	r3, #10
 80021c2:	4889      	ldr	r0, [pc, #548]	; (80023e8 <printRadioSettings+0x2e8>)
 80021c4:	f005 fb17 	bl	80077f6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 80021c8:	2001      	movs	r0, #1
 80021ca:	f7ff fba5 	bl	8001918 <NRF24_read_register>
 80021ce:	4603      	mov	r3, r0
 80021d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021d8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bfcc      	ite	gt
 80021e0:	2301      	movgt	r3, #1
 80021e2:	2300      	movle	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021ec:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bfcc      	ite	gt
 80021f4:	2301      	movgt	r3, #1
 80021f6:	2300      	movle	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002200:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002204:	2b00      	cmp	r3, #0
 8002206:	bfcc      	ite	gt
 8002208:	2301      	movgt	r3, #1
 800220a:	2300      	movle	r3, #0
 800220c:	b2db      	uxtb	r3, r3
 800220e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002210:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002214:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002218:	2b00      	cmp	r3, #0
 800221a:	bfcc      	ite	gt
 800221c:	2301      	movgt	r3, #1
 800221e:	2300      	movle	r3, #0
 8002220:	b2db      	uxtb	r3, r3
 8002222:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002224:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002228:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800222c:	2b00      	cmp	r3, #0
 800222e:	bfcc      	ite	gt
 8002230:	2301      	movgt	r3, #1
 8002232:	2300      	movle	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002238:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800223c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002240:	2b00      	cmp	r3, #0
 8002242:	bfcc      	ite	gt
 8002244:	2301      	movgt	r3, #1
 8002246:	2300      	movle	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f107 0008 	add.w	r0, r7, #8
 800224e:	9303      	str	r3, [sp, #12]
 8002250:	9402      	str	r4, [sp, #8]
 8002252:	9101      	str	r1, [sp, #4]
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	4633      	mov	r3, r6
 8002258:	462a      	mov	r2, r5
 800225a:	4967      	ldr	r1, [pc, #412]	; (80023f8 <printRadioSettings+0x2f8>)
 800225c:	f005 ff68 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4618      	mov	r0, r3
 8002266:	f7fd ffb3 	bl	80001d0 <strlen>
 800226a:	4603      	mov	r3, r0
 800226c:	b29a      	uxth	r2, r3
 800226e:	f107 0108 	add.w	r1, r7, #8
 8002272:	230a      	movs	r3, #10
 8002274:	485c      	ldr	r0, [pc, #368]	; (80023e8 <printRadioSettings+0x2e8>)
 8002276:	f005 fabe 	bl	80077f6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800227a:	2002      	movs	r0, #2
 800227c:	f7ff fb4c 	bl	8001918 <NRF24_read_register>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002286:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800228a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800228e:	2b00      	cmp	r3, #0
 8002290:	bfcc      	ite	gt
 8002292:	2301      	movgt	r3, #1
 8002294:	2300      	movle	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800229a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800229e:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	bfcc      	ite	gt
 80022a6:	2301      	movgt	r3, #1
 80022a8:	2300      	movle	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80022ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022b2:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	bfcc      	ite	gt
 80022ba:	2301      	movgt	r3, #1
 80022bc:	2300      	movle	r3, #0
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80022c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022c6:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfcc      	ite	gt
 80022ce:	2301      	movgt	r3, #1
 80022d0:	2300      	movle	r3, #0
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80022d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022da:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80022de:	2b00      	cmp	r3, #0
 80022e0:	bfcc      	ite	gt
 80022e2:	2301      	movgt	r3, #1
 80022e4:	2300      	movle	r3, #0
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80022ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022ee:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	bfcc      	ite	gt
 80022f6:	2301      	movgt	r3, #1
 80022f8:	2300      	movle	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f107 0008 	add.w	r0, r7, #8
 8002300:	9303      	str	r3, [sp, #12]
 8002302:	9402      	str	r4, [sp, #8]
 8002304:	9101      	str	r1, [sp, #4]
 8002306:	9200      	str	r2, [sp, #0]
 8002308:	4633      	mov	r3, r6
 800230a:	462a      	mov	r2, r5
 800230c:	493b      	ldr	r1, [pc, #236]	; (80023fc <printRadioSettings+0x2fc>)
 800230e:	f005 ff0f 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ff5a 	bl	80001d0 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	f107 0108 	add.w	r1, r7, #8
 8002324:	230a      	movs	r3, #10
 8002326:	4830      	ldr	r0, [pc, #192]	; (80023e8 <printRadioSettings+0x2e8>)
 8002328:	f005 fa65 	bl	80077f6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800232c:	2003      	movs	r0, #3
 800232e:	f7ff faf3 	bl	8001918 <NRF24_read_register>
 8002332:	4603      	mov	r3, r0
 8002334:	f003 0303 	and.w	r3, r3, #3
 8002338:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800233c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002340:	3302      	adds	r3, #2
 8002342:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8002346:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	492c      	ldr	r1, [pc, #176]	; (8002400 <printRadioSettings+0x300>)
 8002350:	4618      	mov	r0, r3
 8002352:	f005 feed 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002356:	f107 0308 	add.w	r3, r7, #8
 800235a:	4618      	mov	r0, r3
 800235c:	f7fd ff38 	bl	80001d0 <strlen>
 8002360:	4603      	mov	r3, r0
 8002362:	b29a      	uxth	r2, r3
 8002364:	f107 0108 	add.w	r1, r7, #8
 8002368:	230a      	movs	r3, #10
 800236a:	481f      	ldr	r0, [pc, #124]	; (80023e8 <printRadioSettings+0x2e8>)
 800236c:	f005 fa43 	bl	80077f6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8002370:	2005      	movs	r0, #5
 8002372:	f7ff fad1 	bl	8001918 <NRF24_read_register>
 8002376:	4603      	mov	r3, r0
 8002378:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800237c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002384:	f107 0308 	add.w	r3, r7, #8
 8002388:	491e      	ldr	r1, [pc, #120]	; (8002404 <printRadioSettings+0x304>)
 800238a:	4618      	mov	r0, r3
 800238c:	f005 fed0 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002390:	f107 0308 	add.w	r3, r7, #8
 8002394:	4618      	mov	r0, r3
 8002396:	f7fd ff1b 	bl	80001d0 <strlen>
 800239a:	4603      	mov	r3, r0
 800239c:	b29a      	uxth	r2, r3
 800239e:	f107 0108 	add.w	r1, r7, #8
 80023a2:	230a      	movs	r3, #10
 80023a4:	4810      	ldr	r0, [pc, #64]	; (80023e8 <printRadioSettings+0x2e8>)
 80023a6:	f005 fa26 	bl	80077f6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 80023aa:	2006      	movs	r0, #6
 80023ac:	f7ff fab4 	bl	8001918 <NRF24_read_register>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 80023b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d024      	beq.n	800240c <printRadioSettings+0x30c>
 80023c2:	f107 0308 	add.w	r3, r7, #8
 80023c6:	4a10      	ldr	r2, [pc, #64]	; (8002408 <printRadioSettings+0x308>)
 80023c8:	461c      	mov	r4, r3
 80023ca:	4615      	mov	r5, r2
 80023cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023d0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80023d4:	6020      	str	r0, [r4, #0]
 80023d6:	3404      	adds	r4, #4
 80023d8:	8021      	strh	r1, [r4, #0]
 80023da:	3402      	adds	r4, #2
 80023dc:	0c0b      	lsrs	r3, r1, #16
 80023de:	7023      	strb	r3, [r4, #0]
 80023e0:	e023      	b.n	800242a <printRadioSettings+0x32a>
 80023e2:	bf00      	nop
 80023e4:	08008b58 	.word	0x08008b58
 80023e8:	20000114 	.word	0x20000114
 80023ec:	08008b8c 	.word	0x08008b8c
 80023f0:	08008ba8 	.word	0x08008ba8
 80023f4:	08008bc4 	.word	0x08008bc4
 80023f8:	08008bd8 	.word	0x08008bd8
 80023fc:	08008c1c 	.word	0x08008c1c
 8002400:	08008c68 	.word	0x08008c68
 8002404:	08008c84 	.word	0x08008c84
 8002408:	08008c98 	.word	0x08008c98
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800240c:	f107 0308 	add.w	r3, r7, #8
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <printRadioSettings+0x3b8>)
 8002412:	461c      	mov	r4, r3
 8002414:	4615      	mov	r5, r2
 8002416:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002418:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800241a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800241e:	6020      	str	r0, [r4, #0]
 8002420:	3404      	adds	r4, #4
 8002422:	8021      	strh	r1, [r4, #0]
 8002424:	3402      	adds	r4, #2
 8002426:	0c0b      	lsrs	r3, r1, #16
 8002428:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800242a:	f107 0308 	add.w	r3, r7, #8
 800242e:	4618      	mov	r0, r3
 8002430:	f7fd fece 	bl	80001d0 <strlen>
 8002434:	4603      	mov	r3, r0
 8002436:	b29a      	uxth	r2, r3
 8002438:	f107 0108 	add.w	r1, r7, #8
 800243c:	230a      	movs	r3, #10
 800243e:	481f      	ldr	r0, [pc, #124]	; (80024bc <printRadioSettings+0x3bc>)
 8002440:	f005 f9d9 	bl	80077f6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8002444:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002448:	f003 0306 	and.w	r3, r3, #6
 800244c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8002450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002454:	085b      	lsrs	r3, r3, #1
 8002456:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800245a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800245e:	2b00      	cmp	r3, #0
 8002460:	d109      	bne.n	8002476 <printRadioSettings+0x376>
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <printRadioSettings+0x3c0>)
 8002468:	461c      	mov	r4, r3
 800246a:	4615      	mov	r5, r2
 800246c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800246e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	6023      	str	r3, [r4, #0]
 8002474:	e037      	b.n	80024e6 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8002476:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800247a:	2b01      	cmp	r3, #1
 800247c:	d109      	bne.n	8002492 <printRadioSettings+0x392>
 800247e:	f107 0308 	add.w	r3, r7, #8
 8002482:	4a10      	ldr	r2, [pc, #64]	; (80024c4 <printRadioSettings+0x3c4>)
 8002484:	461c      	mov	r4, r3
 8002486:	4615      	mov	r5, r2
 8002488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800248a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800248c:	682b      	ldr	r3, [r5, #0]
 800248e:	6023      	str	r3, [r4, #0]
 8002490:	e029      	b.n	80024e6 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002492:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002496:	2b02      	cmp	r3, #2
 8002498:	d118      	bne.n	80024cc <printRadioSettings+0x3cc>
 800249a:	f107 0308 	add.w	r3, r7, #8
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <printRadioSettings+0x3c8>)
 80024a0:	461c      	mov	r4, r3
 80024a2:	4615      	mov	r5, r2
 80024a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024a8:	682b      	ldr	r3, [r5, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	8022      	strh	r2, [r4, #0]
 80024ae:	3402      	adds	r4, #2
 80024b0:	0c1b      	lsrs	r3, r3, #16
 80024b2:	7023      	strb	r3, [r4, #0]
 80024b4:	e017      	b.n	80024e6 <printRadioSettings+0x3e6>
 80024b6:	bf00      	nop
 80024b8:	08008cb0 	.word	0x08008cb0
 80024bc:	20000114 	.word	0x20000114
 80024c0:	08008cc8 	.word	0x08008cc8
 80024c4:	08008cdc 	.word	0x08008cdc
 80024c8:	08008cf0 	.word	0x08008cf0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 80024cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d108      	bne.n	80024e6 <printRadioSettings+0x3e6>
 80024d4:	f107 0308 	add.w	r3, r7, #8
 80024d8:	4ad7      	ldr	r2, [pc, #860]	; (8002838 <printRadioSettings+0x738>)
 80024da:	461c      	mov	r4, r3
 80024dc:	4615      	mov	r5, r2
 80024de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e2:	682b      	ldr	r3, [r5, #0]
 80024e4:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80024e6:	f107 0308 	add.w	r3, r7, #8
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fd fe70 	bl	80001d0 <strlen>
 80024f0:	4603      	mov	r3, r0
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	f107 0108 	add.w	r1, r7, #8
 80024f8:	230a      	movs	r3, #10
 80024fa:	48d0      	ldr	r0, [pc, #832]	; (800283c <printRadioSettings+0x73c>)
 80024fc:	f005 f97b 	bl	80077f6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002500:	463b      	mov	r3, r7
 8002502:	2205      	movs	r2, #5
 8002504:	4619      	mov	r1, r3
 8002506:	200a      	movs	r0, #10
 8002508:	f7ff fa2e 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800250c:	793b      	ldrb	r3, [r7, #4]
 800250e:	461c      	mov	r4, r3
 8002510:	78fb      	ldrb	r3, [r7, #3]
 8002512:	461d      	mov	r5, r3
 8002514:	78bb      	ldrb	r3, [r7, #2]
 8002516:	787a      	ldrb	r2, [r7, #1]
 8002518:	7839      	ldrb	r1, [r7, #0]
 800251a:	f107 0008 	add.w	r0, r7, #8
 800251e:	9102      	str	r1, [sp, #8]
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	462b      	mov	r3, r5
 8002526:	4622      	mov	r2, r4
 8002528:	49c5      	ldr	r1, [pc, #788]	; (8002840 <printRadioSettings+0x740>)
 800252a:	f005 fe01 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800252e:	f107 0308 	add.w	r3, r7, #8
 8002532:	4618      	mov	r0, r3
 8002534:	f7fd fe4c 	bl	80001d0 <strlen>
 8002538:	4603      	mov	r3, r0
 800253a:	b29a      	uxth	r2, r3
 800253c:	f107 0108 	add.w	r1, r7, #8
 8002540:	230a      	movs	r3, #10
 8002542:	48be      	ldr	r0, [pc, #760]	; (800283c <printRadioSettings+0x73c>)
 8002544:	f005 f957 	bl	80077f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8002548:	463b      	mov	r3, r7
 800254a:	2205      	movs	r2, #5
 800254c:	4619      	mov	r1, r3
 800254e:	200b      	movs	r0, #11
 8002550:	f7ff fa0a 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002554:	793b      	ldrb	r3, [r7, #4]
 8002556:	461c      	mov	r4, r3
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	461d      	mov	r5, r3
 800255c:	78bb      	ldrb	r3, [r7, #2]
 800255e:	787a      	ldrb	r2, [r7, #1]
 8002560:	7839      	ldrb	r1, [r7, #0]
 8002562:	f107 0008 	add.w	r0, r7, #8
 8002566:	9102      	str	r1, [sp, #8]
 8002568:	9201      	str	r2, [sp, #4]
 800256a:	9300      	str	r3, [sp, #0]
 800256c:	462b      	mov	r3, r5
 800256e:	4622      	mov	r2, r4
 8002570:	49b4      	ldr	r1, [pc, #720]	; (8002844 <printRadioSettings+0x744>)
 8002572:	f005 fddd 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002576:	f107 0308 	add.w	r3, r7, #8
 800257a:	4618      	mov	r0, r3
 800257c:	f7fd fe28 	bl	80001d0 <strlen>
 8002580:	4603      	mov	r3, r0
 8002582:	b29a      	uxth	r2, r3
 8002584:	f107 0108 	add.w	r1, r7, #8
 8002588:	230a      	movs	r3, #10
 800258a:	48ac      	ldr	r0, [pc, #688]	; (800283c <printRadioSettings+0x73c>)
 800258c:	f005 f933 	bl	80077f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002590:	463b      	mov	r3, r7
 8002592:	2201      	movs	r2, #1
 8002594:	4619      	mov	r1, r3
 8002596:	200c      	movs	r0, #12
 8002598:	f7ff f9e6 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800259c:	783b      	ldrb	r3, [r7, #0]
 800259e:	461a      	mov	r2, r3
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	49a8      	ldr	r1, [pc, #672]	; (8002848 <printRadioSettings+0x748>)
 80025a6:	4618      	mov	r0, r3
 80025a8:	f005 fdc2 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80025ac:	f107 0308 	add.w	r3, r7, #8
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fd fe0d 	bl	80001d0 <strlen>
 80025b6:	4603      	mov	r3, r0
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	f107 0108 	add.w	r1, r7, #8
 80025be:	230a      	movs	r3, #10
 80025c0:	489e      	ldr	r0, [pc, #632]	; (800283c <printRadioSettings+0x73c>)
 80025c2:	f005 f918 	bl	80077f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 80025c6:	463b      	mov	r3, r7
 80025c8:	2201      	movs	r2, #1
 80025ca:	4619      	mov	r1, r3
 80025cc:	200d      	movs	r0, #13
 80025ce:	f7ff f9cb 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80025d2:	783b      	ldrb	r3, [r7, #0]
 80025d4:	461a      	mov	r2, r3
 80025d6:	f107 0308 	add.w	r3, r7, #8
 80025da:	499c      	ldr	r1, [pc, #624]	; (800284c <printRadioSettings+0x74c>)
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 fda7 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80025e2:	f107 0308 	add.w	r3, r7, #8
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd fdf2 	bl	80001d0 <strlen>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f107 0108 	add.w	r1, r7, #8
 80025f4:	230a      	movs	r3, #10
 80025f6:	4891      	ldr	r0, [pc, #580]	; (800283c <printRadioSettings+0x73c>)
 80025f8:	f005 f8fd 	bl	80077f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80025fc:	463b      	mov	r3, r7
 80025fe:	2201      	movs	r2, #1
 8002600:	4619      	mov	r1, r3
 8002602:	200e      	movs	r0, #14
 8002604:	f7ff f9b0 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002608:	783b      	ldrb	r3, [r7, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f107 0308 	add.w	r3, r7, #8
 8002610:	498f      	ldr	r1, [pc, #572]	; (8002850 <printRadioSettings+0x750>)
 8002612:	4618      	mov	r0, r3
 8002614:	f005 fd8c 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002618:	f107 0308 	add.w	r3, r7, #8
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd fdd7 	bl	80001d0 <strlen>
 8002622:	4603      	mov	r3, r0
 8002624:	b29a      	uxth	r2, r3
 8002626:	f107 0108 	add.w	r1, r7, #8
 800262a:	230a      	movs	r3, #10
 800262c:	4883      	ldr	r0, [pc, #524]	; (800283c <printRadioSettings+0x73c>)
 800262e:	f005 f8e2 	bl	80077f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8002632:	463b      	mov	r3, r7
 8002634:	2201      	movs	r2, #1
 8002636:	4619      	mov	r1, r3
 8002638:	200f      	movs	r0, #15
 800263a:	f7ff f995 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800263e:	783b      	ldrb	r3, [r7, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	f107 0308 	add.w	r3, r7, #8
 8002646:	4983      	ldr	r1, [pc, #524]	; (8002854 <printRadioSettings+0x754>)
 8002648:	4618      	mov	r0, r3
 800264a:	f005 fd71 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd fdbc 	bl	80001d0 <strlen>
 8002658:	4603      	mov	r3, r0
 800265a:	b29a      	uxth	r2, r3
 800265c:	f107 0108 	add.w	r1, r7, #8
 8002660:	230a      	movs	r3, #10
 8002662:	4876      	ldr	r0, [pc, #472]	; (800283c <printRadioSettings+0x73c>)
 8002664:	f005 f8c7 	bl	80077f6 <HAL_UART_Transmit>

	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8002668:	463b      	mov	r3, r7
 800266a:	2205      	movs	r2, #5
 800266c:	4619      	mov	r1, r3
 800266e:	2010      	movs	r0, #16
 8002670:	f7ff f97a 	bl	8001968 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002674:	793b      	ldrb	r3, [r7, #4]
 8002676:	461c      	mov	r4, r3
 8002678:	78fb      	ldrb	r3, [r7, #3]
 800267a:	461d      	mov	r5, r3
 800267c:	78bb      	ldrb	r3, [r7, #2]
 800267e:	787a      	ldrb	r2, [r7, #1]
 8002680:	7839      	ldrb	r1, [r7, #0]
 8002682:	f107 0008 	add.w	r0, r7, #8
 8002686:	9102      	str	r1, [sp, #8]
 8002688:	9201      	str	r2, [sp, #4]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	462b      	mov	r3, r5
 800268e:	4622      	mov	r2, r4
 8002690:	4971      	ldr	r1, [pc, #452]	; (8002858 <printRadioSettings+0x758>)
 8002692:	f005 fd4d 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002696:	f107 0308 	add.w	r3, r7, #8
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd fd98 	bl	80001d0 <strlen>
 80026a0:	4603      	mov	r3, r0
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	f107 0108 	add.w	r1, r7, #8
 80026a8:	230a      	movs	r3, #10
 80026aa:	4864      	ldr	r0, [pc, #400]	; (800283c <printRadioSettings+0x73c>)
 80026ac:	f005 f8a3 	bl	80077f6 <HAL_UART_Transmit>

	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 80026b0:	2011      	movs	r0, #17
 80026b2:	f7ff f931 	bl	8001918 <NRF24_read_register>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80026bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026c4:	f107 0308 	add.w	r3, r7, #8
 80026c8:	4964      	ldr	r1, [pc, #400]	; (800285c <printRadioSettings+0x75c>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	f005 fd30 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80026d0:	f107 0308 	add.w	r3, r7, #8
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fd7b 	bl	80001d0 <strlen>
 80026da:	4603      	mov	r3, r0
 80026dc:	b29a      	uxth	r2, r3
 80026de:	f107 0108 	add.w	r1, r7, #8
 80026e2:	230a      	movs	r3, #10
 80026e4:	4855      	ldr	r0, [pc, #340]	; (800283c <printRadioSettings+0x73c>)
 80026e6:	f005 f886 	bl	80077f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+1);
 80026ea:	2012      	movs	r0, #18
 80026ec:	f7ff f914 	bl	8001918 <NRF24_read_register>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80026f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80026fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026fe:	f107 0308 	add.w	r3, r7, #8
 8002702:	4957      	ldr	r1, [pc, #348]	; (8002860 <printRadioSettings+0x760>)
 8002704:	4618      	mov	r0, r3
 8002706:	f005 fd13 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800270a:	f107 0308 	add.w	r3, r7, #8
 800270e:	4618      	mov	r0, r3
 8002710:	f7fd fd5e 	bl	80001d0 <strlen>
 8002714:	4603      	mov	r3, r0
 8002716:	b29a      	uxth	r2, r3
 8002718:	f107 0108 	add.w	r1, r7, #8
 800271c:	230a      	movs	r3, #10
 800271e:	4847      	ldr	r0, [pc, #284]	; (800283c <printRadioSettings+0x73c>)
 8002720:	f005 f869 	bl	80077f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+2);
 8002724:	2013      	movs	r0, #19
 8002726:	f7ff f8f7 	bl	8001918 <NRF24_read_register>
 800272a:	4603      	mov	r3, r0
 800272c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002730:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002734:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	4949      	ldr	r1, [pc, #292]	; (8002864 <printRadioSettings+0x764>)
 800273e:	4618      	mov	r0, r3
 8002740:	f005 fcf6 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fd41 	bl	80001d0 <strlen>
 800274e:	4603      	mov	r3, r0
 8002750:	b29a      	uxth	r2, r3
 8002752:	f107 0108 	add.w	r1, r7, #8
 8002756:	230a      	movs	r3, #10
 8002758:	4838      	ldr	r0, [pc, #224]	; (800283c <printRadioSettings+0x73c>)
 800275a:	f005 f84c 	bl	80077f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+3);
 800275e:	2014      	movs	r0, #20
 8002760:	f7ff f8da 	bl	8001918 <NRF24_read_register>
 8002764:	4603      	mov	r3, r0
 8002766:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800276a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800276e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002772:	f107 0308 	add.w	r3, r7, #8
 8002776:	493c      	ldr	r1, [pc, #240]	; (8002868 <printRadioSettings+0x768>)
 8002778:	4618      	mov	r0, r3
 800277a:	f005 fcd9 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800277e:	f107 0308 	add.w	r3, r7, #8
 8002782:	4618      	mov	r0, r3
 8002784:	f7fd fd24 	bl	80001d0 <strlen>
 8002788:	4603      	mov	r3, r0
 800278a:	b29a      	uxth	r2, r3
 800278c:	f107 0108 	add.w	r1, r7, #8
 8002790:	230a      	movs	r3, #10
 8002792:	482a      	ldr	r0, [pc, #168]	; (800283c <printRadioSettings+0x73c>)
 8002794:	f005 f82f 	bl	80077f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+4);
 8002798:	2015      	movs	r0, #21
 800279a:	f7ff f8bd 	bl	8001918 <NRF24_read_register>
 800279e:	4603      	mov	r3, r0
 80027a0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80027a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027ac:	f107 0308 	add.w	r3, r7, #8
 80027b0:	492e      	ldr	r1, [pc, #184]	; (800286c <printRadioSettings+0x76c>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	f005 fcbc 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027b8:	f107 0308 	add.w	r3, r7, #8
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fd fd07 	bl	80001d0 <strlen>
 80027c2:	4603      	mov	r3, r0
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	f107 0108 	add.w	r1, r7, #8
 80027ca:	230a      	movs	r3, #10
 80027cc:	481b      	ldr	r0, [pc, #108]	; (800283c <printRadioSettings+0x73c>)
 80027ce:	f005 f812 	bl	80077f6 <HAL_UART_Transmit>

	reg8Val = NRF24_read_register(0x11+5);
 80027d2:	2016      	movs	r0, #22
 80027d4:	f7ff f8a0 	bl	8001918 <NRF24_read_register>
 80027d8:	4603      	mov	r3, r0
 80027da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80027de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80027e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e6:	f107 0308 	add.w	r3, r7, #8
 80027ea:	4921      	ldr	r1, [pc, #132]	; (8002870 <printRadioSettings+0x770>)
 80027ec:	4618      	mov	r0, r3
 80027ee:	f005 fc9f 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80027f2:	f107 0308 	add.w	r3, r7, #8
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fcea 	bl	80001d0 <strlen>
 80027fc:	4603      	mov	r3, r0
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f107 0108 	add.w	r1, r7, #8
 8002804:	230a      	movs	r3, #10
 8002806:	480d      	ldr	r0, [pc, #52]	; (800283c <printRadioSettings+0x73c>)
 8002808:	f004 fff5 	bl	80077f6 <HAL_UART_Transmit>

	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800280c:	201c      	movs	r0, #28
 800280e:	f7ff f883 	bl	8001918 <NRF24_read_register>
 8002812:	4603      	mov	r3, r0
 8002814:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002818:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800281c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002820:	2b00      	cmp	r3, #0
 8002822:	bfcc      	ite	gt
 8002824:	2301      	movgt	r3, #1
 8002826:	2300      	movle	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800282c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	e01e      	b.n	8002874 <printRadioSettings+0x774>
 8002836:	bf00      	nop
 8002838:	08008d04 	.word	0x08008d04
 800283c:	20000114 	.word	0x20000114
 8002840:	08008d18 	.word	0x08008d18
 8002844:	08008d48 	.word	0x08008d48
 8002848:	08008d78 	.word	0x08008d78
 800284c:	08008da0 	.word	0x08008da0
 8002850:	08008dc8 	.word	0x08008dc8
 8002854:	08008df0 	.word	0x08008df0
 8002858:	08008e18 	.word	0x08008e18
 800285c:	08008e44 	.word	0x08008e44
 8002860:	08008e60 	.word	0x08008e60
 8002864:	08008e7c 	.word	0x08008e7c
 8002868:	08008e98 	.word	0x08008e98
 800286c:	08008eb4 	.word	0x08008eb4
 8002870:	08008ed0 	.word	0x08008ed0
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002874:	2b00      	cmp	r3, #0
 8002876:	bfcc      	ite	gt
 8002878:	2301      	movgt	r3, #1
 800287a:	2300      	movle	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002880:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002884:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002888:	2b00      	cmp	r3, #0
 800288a:	bfcc      	ite	gt
 800288c:	2301      	movgt	r3, #1
 800288e:	2300      	movle	r3, #0
 8002890:	b2db      	uxtb	r3, r3
 8002892:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002894:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002898:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800289c:	2b00      	cmp	r3, #0
 800289e:	bfcc      	ite	gt
 80028a0:	2301      	movgt	r3, #1
 80028a2:	2300      	movle	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80028a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028ac:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	bfcc      	ite	gt
 80028b4:	2301      	movgt	r3, #1
 80028b6:	2300      	movle	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80028bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80028c0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bfcc      	ite	gt
 80028c8:	2301      	movgt	r3, #1
 80028ca:	2300      	movle	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f107 0008 	add.w	r0, r7, #8
 80028d2:	9303      	str	r3, [sp, #12]
 80028d4:	9402      	str	r4, [sp, #8]
 80028d6:	9101      	str	r1, [sp, #4]
 80028d8:	9200      	str	r2, [sp, #0]
 80028da:	4633      	mov	r3, r6
 80028dc:	462a      	mov	r2, r5
 80028de:	494a      	ldr	r1, [pc, #296]	; (8002a08 <printRadioSettings+0x908>)
 80028e0:	f005 fc26 	bl	8008130 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	4618      	mov	r0, r3
 80028ea:	f7fd fc71 	bl	80001d0 <strlen>
 80028ee:	4603      	mov	r3, r0
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	f107 0108 	add.w	r1, r7, #8
 80028f6:	230a      	movs	r3, #10
 80028f8:	4844      	ldr	r0, [pc, #272]	; (8002a0c <printRadioSettings+0x90c>)
 80028fa:	f004 ff7c 	bl	80077f6 <HAL_UART_Transmit>

	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80028fe:	201d      	movs	r0, #29
 8002900:	f7ff f80a 	bl	8001918 <NRF24_read_register>
 8002904:	4603      	mov	r3, r0
 8002906:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800290a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00c      	beq.n	8002930 <printRadioSettings+0x830>
 8002916:	f107 0308 	add.w	r3, r7, #8
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <printRadioSettings+0x910>)
 800291c:	461c      	mov	r4, r3
 800291e:	4615      	mov	r5, r2
 8002920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002924:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002928:	6020      	str	r0, [r4, #0]
 800292a:	3404      	adds	r4, #4
 800292c:	8021      	strh	r1, [r4, #0]
 800292e:	e00e      	b.n	800294e <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	4a37      	ldr	r2, [pc, #220]	; (8002a14 <printRadioSettings+0x914>)
 8002936:	461c      	mov	r4, r3
 8002938:	4615      	mov	r5, r2
 800293a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800293c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800293e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002942:	6020      	str	r0, [r4, #0]
 8002944:	3404      	adds	r4, #4
 8002946:	8021      	strh	r1, [r4, #0]
 8002948:	3402      	adds	r4, #2
 800294a:	0c0b      	lsrs	r3, r1, #16
 800294c:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800294e:	f107 0308 	add.w	r3, r7, #8
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fc3c 	bl	80001d0 <strlen>
 8002958:	4603      	mov	r3, r0
 800295a:	b29a      	uxth	r2, r3
 800295c:	f107 0108 	add.w	r1, r7, #8
 8002960:	230a      	movs	r3, #10
 8002962:	482a      	ldr	r0, [pc, #168]	; (8002a0c <printRadioSettings+0x90c>)
 8002964:	f004 ff47 	bl	80077f6 <HAL_UART_Transmit>

	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002968:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00b      	beq.n	800298c <printRadioSettings+0x88c>
 8002974:	f107 0308 	add.w	r3, r7, #8
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <printRadioSettings+0x918>)
 800297a:	461c      	mov	r4, r3
 800297c:	4615      	mov	r5, r2
 800297e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002980:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002982:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002986:	c403      	stmia	r4!, {r0, r1}
 8002988:	8022      	strh	r2, [r4, #0]
 800298a:	e00d      	b.n	80029a8 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	4a22      	ldr	r2, [pc, #136]	; (8002a1c <printRadioSettings+0x91c>)
 8002992:	461c      	mov	r4, r3
 8002994:	4615      	mov	r5, r2
 8002996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800299a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800299e:	c403      	stmia	r4!, {r0, r1}
 80029a0:	8022      	strh	r2, [r4, #0]
 80029a2:	3402      	adds	r4, #2
 80029a4:	0c13      	lsrs	r3, r2, #16
 80029a6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fd fc0f 	bl	80001d0 <strlen>
 80029b2:	4603      	mov	r3, r0
 80029b4:	b29a      	uxth	r2, r3
 80029b6:	f107 0108 	add.w	r1, r7, #8
 80029ba:	230a      	movs	r3, #10
 80029bc:	4813      	ldr	r0, [pc, #76]	; (8002a0c <printRadioSettings+0x90c>)
 80029be:	f004 ff1a 	bl	80077f6 <HAL_UART_Transmit>


	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80029c2:	f107 0308 	add.w	r3, r7, #8
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <printRadioSettings+0x920>)
 80029c8:	461c      	mov	r4, r3
 80029ca:	4615      	mov	r5, r2
 80029cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029d8:	682b      	ldr	r3, [r5, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	8022      	strh	r2, [r4, #0]
 80029de:	3402      	adds	r4, #2
 80029e0:	0c1b      	lsrs	r3, r3, #16
 80029e2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80029e4:	f107 0308 	add.w	r3, r7, #8
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fd fbf1 	bl	80001d0 <strlen>
 80029ee:	4603      	mov	r3, r0
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	f107 0108 	add.w	r1, r7, #8
 80029f6:	230a      	movs	r3, #10
 80029f8:	4804      	ldr	r0, [pc, #16]	; (8002a0c <printRadioSettings+0x90c>)
 80029fa:	f004 fefc 	bl	80077f6 <HAL_UART_Transmit>
}
 80029fe:	bf00      	nop
 8002a00:	3774      	adds	r7, #116	; 0x74
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a06:	bf00      	nop
 8002a08:	08008eec 	.word	0x08008eec
 8002a0c:	20000114 	.word	0x20000114
 8002a10:	08008f38 	.word	0x08008f38
 8002a14:	08008f50 	.word	0x08008f50
 8002a18:	08008f68 	.word	0x08008f68
 8002a1c:	08008f84 	.word	0x08008f84
 8002a20:	08008b58 	.word	0x08008b58

08002a24 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8002a24:	b084      	sub	sp, #16
 8002a26:	b4b0      	push	{r4, r5, r7}
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	f107 040c 	add.w	r4, r7, #12
 8002a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <nrf24_DebugUART_Init+0x34>)
 8002a34:	461c      	mov	r4, r3
 8002a36:	f107 050c 	add.w	r5, r7, #12
 8002a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bcb0      	pop	{r4, r5, r7}
 8002a54:	b004      	add	sp, #16
 8002a56:	4770      	bx	lr
 8002a58:	20000114 	.word	0x20000114

08002a5c <PID_Init>:
 #include "PID.h"

void PID_Init(PIDController *pid, int N_input) {//nMotor is the number of motor to control
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]

	/* Clear controller variables */
	for(int i = 0;i < N_input; i++){
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e02a      	b.n	8002ac2 <PID_Init+0x66>
		pid->integrator[i] = 0.0f;
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3306      	adds	r3, #6
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]
		pid->prevError[i]  = 0.0f;
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	330c      	adds	r3, #12
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

		pid->differentiator[i]  = 0.0f;
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	3312      	adds	r3, #18
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
		pid->prevMeasurement[i] = 0.0f;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

		pid->out[i] = 0.0f;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	331e      	adds	r3, #30
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
	for(int i = 0;i < N_input; i++){
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	dbd0      	blt.n	8002a6c <PID_Init+0x10>
	}


}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <PID>:

float PID(PIDController *pid, float setpoint, float measurement,float Kp,float Ki,float Kd, int i){// "i" input identity
 8002ad6:	b480      	push	{r7}
 8002ad8:	b08b      	sub	sp, #44	; 0x2c
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	61f8      	str	r0, [r7, #28]
 8002ade:	ed87 0a06 	vstr	s0, [r7, #24]
 8002ae2:	edc7 0a05 	vstr	s1, [r7, #20]
 8002ae6:	ed87 1a04 	vstr	s2, [r7, #16]
 8002aea:	edc7 1a03 	vstr	s3, [r7, #12]
 8002aee:	ed87 2a02 	vstr	s4, [r7, #8]
 8002af2:	6079      	str	r1, [r7, #4]
	/*
	* -------------------------------------Error signal------------------------------------------
	*/
	float error = setpoint - measurement;;
 8002af4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002af8:	edd7 7a05 	vldr	s15, [r7, #20]
 8002afc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b00:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	/*
	* Proportional
	*/
    float proportional = Kp * error;
 8002b04:	ed97 7a04 	vldr	s14, [r7, #16]
 8002b08:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b10:	edc7 7a08 	vstr	s15, [r7, #32]
	/*
	* ----------------------------------------Integral-----------------------------------------------
	*/
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	3306      	adds	r3, #6
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	ed93 7a00 	vldr	s14, [r3]
 8002b22:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b26:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002b2a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	edd3 7a05 	vldr	s15, [r3, #20]
 8002b34:	ee66 6aa7 	vmul.f32	s13, s13, s15
    					* (error + pid->prevError[i]);
 8002b38:	69fa      	ldr	r2, [r7, #28]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	330c      	adds	r3, #12
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	ed93 6a00 	vldr	s12, [r3]
 8002b46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002b4a:	ee76 7a27 	vadd.f32	s15, s12, s15
 8002b4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pid->integrator[i]	= pid->integrator[i] + 0.5f * Ki * pid->T
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	69fa      	ldr	r2, [r7, #28]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3306      	adds	r3, #6
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	edc3 7a00 	vstr	s15, [r3]

	/* Anti-wind-up via integrator clamping */
    if (pid->integrator[i] > pid->limMaxInt) {
 8002b64:	69fa      	ldr	r2, [r7, #28]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3306      	adds	r3, #6
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	ed93 7a00 	vldr	s14, [r3]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8002b78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	dd08      	ble.n	8002b94 <PID+0xbe>
        pid->integrator[i] = pid->limMaxInt;
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	69f9      	ldr	r1, [r7, #28]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3306      	adds	r3, #6
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	601a      	str	r2, [r3, #0]
 8002b92:	e023      	b.n	8002bdc <PID+0x106>
    }
    else if (pid->integrator[i] < pid->limMinInt) {
 8002b94:	69fa      	ldr	r2, [r7, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3306      	adds	r3, #6
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4413      	add	r3, r2
 8002b9e:	ed93 7a00 	vldr	s14, [r3]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ba8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bb0:	d508      	bpl.n	8002bc4 <PID+0xee>
        pid->integrator[i] = pid->limMinInt;
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	68da      	ldr	r2, [r3, #12]
 8002bb6:	69f9      	ldr	r1, [r7, #28]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3306      	adds	r3, #6
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	440b      	add	r3, r1
 8002bc0:	601a      	str	r2, [r3, #0]
 8002bc2:	e00b      	b.n	8002bdc <PID+0x106>
    }
    else{
    	pid->integrator[i] = pid->integrator[i];
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3306      	adds	r3, #6
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4413      	add	r3, r2
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	69f9      	ldr	r1, [r7, #28]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3306      	adds	r3, #6
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	601a      	str	r2, [r3, #0]

	/*
	* Derivative (band-limited differentator)
	*/
		
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002bdc:	edd7 7a02 	vldr	s15, [r7, #8]
 8002be0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002be4:	69fa      	ldr	r2, [r7, #28]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	3318      	adds	r3, #24
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	edd3 7a00 	vldr	s15, [r3]
 8002bf2:	edd7 6a05 	vldr	s13, [r7, #20]
 8002bf6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002bfa:	ee27 7a27 	vmul.f32	s14, s14, s15
                        	 + (2.0f * pid->tau - pid->T) * pid->differentiator[i])
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c0e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c12:	69fa      	ldr	r2, [r7, #28]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3312      	adds	r3, #18
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	edd3 7a00 	vldr	s15, [r3]
 8002c20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c24:	ee77 7a27 	vadd.f32	s15, s14, s15
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002c28:	eef1 6a67 	vneg.f32	s13, s15
							 / (2.0f * pid->tau + pid->T);
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	edd3 7a05 	vldr	s15, [r3, #20]
 8002c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c40:	eec6 7a87 	vdiv.f32	s15, s13, s14
    pid->differentiator[i] = -(2.0f * Kd * (measurement - pid->prevMeasurement[i])	/* Note: derivative on measurement, therefore minus sign in front of equation! */
 8002c44:	69fa      	ldr	r2, [r7, #28]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	3312      	adds	r3, #18
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	edc3 7a00 	vstr	s15, [r3]
	/*
	* Compute output and apply limits
	*/
    pid->out[i] = proportional + pid->integrator[i] + pid->differentiator[i];
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3306      	adds	r3, #6
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	ed93 7a00 	vldr	s14, [r3]
 8002c60:	edd7 7a08 	vldr	s15, [r7, #32]
 8002c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c68:	69fa      	ldr	r2, [r7, #28]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	3312      	adds	r3, #18
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	331e      	adds	r3, #30
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	edc3 7a00 	vstr	s15, [r3]
    //sat[i] = pid->out[i];
    if (pid->out[i] > pid->limMax) {
 8002c88:	69fa      	ldr	r2, [r7, #28]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	331e      	adds	r3, #30
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	edd3 7a02 	vldr	s15, [r3, #8]
 8002c9c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca4:	dd08      	ble.n	8002cb8 <PID+0x1e2>
        pid->out[i] = pid->limMax;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	69f9      	ldr	r1, [r7, #28]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	331e      	adds	r3, #30
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e023      	b.n	8002d00 <PID+0x22a>
    }
    else if (pid->out[i] < pid->limMin) {
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	331e      	adds	r3, #30
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	4413      	add	r3, r2
 8002cc2:	ed93 7a00 	vldr	s14, [r3]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd4:	d508      	bpl.n	8002ce8 <PID+0x212>
        pid->out[i] = pid->limMin;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	69f9      	ldr	r1, [r7, #28]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	331e      	adds	r3, #30
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	e00b      	b.n	8002d00 <PID+0x22a>
    }
    else{
    	pid->out[i] = pid->out[i];
 8002ce8:	69fa      	ldr	r2, [r7, #28]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	331e      	adds	r3, #30
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	69f9      	ldr	r1, [r7, #28]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	331e      	adds	r3, #30
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	601a      	str	r2, [r3, #0]
    }

    /* Store error and measurement for later use */
    pid->prevError[i]       = error;
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	330c      	adds	r3, #12
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	601a      	str	r2, [r3, #0]
    pid->prevMeasurement[i] = measurement;
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3318      	adds	r3, #24
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	4413      	add	r3, r2
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	601a      	str	r2, [r3, #0]

	/* Return controller output */
    return pid->out[i];
 8002d1c:	69fa      	ldr	r2, [r7, #28]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	331e      	adds	r3, #30
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	ee07 3a90 	vmov	s15, r3

}
 8002d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002d30:	372c      	adds	r7, #44	; 0x2c
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
	...

08002d3c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b08c      	sub	sp, #48	; 0x30
 8002d40:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d42:	f107 031c 	add.w	r3, r7, #28
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
 8002d4e:	60da      	str	r2, [r3, #12]
 8002d50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	61bb      	str	r3, [r7, #24]
 8002d56:	4b75      	ldr	r3, [pc, #468]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	4a74      	ldr	r2, [pc, #464]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d5c:	f043 0304 	orr.w	r3, r3, #4
 8002d60:	6313      	str	r3, [r2, #48]	; 0x30
 8002d62:	4b72      	ldr	r3, [pc, #456]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	f003 0304 	and.w	r3, r3, #4
 8002d6a:	61bb      	str	r3, [r7, #24]
 8002d6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	4b6e      	ldr	r3, [pc, #440]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	4a6d      	ldr	r2, [pc, #436]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7e:	4b6b      	ldr	r3, [pc, #428]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	617b      	str	r3, [r7, #20]
 8002d88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	613b      	str	r3, [r7, #16]
 8002d8e:	4b67      	ldr	r3, [pc, #412]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d92:	4a66      	ldr	r2, [pc, #408]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d94:	f043 0302 	orr.w	r3, r3, #2
 8002d98:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9a:	4b64      	ldr	r3, [pc, #400]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60fb      	str	r3, [r7, #12]
 8002daa:	4b60      	ldr	r3, [pc, #384]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	4a5f      	ldr	r2, [pc, #380]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	6313      	str	r3, [r2, #48]	; 0x30
 8002db6:	4b5d      	ldr	r3, [pc, #372]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	f003 0310 	and.w	r3, r3, #16
 8002dbe:	60fb      	str	r3, [r7, #12]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	4b59      	ldr	r3, [pc, #356]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	4a58      	ldr	r2, [pc, #352]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002dcc:	f043 0308 	orr.w	r3, r3, #8
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dd2:	4b56      	ldr	r3, [pc, #344]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	60bb      	str	r3, [r7, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	607b      	str	r3, [r7, #4]
 8002de2:	4b52      	ldr	r3, [pc, #328]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	4a51      	ldr	r2, [pc, #324]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002de8:	f043 0301 	orr.w	r3, r3, #1
 8002dec:	6313      	str	r3, [r2, #48]	; 0x30
 8002dee:	4b4f      	ldr	r3, [pc, #316]	; (8002f2c <MX_GPIO_Init+0x1f0>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	607b      	str	r3, [r7, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002e00:	484b      	ldr	r0, [pc, #300]	; (8002f30 <MX_GPIO_Init+0x1f4>)
 8002e02:	f002 fb63 	bl	80054cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(step1_GPIO_Port, step1_Pin, GPIO_PIN_RESET);
 8002e06:	2200      	movs	r2, #0
 8002e08:	2104      	movs	r1, #4
 8002e0a:	484a      	ldr	r0, [pc, #296]	; (8002f34 <MX_GPIO_Init+0x1f8>)
 8002e0c:	f002 fb5e 	bl	80054cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, dir1_Pin|step2_Pin|dir2_Pin, GPIO_PIN_RESET);
 8002e10:	2200      	movs	r2, #0
 8002e12:	f44f 7160 	mov.w	r1, #896	; 0x380
 8002e16:	4848      	ldr	r0, [pc, #288]	; (8002f38 <MX_GPIO_Init+0x1fc>)
 8002e18:	f002 fb58 	bl	80054cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	21c0      	movs	r1, #192	; 0xc0
 8002e20:	4846      	ldr	r0, [pc, #280]	; (8002f3c <MX_GPIO_Init+0x200>)
 8002e22:	f002 fb53 	bl	80054cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002e26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e34:	2300      	movs	r3, #0
 8002e36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	483c      	ldr	r0, [pc, #240]	; (8002f30 <MX_GPIO_Init+0x1f4>)
 8002e40:	f002 f992 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = step1_Pin;
 8002e44:	2304      	movs	r3, #4
 8002e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e50:	2303      	movs	r3, #3
 8002e52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4836      	ldr	r0, [pc, #216]	; (8002f34 <MX_GPIO_Init+0x1f8>)
 8002e5c:	f002 f984 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = dir1_Pin|dir2_Pin;
 8002e60:	f44f 7320 	mov.w	r3, #640	; 0x280
 8002e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e66:	2301      	movs	r3, #1
 8002e68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	482f      	ldr	r0, [pc, #188]	; (8002f38 <MX_GPIO_Init+0x1fc>)
 8002e7a:	f002 f975 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = step2_Pin;
 8002e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e84:	2301      	movs	r3, #1
 8002e86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(step2_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 031c 	add.w	r3, r7, #28
 8002e94:	4619      	mov	r1, r3
 8002e96:	4828      	ldr	r0, [pc, #160]	; (8002f38 <MX_GPIO_Init+0x1fc>)
 8002e98:	f002 f966 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M4_CHB_Pin|M4_CHA_Pin|M3_CHB_Pin|M3_CHA_Pin;
 8002e9c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002ea0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ea2:	4b27      	ldr	r3, [pc, #156]	; (8002f40 <MX_GPIO_Init+0x204>)
 8002ea4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002eaa:	f107 031c 	add.w	r3, r7, #28
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4820      	ldr	r0, [pc, #128]	; (8002f34 <MX_GPIO_Init+0x1f8>)
 8002eb2:	f002 f959 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = M2_CHB_Pin|M2_CHA_Pin|M1_CHB_Pin|M1_CHA_Pin;
 8002eb6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002ebc:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <MX_GPIO_Init+0x204>)
 8002ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ec4:	f107 031c 	add.w	r3, r7, #28
 8002ec8:	4619      	mov	r1, r3
 8002eca:	481c      	ldr	r0, [pc, #112]	; (8002f3c <MX_GPIO_Init+0x200>)
 8002ecc:	f002 f94c 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = limit1_Pin|limit2_Pin;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002edc:	f107 031c 	add.w	r3, r7, #28
 8002ee0:	4619      	mov	r1, r3
 8002ee2:	4816      	ldr	r0, [pc, #88]	; (8002f3c <MX_GPIO_Init+0x200>)
 8002ee4:	f002 f940 	bl	8005168 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ee8:	23c0      	movs	r3, #192	; 0xc0
 8002eea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002eec:	2301      	movs	r3, #1
 8002eee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ef8:	f107 031c 	add.w	r3, r7, #28
 8002efc:	4619      	mov	r1, r3
 8002efe:	480f      	ldr	r0, [pc, #60]	; (8002f3c <MX_GPIO_Init+0x200>)
 8002f00:	f002 f932 	bl	8005168 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002f04:	2200      	movs	r2, #0
 8002f06:	2100      	movs	r1, #0
 8002f08:	2017      	movs	r0, #23
 8002f0a:	f002 f8f6 	bl	80050fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002f0e:	2017      	movs	r0, #23
 8002f10:	f002 f90f 	bl	8005132 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002f14:	2200      	movs	r2, #0
 8002f16:	2100      	movs	r1, #0
 8002f18:	2028      	movs	r0, #40	; 0x28
 8002f1a:	f002 f8ee 	bl	80050fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002f1e:	2028      	movs	r0, #40	; 0x28
 8002f20:	f002 f907 	bl	8005132 <HAL_NVIC_EnableIRQ>

}
 8002f24:	bf00      	nop
 8002f26:	3730      	adds	r7, #48	; 0x30
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	40023800 	.word	0x40023800
 8002f30:	40020800 	.word	0x40020800
 8002f34:	40020400 	.word	0x40020400
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	40020c00 	.word	0x40020c00
 8002f40:	10310000 	.word	0x10310000

08002f44 <DWT_Init>:
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <DWT_Init+0x28>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	4a07      	ldr	r2, [pc, #28]	; (8002f6c <DWT_Init+0x28>)
 8002f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f52:	60d3      	str	r3, [r2, #12]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <DWT_Init+0x2c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <DWT_Init+0x2c>)
 8002f5a:	f043 0301 	orr.w	r3, r3, #1
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	e000edf0 	.word	0xe000edf0
 8002f70:	e0001000 	.word	0xe0001000

08002f74 <map>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float map(float Input, float Min_Input , float Max_Input ,float Min_Output, float Max_Output){
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	ed87 0a05 	vstr	s0, [r7, #20]
 8002f7e:	edc7 0a04 	vstr	s1, [r7, #16]
 8002f82:	ed87 1a03 	vstr	s2, [r7, #12]
 8002f86:	edc7 1a02 	vstr	s3, [r7, #8]
 8002f8a:	ed87 2a01 	vstr	s4, [r7, #4]

	return (float) ((Input - Min_Input) * (Max_Output - Min_Output) / (Max_Input - Min_Input) + Min_Output);
 8002f8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002f92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f9a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002f9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fa2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002fa6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002faa:	ed97 7a03 	vldr	s14, [r7, #12]
 8002fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fba:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fc6:	371c      	adds	r7, #28
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <reset_data>:
void reset_data(void){
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
	myRxData[0] = 128;//x1
 8002fd4:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <reset_data+0x2c>)
 8002fd6:	2280      	movs	r2, #128	; 0x80
 8002fd8:	701a      	strb	r2, [r3, #0]
	myRxData[1] = 128;//y1
 8002fda:	4b08      	ldr	r3, [pc, #32]	; (8002ffc <reset_data+0x2c>)
 8002fdc:	2280      	movs	r2, #128	; 0x80
 8002fde:	705a      	strb	r2, [r3, #1]
	myRxData[2] = 128;//x2
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <reset_data+0x2c>)
 8002fe2:	2280      	movs	r2, #128	; 0x80
 8002fe4:	709a      	strb	r2, [r3, #2]
	myRxData[3] = 128; //y2
 8002fe6:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <reset_data+0x2c>)
 8002fe8:	2280      	movs	r2, #128	; 0x80
 8002fea:	70da      	strb	r2, [r3, #3]
	myRxData[7] = 0; //all button
 8002fec:	4b03      	ldr	r3, [pc, #12]	; (8002ffc <reset_data+0x2c>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	71da      	strb	r2, [r3, #7]
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	20000238 	.word	0x20000238

08003000 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003002:	b097      	sub	sp, #92	; 0x5c
 8003004:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */
	// PID init--------------------------------
	PID_Init(&MPID, 4);
 8003006:	2104      	movs	r1, #4
 8003008:	48c4      	ldr	r0, [pc, #784]	; (800331c <main+0x31c>)
 800300a:	f7ff fd27 	bl	8002a5c <PID_Init>
	MPID.T = 0.01;		// T = 10ms
 800300e:	4bc3      	ldr	r3, [pc, #780]	; (800331c <main+0x31c>)
 8003010:	4ac3      	ldr	r2, [pc, #780]	; (8003320 <main+0x320>)
 8003012:	615a      	str	r2, [r3, #20]
	MPID.limMax = 1000;
 8003014:	4bc1      	ldr	r3, [pc, #772]	; (800331c <main+0x31c>)
 8003016:	4ac3      	ldr	r2, [pc, #780]	; (8003324 <main+0x324>)
 8003018:	609a      	str	r2, [r3, #8]
	MPID.limMin = -1000;
 800301a:	4bc0      	ldr	r3, [pc, #768]	; (800331c <main+0x31c>)
 800301c:	4ac2      	ldr	r2, [pc, #776]	; (8003328 <main+0x328>)
 800301e:	605a      	str	r2, [r3, #4]
	MPID.limMaxInt = 1000;
 8003020:	4bbe      	ldr	r3, [pc, #760]	; (800331c <main+0x31c>)
 8003022:	4ac0      	ldr	r2, [pc, #768]	; (8003324 <main+0x324>)
 8003024:	611a      	str	r2, [r3, #16]
	MPID.limMinInt = -1000;
 8003026:	4bbd      	ldr	r3, [pc, #756]	; (800331c <main+0x31c>)
 8003028:	4abf      	ldr	r2, [pc, #764]	; (8003328 <main+0x328>)
 800302a:	60da      	str	r2, [r3, #12]
	MPID.tau = 0;	// for Kd
 800302c:	4bbb      	ldr	r3, [pc, #748]	; (800331c <main+0x31c>)
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003034:	f001 fef2 	bl	8004e1c <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Init();
 8003038:	f7ff ff84 	bl	8002f44 <DWT_Init>
  InitStepper(&stepper_under, step1_Pin, step1_GPIO_Port, dir1_Pin, dir1_GPIO_Port, 0);
 800303c:	2300      	movs	r3, #0
 800303e:	9301      	str	r3, [sp, #4]
 8003040:	4bba      	ldr	r3, [pc, #744]	; (800332c <main+0x32c>)
 8003042:	9300      	str	r3, [sp, #0]
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	4aba      	ldr	r2, [pc, #744]	; (8003330 <main+0x330>)
 8003048:	2104      	movs	r1, #4
 800304a:	48ba      	ldr	r0, [pc, #744]	; (8003334 <main+0x334>)
 800304c:	f7fe f9a3 	bl	8001396 <InitStepper>
  setAcceleration(&stepper_under, 3000);
 8003050:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8003338 <main+0x338>
 8003054:	48b7      	ldr	r0, [pc, #732]	; (8003334 <main+0x334>)
 8003056:	f7fe fa5b 	bl	8001510 <setAcceleration>
  setMaxSpeed(&stepper_under, 4000);
 800305a:	ed9f 0ab8 	vldr	s0, [pc, #736]	; 800333c <main+0x33c>
 800305e:	48b5      	ldr	r0, [pc, #724]	; (8003334 <main+0x334>)
 8003060:	f7fe fa06 	bl	8001470 <setMaxSpeed>
  moveTo(&stepper_under, -20000);
 8003064:	49b6      	ldr	r1, [pc, #728]	; (8003340 <main+0x340>)
 8003066:	48b3      	ldr	r0, [pc, #716]	; (8003334 <main+0x334>)
 8003068:	f7fd ffa6 	bl	8000fb8 <moveTo>

  InitStepper(&stepper_upper, step2_Pin, step2_GPIO_Port, dir2_Pin, dir2_GPIO_Port, 0);
 800306c:	2300      	movs	r3, #0
 800306e:	9301      	str	r3, [sp, #4]
 8003070:	4bae      	ldr	r3, [pc, #696]	; (800332c <main+0x32c>)
 8003072:	9300      	str	r3, [sp, #0]
 8003074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003078:	4aac      	ldr	r2, [pc, #688]	; (800332c <main+0x32c>)
 800307a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800307e:	48b1      	ldr	r0, [pc, #708]	; (8003344 <main+0x344>)
 8003080:	f7fe f989 	bl	8001396 <InitStepper>
  setAcceleration(&stepper_upper, 1000);
 8003084:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8003348 <main+0x348>
 8003088:	48ae      	ldr	r0, [pc, #696]	; (8003344 <main+0x344>)
 800308a:	f7fe fa41 	bl	8001510 <setAcceleration>
  setMaxSpeed(&stepper_upper, 5000);
 800308e:	ed9f 0aaf 	vldr	s0, [pc, #700]	; 800334c <main+0x34c>
 8003092:	48ac      	ldr	r0, [pc, #688]	; (8003344 <main+0x344>)
 8003094:	f7fe f9ec 	bl	8001470 <setMaxSpeed>
  moveTo(&stepper_upper, -100000);
 8003098:	49ad      	ldr	r1, [pc, #692]	; (8003350 <main+0x350>)
 800309a:	48aa      	ldr	r0, [pc, #680]	; (8003344 <main+0x344>)
 800309c:	f7fd ff8c 	bl	8000fb8 <moveTo>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030a0:	f000 faa2 	bl	80035e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030a4:	f7ff fe4a 	bl	8002d3c <MX_GPIO_Init>
  MX_SPI1_Init();
 80030a8:	f001 f93e 	bl	8004328 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80030ac:	f001 fe1a 	bl	8004ce4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80030b0:	f001 fa9a 	bl	80045e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80030b4:	f001 fb5c 	bl	8004770 <MX_TIM3_Init>
  MX_TIM7_Init();
 80030b8:	f001 fc8a 	bl	80049d0 <MX_TIM7_Init>
  MX_TIM4_Init();
 80030bc:	f001 fbf0 	bl	80048a0 <MX_TIM4_Init>
  MX_TIM9_Init();
 80030c0:	f001 fcbc 	bl	8004a3c <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  	NRF24_begin(GPIOD,GPIO_PIN_7, GPIO_PIN_6,hspi1);
 80030c4:	4ca3      	ldr	r4, [pc, #652]	; (8003354 <main+0x354>)
 80030c6:	4668      	mov	r0, sp
 80030c8:	1d23      	adds	r3, r4, #4
 80030ca:	2254      	movs	r2, #84	; 0x54
 80030cc:	4619      	mov	r1, r3
 80030ce:	f005 f81b 	bl	8008108 <memcpy>
 80030d2:	6823      	ldr	r3, [r4, #0]
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	2180      	movs	r1, #128	; 0x80
 80030d8:	489f      	ldr	r0, [pc, #636]	; (8003358 <main+0x358>)
 80030da:	f7fe fd05 	bl	8001ae8 <NRF24_begin>
    nrf24_DebugUART_Init(huart1);
 80030de:	4e9f      	ldr	r6, [pc, #636]	; (800335c <main+0x35c>)
 80030e0:	466d      	mov	r5, sp
 80030e2:	f106 0410 	add.w	r4, r6, #16
 80030e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80030ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80030ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80030f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80030f6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80030fa:	f7ff fc93 	bl	8002a24 <nrf24_DebugUART_Init>

    printRadioSettings();
 80030fe:	f7fe ffff 	bl	8002100 <printRadioSettings>
  	NRF24_setAutoAck(true);
 8003102:	2001      	movs	r0, #1
 8003104:	f7fe fede 	bl	8001ec4 <NRF24_setAutoAck>
  	NRF24_setChannel(68);
 8003108:	2044      	movs	r0, #68	; 0x44
 800310a:	f7fe fe82 	bl	8001e12 <NRF24_setChannel>
  	NRF24_setPayloadSize(32);
 800310e:	2020      	movs	r0, #32
 8003110:	f7fe fe94 	bl	8001e3c <NRF24_setPayloadSize>
  	NRF24_openReadingPipe(1, RxpipeAddrs);
 8003114:	4b92      	ldr	r3, [pc, #584]	; (8003360 <main+0x360>)
 8003116:	e9d3 3400 	ldrd	r3, r4, [r3]
 800311a:	461a      	mov	r2, r3
 800311c:	4623      	mov	r3, r4
 800311e:	2001      	movs	r0, #1
 8003120:	f7fe fe0e 	bl	8001d40 <NRF24_openReadingPipe>
  	NRF24_startListening();
 8003124:	f7fe fdbe 	bl	8001ca4 <NRF24_startListening>
  	reset_data();
 8003128:	f7ff ff52 	bl	8002fd0 <reset_data>

  	// timer
	HAL_TIM_Base_Start_IT(&htim7);
 800312c:	488d      	ldr	r0, [pc, #564]	; (8003364 <main+0x364>)
 800312e:	f003 fbde 	bl	80068ee <HAL_TIM_Base_Start_IT>
	//HAL_TIM_Base_Start_IT(&htim2); no need to use

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003132:	2100      	movs	r1, #0
 8003134:	488c      	ldr	r0, [pc, #560]	; (8003368 <main+0x368>)
 8003136:	f003 fc33 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800313a:	2104      	movs	r1, #4
 800313c:	488a      	ldr	r0, [pc, #552]	; (8003368 <main+0x368>)
 800313e:	f003 fc2f 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003142:	2108      	movs	r1, #8
 8003144:	4888      	ldr	r0, [pc, #544]	; (8003368 <main+0x368>)
 8003146:	f003 fc2b 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800314a:	210c      	movs	r1, #12
 800314c:	4886      	ldr	r0, [pc, #536]	; (8003368 <main+0x368>)
 800314e:	f003 fc27 	bl	80069a0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003152:	2100      	movs	r1, #0
 8003154:	4885      	ldr	r0, [pc, #532]	; (800336c <main+0x36c>)
 8003156:	f003 fc23 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800315a:	2104      	movs	r1, #4
 800315c:	4883      	ldr	r0, [pc, #524]	; (800336c <main+0x36c>)
 800315e:	f003 fc1f 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8003162:	2108      	movs	r1, #8
 8003164:	4881      	ldr	r0, [pc, #516]	; (800336c <main+0x36c>)
 8003166:	f003 fc1b 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 800316a:	210c      	movs	r1, #12
 800316c:	487f      	ldr	r0, [pc, #508]	; (800336c <main+0x36c>)
 800316e:	f003 fc17 	bl	80069a0 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003172:	2100      	movs	r1, #0
 8003174:	487e      	ldr	r0, [pc, #504]	; (8003370 <main+0x370>)
 8003176:	f003 fc13 	bl	80069a0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800317a:	2104      	movs	r1, #4
 800317c:	487c      	ldr	r0, [pc, #496]	; (8003370 <main+0x370>)
 800317e:	f003 fc0f 	bl	80069a0 <HAL_TIM_PWM_Start>
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
			// map that data
		  if(homing_stepper_under == 1 && homing_stepper_upper == 1){
 8003182:	4b7c      	ldr	r3, [pc, #496]	; (8003374 <main+0x374>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b01      	cmp	r3, #1
 8003188:	f040 811f 	bne.w	80033ca <main+0x3ca>
 800318c:	4b7a      	ldr	r3, [pc, #488]	; (8003378 <main+0x378>)
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b01      	cmp	r3, #1
 8003192:	f040 811a 	bne.w	80033ca <main+0x3ca>
				if(NRF24_available()){
 8003196:	f7fe fdab 	bl	8001cf0 <NRF24_available>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d022      	beq.n	80031e6 <main+0x1e6>
					NRF24_read(myRxData, 32);
 80031a0:	2120      	movs	r1, #32
 80031a2:	4876      	ldr	r0, [pc, #472]	; (800337c <main+0x37c>)
 80031a4:	f7fe fdac 	bl	8001d00 <NRF24_read>
					vx1 = myRxData[1];	// need to change
 80031a8:	4b74      	ldr	r3, [pc, #464]	; (800337c <main+0x37c>)
 80031aa:	785b      	ldrb	r3, [r3, #1]
 80031ac:	ee07 3a90 	vmov	s15, r3
 80031b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b4:	4b72      	ldr	r3, [pc, #456]	; (8003380 <main+0x380>)
 80031b6:	edc3 7a00 	vstr	s15, [r3]
					vy1 = myRxData[0];
 80031ba:	4b70      	ldr	r3, [pc, #448]	; (800337c <main+0x37c>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	4b6f      	ldr	r3, [pc, #444]	; (8003384 <main+0x384>)
 80031c8:	edc3 7a00 	vstr	s15, [r3]
					BTN = myRxData[7];
 80031cc:	4b6b      	ldr	r3, [pc, #428]	; (800337c <main+0x37c>)
 80031ce:	79da      	ldrb	r2, [r3, #7]
 80031d0:	4b6d      	ldr	r3, [pc, #436]	; (8003388 <main+0x388>)
 80031d2:	701a      	strb	r2, [r3, #0]
					omega1 = myRxData[3];
 80031d4:	4b69      	ldr	r3, [pc, #420]	; (800337c <main+0x37c>)
 80031d6:	78db      	ldrb	r3, [r3, #3]
 80031d8:	ee07 3a90 	vmov	s15, r3
 80031dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e0:	4b6a      	ldr	r3, [pc, #424]	; (800338c <main+0x38c>)
 80031e2:	edc3 7a00 	vstr	s15, [r3]
				}
			  if(vx1 != 0 && vy1 != 0 && omega1 != 0){
 80031e6:	4b66      	ldr	r3, [pc, #408]	; (8003380 <main+0x380>)
 80031e8:	edd3 7a00 	vldr	s15, [r3]
 80031ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031f4:	f000 80e9 	beq.w	80033ca <main+0x3ca>
 80031f8:	4b62      	ldr	r3, [pc, #392]	; (8003384 <main+0x384>)
 80031fa:	edd3 7a00 	vldr	s15, [r3]
 80031fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003206:	f000 80e0 	beq.w	80033ca <main+0x3ca>
 800320a:	4b60      	ldr	r3, [pc, #384]	; (800338c <main+0x38c>)
 800320c:	edd3 7a00 	vldr	s15, [r3]
 8003210:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003218:	f000 80d7 	beq.w	80033ca <main+0x3ca>
					vx = map(vx1, 0, 256, -1.0 * maxV, maxV);
 800321c:	4b58      	ldr	r3, [pc, #352]	; (8003380 <main+0x380>)
 800321e:	edd3 7a00 	vldr	s15, [r3]
 8003222:	ed9f 2a5b 	vldr	s4, [pc, #364]	; 8003390 <main+0x390>
 8003226:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8003394 <main+0x394>
 800322a:	ed9f 1a5b 	vldr	s2, [pc, #364]	; 8003398 <main+0x398>
 800322e:	eddf 0a5b 	vldr	s1, [pc, #364]	; 800339c <main+0x39c>
 8003232:	eeb0 0a67 	vmov.f32	s0, s15
 8003236:	f7ff fe9d 	bl	8002f74 <map>
 800323a:	eef0 7a40 	vmov.f32	s15, s0
 800323e:	4b58      	ldr	r3, [pc, #352]	; (80033a0 <main+0x3a0>)
 8003240:	edc3 7a00 	vstr	s15, [r3]
					vy = map(vy1, 0, 256, -1.0 * maxV, maxV);
 8003244:	4b4f      	ldr	r3, [pc, #316]	; (8003384 <main+0x384>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8003390 <main+0x390>
 800324e:	eddf 1a51 	vldr	s3, [pc, #324]	; 8003394 <main+0x394>
 8003252:	ed9f 1a51 	vldr	s2, [pc, #324]	; 8003398 <main+0x398>
 8003256:	eddf 0a51 	vldr	s1, [pc, #324]	; 800339c <main+0x39c>
 800325a:	eeb0 0a67 	vmov.f32	s0, s15
 800325e:	f7ff fe89 	bl	8002f74 <map>
 8003262:	eef0 7a40 	vmov.f32	s15, s0
 8003266:	4b4f      	ldr	r3, [pc, #316]	; (80033a4 <main+0x3a4>)
 8003268:	edc3 7a00 	vstr	s15, [r3]
					omega = map(omega1, 0, 256,  maxOmega, -1.0 * maxOmega);
 800326c:	4b47      	ldr	r3, [pc, #284]	; (800338c <main+0x38c>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	eeb9 2a0a 	vmov.f32	s4, #154	; 0xc0d00000 -6.5
 8003276:	eef1 1a0a 	vmov.f32	s3, #26	; 0x40d00000  6.5
 800327a:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8003398 <main+0x398>
 800327e:	eddf 0a47 	vldr	s1, [pc, #284]	; 800339c <main+0x39c>
 8003282:	eeb0 0a67 	vmov.f32	s0, s15
 8003286:	f7ff fe75 	bl	8002f74 <map>
 800328a:	eef0 7a40 	vmov.f32	s15, s0
 800328e:	4b46      	ldr	r3, [pc, #280]	; (80033a8 <main+0x3a8>)
 8003290:	edc3 7a00 	vstr	s15, [r3]
					//using button
					B_yi = BTN>>1&1;
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <main+0x388>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	4b42      	ldr	r3, [pc, #264]	; (80033ac <main+0x3ac>)
 80032a4:	701a      	strb	r2, [r3, #0]
					B_yo = BTN>>0&1;
 80032a6:	4b38      	ldr	r3, [pc, #224]	; (8003388 <main+0x388>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	b2da      	uxtb	r2, r3
 80032b0:	4b3f      	ldr	r3, [pc, #252]	; (80033b0 <main+0x3b0>)
 80032b2:	701a      	strb	r2, [r3, #0]
					B_xi = BTN>>4&1;
 80032b4:	4b34      	ldr	r3, [pc, #208]	; (8003388 <main+0x388>)
 80032b6:	781b      	ldrb	r3, [r3, #0]
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	b2da      	uxtb	r2, r3
 80032c2:	4b3c      	ldr	r3, [pc, #240]	; (80033b4 <main+0x3b4>)
 80032c4:	701a      	strb	r2, [r3, #0]
					B_xo = BTN>>6&1;
 80032c6:	4b30      	ldr	r3, [pc, #192]	; (8003388 <main+0x388>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	4b38      	ldr	r3, [pc, #224]	; (80033b8 <main+0x3b8>)
 80032d6:	701a      	strb	r2, [r3, #0]
					B_x_0 = BTN>>5&1;
 80032d8:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <main+0x388>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	095b      	lsrs	r3, r3, #5
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	4b35      	ldr	r3, [pc, #212]	; (80033bc <main+0x3bc>)
 80032e8:	701a      	strb	r2, [r3, #0]
					M_up = BTN>>2&1;
 80032ea:	4b27      	ldr	r3, [pc, #156]	; (8003388 <main+0x388>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	089b      	lsrs	r3, r3, #2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032fe:	4b30      	ldr	r3, [pc, #192]	; (80033c0 <main+0x3c0>)
 8003300:	edc3 7a00 	vstr	s15, [r3]
					M_down = BTN>>7&1;
 8003304:	4b20      	ldr	r3, [pc, #128]	; (8003388 <main+0x388>)
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	09db      	lsrs	r3, r3, #7
 800330a:	b2db      	uxtb	r3, r3
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	ee07 3a90 	vmov	s15, r3
 8003314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003318:	e054      	b.n	80033c4 <main+0x3c4>
 800331a:	bf00      	nop
 800331c:	200002dc 	.word	0x200002dc
 8003320:	3c23d70a 	.word	0x3c23d70a
 8003324:	447a0000 	.word	0x447a0000
 8003328:	c47a0000 	.word	0xc47a0000
 800332c:	40021000 	.word	0x40021000
 8003330:	40020400 	.word	0x40020400
 8003334:	200001b0 	.word	0x200001b0
 8003338:	453b8000 	.word	0x453b8000
 800333c:	457a0000 	.word	0x457a0000
 8003340:	ffffb1e0 	.word	0xffffb1e0
 8003344:	20000280 	.word	0x20000280
 8003348:	447a0000 	.word	0x447a0000
 800334c:	459c4000 	.word	0x459c4000
 8003350:	fffe7960 	.word	0xfffe7960
 8003354:	2000036c 	.word	0x2000036c
 8003358:	40020c00 	.word	0x40020c00
 800335c:	20000504 	.word	0x20000504
 8003360:	20000008 	.word	0x20000008
 8003364:	200004c4 	.word	0x200004c4
 8003368:	20000444 	.word	0x20000444
 800336c:	20000404 	.word	0x20000404
 8003370:	200003c4 	.word	0x200003c4
 8003374:	2000018a 	.word	0x2000018a
 8003378:	2000018c 	.word	0x2000018c
 800337c:	20000238 	.word	0x20000238
 8003380:	2000022c 	.word	0x2000022c
 8003384:	20000270 	.word	0x20000270
 8003388:	20000188 	.word	0x20000188
 800338c:	20000220 	.word	0x20000220
 8003390:	43fa0000 	.word	0x43fa0000
 8003394:	c3fa0000 	.word	0xc3fa0000
 8003398:	43800000 	.word	0x43800000
 800339c:	00000000 	.word	0x00000000
 80033a0:	20000244 	.word	0x20000244
 80033a4:	20000258 	.word	0x20000258
 80033a8:	2000027c 	.word	0x2000027c
 80033ac:	20000190 	.word	0x20000190
 80033b0:	20000191 	.word	0x20000191
 80033b4:	2000018d 	.word	0x2000018d
 80033b8:	2000018e 	.word	0x2000018e
 80033bc:	2000018f 	.word	0x2000018f
 80033c0:	20000218 	.word	0x20000218
 80033c4:	4b75      	ldr	r3, [pc, #468]	; (800359c <main+0x59c>)
 80033c6:	edc3 7a00 	vstr	s15, [r3]
			  }
		  }

	// stepper-----------------------------------------------------------
			  limit_under = HAL_GPIO_ReadPin(limit2_GPIO_Port, limit2_Pin);
 80033ca:	2102      	movs	r1, #2
 80033cc:	4874      	ldr	r0, [pc, #464]	; (80035a0 <main+0x5a0>)
 80033ce:	f002 f865 	bl	800549c <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4b73      	ldr	r3, [pc, #460]	; (80035a4 <main+0x5a4>)
 80033d8:	701a      	strb	r2, [r3, #0]
			  if(limit_under == 1 && homing_stepper_under == 0){
 80033da:	4b72      	ldr	r3, [pc, #456]	; (80035a4 <main+0x5a4>)
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d124      	bne.n	800342c <main+0x42c>
 80033e2:	4b71      	ldr	r3, [pc, #452]	; (80035a8 <main+0x5a8>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d120      	bne.n	800342c <main+0x42c>
				  stop(&stepper_under);
 80033ea:	4870      	ldr	r0, [pc, #448]	; (80035ac <main+0x5ac>)
 80033ec:	f7fe f9ea 	bl	80017c4 <stop>
				  stepper_under._speed = 0;
 80033f0:	4b6e      	ldr	r3, [pc, #440]	; (80035ac <main+0x5ac>)
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	619a      	str	r2, [r3, #24]
				  setCurrentPosition(&stepper_under, -100);
 80033f8:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80033fc:	486b      	ldr	r0, [pc, #428]	; (80035ac <main+0x5ac>)
 80033fe:	f7fd fe6a 	bl	80010d6 <setCurrentPosition>
				  stepper_under._targetPos = -100;
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <main+0x5ac>)
 8003404:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003408:	615a      	str	r2, [r3, #20]
				  moveTo(&stepper_under, 0);
 800340a:	2100      	movs	r1, #0
 800340c:	4867      	ldr	r0, [pc, #412]	; (80035ac <main+0x5ac>)
 800340e:	f7fd fdd3 	bl	8000fb8 <moveTo>
				  homing_stepper_under = 1;
 8003412:	4b65      	ldr	r3, [pc, #404]	; (80035a8 <main+0x5a8>)
 8003414:	2201      	movs	r2, #1
 8003416:	701a      	strb	r2, [r3, #0]
				  setAcceleration(&stepper_under, 5000);
 8003418:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80035b0 <main+0x5b0>
 800341c:	4863      	ldr	r0, [pc, #396]	; (80035ac <main+0x5ac>)
 800341e:	f7fe f877 	bl	8001510 <setAcceleration>
				  setMaxSpeed(&stepper_under, 10000);
 8003422:	ed9f 0a64 	vldr	s0, [pc, #400]	; 80035b4 <main+0x5b4>
 8003426:	4861      	ldr	r0, [pc, #388]	; (80035ac <main+0x5ac>)
 8003428:	f7fe f822 	bl	8001470 <setMaxSpeed>
			  }
			  if(homing_stepper_under ==1){
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <main+0x5a8>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d119      	bne.n	8003468 <main+0x468>
			      if(B_yi == 0 && B_yo == 1){
 8003434:	4b60      	ldr	r3, [pc, #384]	; (80035b8 <main+0x5b8>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d109      	bne.n	8003450 <main+0x450>
 800343c:	4b5f      	ldr	r3, [pc, #380]	; (80035bc <main+0x5bc>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d105      	bne.n	8003450 <main+0x450>
			  	    moveTo(&stepper_under, 12000);
 8003444:	f642 61e0 	movw	r1, #12000	; 0x2ee0
 8003448:	4858      	ldr	r0, [pc, #352]	; (80035ac <main+0x5ac>)
 800344a:	f7fd fdb5 	bl	8000fb8 <moveTo>
 800344e:	e00b      	b.n	8003468 <main+0x468>
			      }
			      else if (B_yi == 1 && B_yo == 0){
 8003450:	4b59      	ldr	r3, [pc, #356]	; (80035b8 <main+0x5b8>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d107      	bne.n	8003468 <main+0x468>
 8003458:	4b58      	ldr	r3, [pc, #352]	; (80035bc <main+0x5bc>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d103      	bne.n	8003468 <main+0x468>
			  	    moveTo(&stepper_under, 0);
 8003460:	2100      	movs	r1, #0
 8003462:	4852      	ldr	r0, [pc, #328]	; (80035ac <main+0x5ac>)
 8003464:	f7fd fda8 	bl	8000fb8 <moveTo>
			      }
			  }
			  if(distanceToGo(&stepper_under) != 0){
 8003468:	4850      	ldr	r0, [pc, #320]	; (80035ac <main+0x5ac>)
 800346a:	f7fd fe19 	bl	80010a0 <distanceToGo>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <main+0x47a>
			  	run(&stepper_under);
 8003474:	484d      	ldr	r0, [pc, #308]	; (80035ac <main+0x5ac>)
 8003476:	f7fd ff6b 	bl	8001350 <run>
			  }
	// stepper upper --------------------------------
		  limit_upper = HAL_GPIO_ReadPin(limit1_GPIO_Port, limit1_Pin);
 800347a:	2101      	movs	r1, #1
 800347c:	4848      	ldr	r0, [pc, #288]	; (80035a0 <main+0x5a0>)
 800347e:	f002 f80d 	bl	800549c <HAL_GPIO_ReadPin>
 8003482:	4603      	mov	r3, r0
 8003484:	461a      	mov	r2, r3
 8003486:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <main+0x5c0>)
 8003488:	701a      	strb	r2, [r3, #0]
		  if(limit_upper == 1 && homing_stepper_upper == 0){
 800348a:	4b4d      	ldr	r3, [pc, #308]	; (80035c0 <main+0x5c0>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d11e      	bne.n	80034d0 <main+0x4d0>
 8003492:	4b4c      	ldr	r3, [pc, #304]	; (80035c4 <main+0x5c4>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d11a      	bne.n	80034d0 <main+0x4d0>
			  stop(&stepper_upper);
 800349a:	484b      	ldr	r0, [pc, #300]	; (80035c8 <main+0x5c8>)
 800349c:	f7fe f992 	bl	80017c4 <stop>
			  stepper_upper._speed = 0;
 80034a0:	4b49      	ldr	r3, [pc, #292]	; (80035c8 <main+0x5c8>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
			  setCurrentPosition(&stepper_upper, 0);
 80034a8:	2100      	movs	r1, #0
 80034aa:	4847      	ldr	r0, [pc, #284]	; (80035c8 <main+0x5c8>)
 80034ac:	f7fd fe13 	bl	80010d6 <setCurrentPosition>
			  stepper_upper._targetPos = 0;
 80034b0:	4b45      	ldr	r3, [pc, #276]	; (80035c8 <main+0x5c8>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	615a      	str	r2, [r3, #20]
			  //moveTo(&stepper_upper, 0);
			  homing_stepper_upper = 1;
 80034b6:	4b43      	ldr	r3, [pc, #268]	; (80035c4 <main+0x5c4>)
 80034b8:	2201      	movs	r2, #1
 80034ba:	701a      	strb	r2, [r3, #0]
			  setAcceleration(&stepper_upper, 8000);
 80034bc:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80035cc <main+0x5cc>
 80034c0:	4841      	ldr	r0, [pc, #260]	; (80035c8 <main+0x5c8>)
 80034c2:	f7fe f825 	bl	8001510 <setAcceleration>
			  setMaxSpeed(&stepper_upper, 19000);
 80034c6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80035d0 <main+0x5d0>
 80034ca:	483f      	ldr	r0, [pc, #252]	; (80035c8 <main+0x5c8>)
 80034cc:	f7fd ffd0 	bl	8001470 <setMaxSpeed>
		  }
	      	  if(homing_stepper_upper ==1){
 80034d0:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <main+0x5c4>)
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d156      	bne.n	8003586 <main+0x586>
			  //moveTo(&stepper_upper, x);

			  	      if(B_xi == 0 && B_xo == 1 && B_x_0 == 0){
 80034d8:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <main+0x5d4>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10f      	bne.n	8003500 <main+0x500>
 80034e0:	4b3d      	ldr	r3, [pc, #244]	; (80035d8 <main+0x5d8>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d10b      	bne.n	8003500 <main+0x500>
 80034e8:	4b3c      	ldr	r3, [pc, #240]	; (80035dc <main+0x5dc>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d107      	bne.n	8003500 <main+0x500>
			  	  	    move(&stepper_upper, -50000);
 80034f0:	493b      	ldr	r1, [pc, #236]	; (80035e0 <main+0x5e0>)
 80034f2:	4835      	ldr	r0, [pc, #212]	; (80035c8 <main+0x5c8>)
 80034f4:	f7fd fd74 	bl	8000fe0 <move>
			  	  	    moveTo_mode = 0;
 80034f8:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <main+0x5e4>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
 80034fe:	e042      	b.n	8003586 <main+0x586>
			  	      }
			  	      else if (B_xi == 1 && B_xo == 0 && B_x_0 == 0){
 8003500:	4b34      	ldr	r3, [pc, #208]	; (80035d4 <main+0x5d4>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d110      	bne.n	800352a <main+0x52a>
 8003508:	4b33      	ldr	r3, [pc, #204]	; (80035d8 <main+0x5d8>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d10c      	bne.n	800352a <main+0x52a>
 8003510:	4b32      	ldr	r3, [pc, #200]	; (80035dc <main+0x5dc>)
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d108      	bne.n	800352a <main+0x52a>
			  	  	    move(&stepper_upper, 50000);
 8003518:	f24c 3150 	movw	r1, #50000	; 0xc350
 800351c:	482a      	ldr	r0, [pc, #168]	; (80035c8 <main+0x5c8>)
 800351e:	f7fd fd5f 	bl	8000fe0 <move>
			  	  	    moveTo_mode = 0;
 8003522:	4b30      	ldr	r3, [pc, #192]	; (80035e4 <main+0x5e4>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
 8003528:	e02d      	b.n	8003586 <main+0x586>
			  	      }
			  	      else if(B_xi == 0 && B_xo == 0 && B_x_0 == 1){
 800352a:	4b2a      	ldr	r3, [pc, #168]	; (80035d4 <main+0x5d4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d110      	bne.n	8003554 <main+0x554>
 8003532:	4b29      	ldr	r3, [pc, #164]	; (80035d8 <main+0x5d8>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d10c      	bne.n	8003554 <main+0x554>
 800353a:	4b28      	ldr	r3, [pc, #160]	; (80035dc <main+0x5dc>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d108      	bne.n	8003554 <main+0x554>
			  	    	  moveTo(&stepper_upper, 500);
 8003542:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003546:	4820      	ldr	r0, [pc, #128]	; (80035c8 <main+0x5c8>)
 8003548:	f7fd fd36 	bl	8000fb8 <moveTo>
			  	    	  moveTo_mode = 1;
 800354c:	4b25      	ldr	r3, [pc, #148]	; (80035e4 <main+0x5e4>)
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
 8003552:	e018      	b.n	8003586 <main+0x586>
			  	      }
			  	      else{
			  	    	  if(moveTo_mode == 0){
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <main+0x5e4>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d114      	bne.n	8003586 <main+0x586>
				  			  stop(&stepper_upper);
 800355c:	481a      	ldr	r0, [pc, #104]	; (80035c8 <main+0x5c8>)
 800355e:	f7fe f931 	bl	80017c4 <stop>
				  			  stepper_upper._speed = 0;
 8003562:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <main+0x5c8>)
 8003564:	f04f 0200 	mov.w	r2, #0
 8003568:	619a      	str	r2, [r3, #24]
				  			setCurrentPosition(&stepper_upper, currentPosition(&stepper_upper));
 800356a:	4817      	ldr	r0, [pc, #92]	; (80035c8 <main+0x5c8>)
 800356c:	f7fd fda7 	bl	80010be <currentPosition>
 8003570:	4603      	mov	r3, r0
 8003572:	4619      	mov	r1, r3
 8003574:	4814      	ldr	r0, [pc, #80]	; (80035c8 <main+0x5c8>)
 8003576:	f7fd fdae 	bl	80010d6 <setCurrentPosition>
				  			  stepper_upper._targetPos = currentPosition(&stepper_upper);
 800357a:	4813      	ldr	r0, [pc, #76]	; (80035c8 <main+0x5c8>)
 800357c:	f7fd fd9f 	bl	80010be <currentPosition>
 8003580:	4602      	mov	r2, r0
 8003582:	4b11      	ldr	r3, [pc, #68]	; (80035c8 <main+0x5c8>)
 8003584:	615a      	str	r2, [r3, #20]
			  	    	  }
			  	      }
		  }
		  if(distanceToGo(&stepper_upper) != 0){
 8003586:	4810      	ldr	r0, [pc, #64]	; (80035c8 <main+0x5c8>)
 8003588:	f7fd fd8a 	bl	80010a0 <distanceToGo>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f43f adf7 	beq.w	8003182 <main+0x182>
		  	run(&stepper_upper);
 8003594:	480c      	ldr	r0, [pc, #48]	; (80035c8 <main+0x5c8>)
 8003596:	f7fd fedb 	bl	8001350 <run>
		  if(homing_stepper_under == 1 && homing_stepper_upper == 1){
 800359a:	e5f2      	b.n	8003182 <main+0x182>
 800359c:	20000254 	.word	0x20000254
 80035a0:	40020c00 	.word	0x40020c00
 80035a4:	20000189 	.word	0x20000189
 80035a8:	2000018a 	.word	0x2000018a
 80035ac:	200001b0 	.word	0x200001b0
 80035b0:	459c4000 	.word	0x459c4000
 80035b4:	461c4000 	.word	0x461c4000
 80035b8:	20000190 	.word	0x20000190
 80035bc:	20000191 	.word	0x20000191
 80035c0:	2000018b 	.word	0x2000018b
 80035c4:	2000018c 	.word	0x2000018c
 80035c8:	20000280 	.word	0x20000280
 80035cc:	45fa0000 	.word	0x45fa0000
 80035d0:	46947000 	.word	0x46947000
 80035d4:	2000018d 	.word	0x2000018d
 80035d8:	2000018e 	.word	0x2000018e
 80035dc:	2000018f 	.word	0x2000018f
 80035e0:	ffff3cb0 	.word	0xffff3cb0
 80035e4:	20000192 	.word	0x20000192

080035e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b094      	sub	sp, #80	; 0x50
 80035ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035ee:	f107 0320 	add.w	r3, r7, #32
 80035f2:	2230      	movs	r2, #48	; 0x30
 80035f4:	2100      	movs	r1, #0
 80035f6:	4618      	mov	r0, r3
 80035f8:	f004 fd91 	bl	800811e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80035fc:	f107 030c 	add.w	r3, r7, #12
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
 8003610:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <SystemClock_Config+0xcc>)
 8003612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003614:	4a27      	ldr	r2, [pc, #156]	; (80036b4 <SystemClock_Config+0xcc>)
 8003616:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800361a:	6413      	str	r3, [r2, #64]	; 0x40
 800361c:	4b25      	ldr	r3, [pc, #148]	; (80036b4 <SystemClock_Config+0xcc>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003624:	60bb      	str	r3, [r7, #8]
 8003626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003628:	2300      	movs	r3, #0
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <SystemClock_Config+0xd0>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a21      	ldr	r2, [pc, #132]	; (80036b8 <SystemClock_Config+0xd0>)
 8003632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4b1f      	ldr	r3, [pc, #124]	; (80036b8 <SystemClock_Config+0xd0>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003644:	2302      	movs	r3, #2
 8003646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003648:	2301      	movs	r3, #1
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800364c:	2310      	movs	r3, #16
 800364e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003650:	2302      	movs	r3, #2
 8003652:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003654:	2300      	movs	r3, #0
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003658:	2308      	movs	r3, #8
 800365a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800365c:	23a8      	movs	r3, #168	; 0xa8
 800365e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003660:	2302      	movs	r3, #2
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003664:	2304      	movs	r3, #4
 8003666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003668:	f107 0320 	add.w	r3, r7, #32
 800366c:	4618      	mov	r0, r3
 800366e:	f001 ff5f 	bl	8005530 <HAL_RCC_OscConfig>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003678:	f000 fb3e 	bl	8003cf8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800367c:	230f      	movs	r3, #15
 800367e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003680:	2302      	movs	r3, #2
 8003682:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003684:	2300      	movs	r3, #0
 8003686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003688:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800368c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800368e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	2105      	movs	r1, #5
 800369a:	4618      	mov	r0, r3
 800369c:	f002 f9b8 	bl	8005a10 <HAL_RCC_ClockConfig>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036a6:	f000 fb27 	bl	8003cf8 <Error_Handler>
  }
}
 80036aa:	bf00      	nop
 80036ac:	3750      	adds	r7, #80	; 0x50
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	40007000 	.word	0x40007000

080036bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	4603      	mov	r3, r0
 80036c4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == M1_CHA_Pin||M1_CHB_Pin){//ENCODER Motor 1
 		  nowA[0] = HAL_GPIO_ReadPin(M1_CHA_GPIO_Port, M1_CHA_Pin);
 80036c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80036ca:	4833      	ldr	r0, [pc, #204]	; (8003798 <HAL_GPIO_EXTI_Callback+0xdc>)
 80036cc:	f001 fee6 	bl	800549c <HAL_GPIO_ReadPin>
 80036d0:	4603      	mov	r3, r0
 80036d2:	461a      	mov	r2, r3
 80036d4:	4b31      	ldr	r3, [pc, #196]	; (800379c <HAL_GPIO_EXTI_Callback+0xe0>)
 80036d6:	701a      	strb	r2, [r3, #0]
 		  nowB[0] = HAL_GPIO_ReadPin(M1_CHB_GPIO_Port, M1_CHB_Pin);
 80036d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036dc:	482e      	ldr	r0, [pc, #184]	; (8003798 <HAL_GPIO_EXTI_Callback+0xdc>)
 80036de:	f001 fedd 	bl	800549c <HAL_GPIO_ReadPin>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_GPIO_EXTI_Callback+0xe4>)
 80036e8:	701a      	strb	r2, [r3, #0]
 		  Enc_count[0] = encoder(0);
 80036ea:	2000      	movs	r0, #0
 80036ec:	f000 fd3a 	bl	8004164 <encoder>
 80036f0:	4603      	mov	r3, r0
 80036f2:	461a      	mov	r2, r3
 80036f4:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 80036f6:	801a      	strh	r2, [r3, #0]
 	}
	if(GPIO_Pin == M2_CHA_Pin||M2_CHB_Pin){//ENCODER Motor 1
 		  nowA[1] = HAL_GPIO_ReadPin(M2_CHA_GPIO_Port, M2_CHA_Pin);
 80036f8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036fc:	4826      	ldr	r0, [pc, #152]	; (8003798 <HAL_GPIO_EXTI_Callback+0xdc>)
 80036fe:	f001 fecd 	bl	800549c <HAL_GPIO_ReadPin>
 8003702:	4603      	mov	r3, r0
 8003704:	461a      	mov	r2, r3
 8003706:	4b25      	ldr	r3, [pc, #148]	; (800379c <HAL_GPIO_EXTI_Callback+0xe0>)
 8003708:	705a      	strb	r2, [r3, #1]
 		  nowB[1] = HAL_GPIO_ReadPin(M2_CHB_GPIO_Port, M2_CHB_Pin);
 800370a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800370e:	4822      	ldr	r0, [pc, #136]	; (8003798 <HAL_GPIO_EXTI_Callback+0xdc>)
 8003710:	f001 fec4 	bl	800549c <HAL_GPIO_ReadPin>
 8003714:	4603      	mov	r3, r0
 8003716:	461a      	mov	r2, r3
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800371a:	705a      	strb	r2, [r3, #1]
 		  Enc_count[1] = encoder(1);
 800371c:	2001      	movs	r0, #1
 800371e:	f000 fd21 	bl	8004164 <encoder>
 8003722:	4603      	mov	r3, r0
 8003724:	461a      	mov	r2, r3
 8003726:	4b1f      	ldr	r3, [pc, #124]	; (80037a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 8003728:	805a      	strh	r2, [r3, #2]
 	}
	if(GPIO_Pin == M3_CHA_Pin||M3_CHB_Pin){//ENCODER Motor 1
 		  nowA[2] = HAL_GPIO_ReadPin(M3_CHA_GPIO_Port, M3_CHA_Pin);
 800372a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800372e:	481e      	ldr	r0, [pc, #120]	; (80037a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8003730:	f001 feb4 	bl	800549c <HAL_GPIO_ReadPin>
 8003734:	4603      	mov	r3, r0
 8003736:	461a      	mov	r2, r3
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_GPIO_EXTI_Callback+0xe0>)
 800373a:	709a      	strb	r2, [r3, #2]
 		  nowB[2] = HAL_GPIO_ReadPin(M3_CHB_GPIO_Port, M3_CHB_Pin);
 800373c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003740:	4819      	ldr	r0, [pc, #100]	; (80037a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8003742:	f001 feab 	bl	800549c <HAL_GPIO_ReadPin>
 8003746:	4603      	mov	r3, r0
 8003748:	461a      	mov	r2, r3
 800374a:	4b15      	ldr	r3, [pc, #84]	; (80037a0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800374c:	709a      	strb	r2, [r3, #2]
 		  Enc_count[2] = encoder(2);
 800374e:	2002      	movs	r0, #2
 8003750:	f000 fd08 	bl	8004164 <encoder>
 8003754:	4603      	mov	r3, r0
 8003756:	461a      	mov	r2, r3
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800375a:	809a      	strh	r2, [r3, #4]
 	}
	if(GPIO_Pin == M4_CHA_Pin||M4_CHB_Pin){//ENCODER Motor 1
 		  nowA[3] = HAL_GPIO_ReadPin(M4_CHA_GPIO_Port, M4_CHA_Pin);
 800375c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003760:	4811      	ldr	r0, [pc, #68]	; (80037a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8003762:	f001 fe9b 	bl	800549c <HAL_GPIO_ReadPin>
 8003766:	4603      	mov	r3, r0
 8003768:	461a      	mov	r2, r3
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <HAL_GPIO_EXTI_Callback+0xe0>)
 800376c:	70da      	strb	r2, [r3, #3]
 		  nowB[3] = HAL_GPIO_ReadPin(M4_CHB_GPIO_Port, M4_CHB_Pin);
 800376e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003772:	480d      	ldr	r0, [pc, #52]	; (80037a8 <HAL_GPIO_EXTI_Callback+0xec>)
 8003774:	f001 fe92 	bl	800549c <HAL_GPIO_ReadPin>
 8003778:	4603      	mov	r3, r0
 800377a:	461a      	mov	r2, r3
 800377c:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800377e:	70da      	strb	r2, [r3, #3]
 		  Enc_count[3] = encoder(3);
 8003780:	2003      	movs	r0, #3
 8003782:	f000 fcef 	bl	8004164 <encoder>
 8003786:	4603      	mov	r3, r0
 8003788:	461a      	mov	r2, r3
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_GPIO_EXTI_Callback+0xe8>)
 800378c:	80da      	strh	r2, [r3, #6]
 	}
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40020c00 	.word	0x40020c00
 800379c:	2000026c 	.word	0x2000026c
 80037a0:	20000248 	.word	0x20000248
 80037a4:	20000230 	.word	0x20000230
 80037a8:	40020400 	.word	0x40020400

080037ac <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	b085      	sub	sp, #20
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
	if (htim->Instance == TIM2){
	}
	  if (htim->Instance == TIM7) {
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4acc      	ldr	r2, [pc, #816]	; (8003aec <HAL_TIM_PeriodElapsedCallback+0x340>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	f040 8286 	bne.w	8003cce <HAL_TIM_PeriodElapsedCallback+0x522>
		  //HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		  if ((M_down == 1 && M_up == 0) || (M_down == 0 && M_up == 1)){
 80037c2:	4bcb      	ldr	r3, [pc, #812]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80037cc:	eef4 7a47 	vcmp.f32	s15, s14
 80037d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d4:	d107      	bne.n	80037e6 <HAL_TIM_PeriodElapsedCallback+0x3a>
 80037d6:	4bc7      	ldr	r3, [pc, #796]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80037d8:	edd3 7a00 	vldr	s15, [r3]
 80037dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e4:	d011      	beq.n	800380a <HAL_TIM_PeriodElapsedCallback+0x5e>
 80037e6:	4bc2      	ldr	r3, [pc, #776]	; (8003af0 <HAL_TIM_PeriodElapsedCallback+0x344>)
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f4:	d11f      	bne.n	8003836 <HAL_TIM_PeriodElapsedCallback+0x8a>
 80037f6:	4bbf      	ldr	r3, [pc, #764]	; (8003af4 <HAL_TIM_PeriodElapsedCallback+0x348>)
 80037f8:	edd3 7a00 	vldr	s15, [r3]
 80037fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003800:	eef4 7a47 	vcmp.f32	s15, s14
 8003804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003808:	d115      	bne.n	8003836 <HAL_TIM_PeriodElapsedCallback+0x8a>
			  if(pwm_cnt <= pwm_M){
 800380a:	4bbb      	ldr	r3, [pc, #748]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 800380c:	ed93 7a00 	vldr	s14, [r3]
 8003810:	4bba      	ldr	r3, [pc, #744]	; (8003afc <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003812:	edd3 7a00 	vldr	s15, [r3]
 8003816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800381a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800381e:	d80e      	bhi.n	800383e <HAL_TIM_PeriodElapsedCallback+0x92>
				  pwm_cnt+=100;
 8003820:	4bb5      	ldr	r3, [pc, #724]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003822:	edd3 7a00 	vldr	s15, [r3]
 8003826:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003b00 <HAL_TIM_PeriodElapsedCallback+0x354>
 800382a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800382e:	4bb2      	ldr	r3, [pc, #712]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003830:	edc3 7a00 	vstr	s15, [r3]
			  if(pwm_cnt <= pwm_M){
 8003834:	e003      	b.n	800383e <HAL_TIM_PeriodElapsedCallback+0x92>
			  }
		  }
		  else {
			  pwm_cnt = 0;
 8003836:	4bb0      	ldr	r3, [pc, #704]	; (8003af8 <HAL_TIM_PeriodElapsedCallback+0x34c>)
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	601a      	str	r2, [r3, #0]
		  }

		  //wheel
		  V1 = wheel1(vx, vy, omega);
 800383e:	4bb1      	ldr	r3, [pc, #708]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	4bb0      	ldr	r3, [pc, #704]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003846:	ed93 7a00 	vldr	s14, [r3]
 800384a:	4bb0      	ldr	r3, [pc, #704]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 800384c:	edd3 6a00 	vldr	s13, [r3]
 8003850:	eeb0 1a66 	vmov.f32	s2, s13
 8003854:	eef0 0a47 	vmov.f32	s1, s14
 8003858:	eeb0 0a67 	vmov.f32	s0, s15
 800385c:	f000 fb20 	bl	8003ea0 <wheel1>
 8003860:	eef0 7a40 	vmov.f32	s15, s0
 8003864:	4baa      	ldr	r3, [pc, #680]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003866:	edc3 7a00 	vstr	s15, [r3]
		  V2 = wheel2(vx, vy, omega);
 800386a:	4ba6      	ldr	r3, [pc, #664]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x358>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	4ba5      	ldr	r3, [pc, #660]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 8003872:	ed93 7a00 	vldr	s14, [r3]
 8003876:	4ba5      	ldr	r3, [pc, #660]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003878:	edd3 6a00 	vldr	s13, [r3]
 800387c:	eeb0 1a66 	vmov.f32	s2, s13
 8003880:	eef0 0a47 	vmov.f32	s1, s14
 8003884:	eeb0 0a67 	vmov.f32	s0, s15
 8003888:	f000 fa3e 	bl	8003d08 <wheel2>
 800388c:	eef0 7a40 	vmov.f32	s15, s0
 8003890:	4ba0      	ldr	r3, [pc, #640]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003892:	edc3 7a00 	vstr	s15, [r3]
		  V3 = wheel3(vx, vy, omega);
 8003896:	4b9b      	ldr	r3, [pc, #620]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003898:	edd3 7a00 	vldr	s15, [r3]
 800389c:	4b9a      	ldr	r3, [pc, #616]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 800389e:	ed93 7a00 	vldr	s14, [r3]
 80038a2:	4b9a      	ldr	r3, [pc, #616]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 80038a4:	edd3 6a00 	vldr	s13, [r3]
 80038a8:	eeb0 1a66 	vmov.f32	s2, s13
 80038ac:	eef0 0a47 	vmov.f32	s1, s14
 80038b0:	eeb0 0a67 	vmov.f32	s0, s15
 80038b4:	f000 fa6c 	bl	8003d90 <wheel3>
 80038b8:	eef0 7a40 	vmov.f32	s15, s0
 80038bc:	4b96      	ldr	r3, [pc, #600]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 80038be:	edc3 7a00 	vstr	s15, [r3]
		  V4 = wheel4(vx, vy, omega);
 80038c2:	4b90      	ldr	r3, [pc, #576]	; (8003b04 <HAL_TIM_PeriodElapsedCallback+0x358>)
 80038c4:	edd3 7a00 	vldr	s15, [r3]
 80038c8:	4b8f      	ldr	r3, [pc, #572]	; (8003b08 <HAL_TIM_PeriodElapsedCallback+0x35c>)
 80038ca:	ed93 7a00 	vldr	s14, [r3]
 80038ce:	4b8f      	ldr	r3, [pc, #572]	; (8003b0c <HAL_TIM_PeriodElapsedCallback+0x360>)
 80038d0:	edd3 6a00 	vldr	s13, [r3]
 80038d4:	eeb0 1a66 	vmov.f32	s2, s13
 80038d8:	eef0 0a47 	vmov.f32	s1, s14
 80038dc:	eeb0 0a67 	vmov.f32	s0, s15
 80038e0:	f000 fa9a 	bl	8003e18 <wheel4>
 80038e4:	eef0 7a40 	vmov.f32	s15, s0
 80038e8:	4b8c      	ldr	r3, [pc, #560]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x370>)
 80038ea:	edc3 7a00 	vstr	s15, [r3]
		  // PID
		  pwm_M1 = PID(&MPID, V1, Motor1_speed,MKp,MKi,MKd,Motor1);
 80038ee:	4b88      	ldr	r3, [pc, #544]	; (8003b10 <HAL_TIM_PeriodElapsedCallback+0x364>)
 80038f0:	edd3 7a00 	vldr	s15, [r3]
 80038f4:	4b8a      	ldr	r3, [pc, #552]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80038f6:	ed93 7a00 	vldr	s14, [r3]
 80038fa:	2100      	movs	r1, #0
 80038fc:	ed9f 2a89 	vldr	s4, [pc, #548]	; 8003b24 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003900:	eddf 1a89 	vldr	s3, [pc, #548]	; 8003b28 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8003904:	ed9f 1a89 	vldr	s2, [pc, #548]	; 8003b2c <HAL_TIM_PeriodElapsedCallback+0x380>
 8003908:	eef0 0a47 	vmov.f32	s1, s14
 800390c:	eeb0 0a67 	vmov.f32	s0, s15
 8003910:	4887      	ldr	r0, [pc, #540]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003912:	f7ff f8e0 	bl	8002ad6 <PID>
 8003916:	eef0 7a40 	vmov.f32	s15, s0
 800391a:	4b86      	ldr	r3, [pc, #536]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800391c:	edc3 7a00 	vstr	s15, [r3]
		  pwm_M2 = PID(&MPID, V2, Motor2_speed,MKp,MKi,MKd,Motor2);
 8003920:	4b7c      	ldr	r3, [pc, #496]	; (8003b14 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003922:	edd3 7a00 	vldr	s15, [r3]
 8003926:	4b84      	ldr	r3, [pc, #528]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8003928:	ed93 7a00 	vldr	s14, [r3]
 800392c:	2101      	movs	r1, #1
 800392e:	ed9f 2a7d 	vldr	s4, [pc, #500]	; 8003b24 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003932:	eddf 1a7d 	vldr	s3, [pc, #500]	; 8003b28 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8003936:	ed9f 1a7d 	vldr	s2, [pc, #500]	; 8003b2c <HAL_TIM_PeriodElapsedCallback+0x380>
 800393a:	eef0 0a47 	vmov.f32	s1, s14
 800393e:	eeb0 0a67 	vmov.f32	s0, s15
 8003942:	487b      	ldr	r0, [pc, #492]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003944:	f7ff f8c7 	bl	8002ad6 <PID>
 8003948:	eef0 7a40 	vmov.f32	s15, s0
 800394c:	4b7b      	ldr	r3, [pc, #492]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x390>)
 800394e:	edc3 7a00 	vstr	s15, [r3]
		  pwm_M3 = PID(&MPID, V3, Motor3_speed,MKp,MKi,MKd,Motor3);
 8003952:	4b71      	ldr	r3, [pc, #452]	; (8003b18 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003954:	edd3 7a00 	vldr	s15, [r3]
 8003958:	4b79      	ldr	r3, [pc, #484]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x394>)
 800395a:	ed93 7a00 	vldr	s14, [r3]
 800395e:	2102      	movs	r1, #2
 8003960:	ed9f 2a70 	vldr	s4, [pc, #448]	; 8003b24 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003964:	eddf 1a70 	vldr	s3, [pc, #448]	; 8003b28 <HAL_TIM_PeriodElapsedCallback+0x37c>
 8003968:	ed9f 1a70 	vldr	s2, [pc, #448]	; 8003b2c <HAL_TIM_PeriodElapsedCallback+0x380>
 800396c:	eef0 0a47 	vmov.f32	s1, s14
 8003970:	eeb0 0a67 	vmov.f32	s0, s15
 8003974:	486e      	ldr	r0, [pc, #440]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8003976:	f7ff f8ae 	bl	8002ad6 <PID>
 800397a:	eef0 7a40 	vmov.f32	s15, s0
 800397e:	4b71      	ldr	r3, [pc, #452]	; (8003b44 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8003980:	edc3 7a00 	vstr	s15, [r3]
		  pwm_M4 = PID(&MPID, V4, Motor4_speed,MKp,MKi,MKd,Motor4);
 8003984:	4b65      	ldr	r3, [pc, #404]	; (8003b1c <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	4b6f      	ldr	r3, [pc, #444]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800398c:	ed93 7a00 	vldr	s14, [r3]
 8003990:	2103      	movs	r1, #3
 8003992:	ed9f 2a64 	vldr	s4, [pc, #400]	; 8003b24 <HAL_TIM_PeriodElapsedCallback+0x378>
 8003996:	eddf 1a64 	vldr	s3, [pc, #400]	; 8003b28 <HAL_TIM_PeriodElapsedCallback+0x37c>
 800399a:	ed9f 1a64 	vldr	s2, [pc, #400]	; 8003b2c <HAL_TIM_PeriodElapsedCallback+0x380>
 800399e:	eef0 0a47 	vmov.f32	s1, s14
 80039a2:	eeb0 0a67 	vmov.f32	s0, s15
 80039a6:	4862      	ldr	r0, [pc, #392]	; (8003b30 <HAL_TIM_PeriodElapsedCallback+0x384>)
 80039a8:	f7ff f895 	bl	8002ad6 <PID>
 80039ac:	eef0 7a40 	vmov.f32	s15, s0
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 80039b2:	edc3 7a00 	vstr	s15, [r3]
		  // feedback speed
		  Motor1_speed = Motors_RPS(Motor1, 10, 912);
 80039b6:	eddf 0a66 	vldr	s1, [pc, #408]	; 8003b50 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80039ba:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80039be:	2000      	movs	r0, #0
 80039c0:	f000 fab2 	bl	8003f28 <Motors_RPS>
 80039c4:	eef0 7a40 	vmov.f32	s15, s0
 80039c8:	4b55      	ldr	r3, [pc, #340]	; (8003b20 <HAL_TIM_PeriodElapsedCallback+0x374>)
 80039ca:	edc3 7a00 	vstr	s15, [r3]
		  Motor2_speed = Motors_RPS(Motor2, 10, 912);
 80039ce:	eddf 0a60 	vldr	s1, [pc, #384]	; 8003b50 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80039d2:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80039d6:	2001      	movs	r0, #1
 80039d8:	f000 faa6 	bl	8003f28 <Motors_RPS>
 80039dc:	eef0 7a40 	vmov.f32	s15, s0
 80039e0:	4b55      	ldr	r3, [pc, #340]	; (8003b38 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80039e2:	edc3 7a00 	vstr	s15, [r3]
		  Motor3_speed = Motors_RPS(Motor3, 10, 912);
 80039e6:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8003b50 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 80039ea:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80039ee:	2002      	movs	r0, #2
 80039f0:	f000 fa9a 	bl	8003f28 <Motors_RPS>
 80039f4:	eef0 7a40 	vmov.f32	s15, s0
 80039f8:	4b51      	ldr	r3, [pc, #324]	; (8003b40 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80039fa:	edc3 7a00 	vstr	s15, [r3]
		  Motor4_speed = Motors_RPS(Motor4, 10, 912);
 80039fe:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003b50 <HAL_TIM_PeriodElapsedCallback+0x3a4>
 8003a02:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003a06:	2003      	movs	r0, #3
 8003a08:	f000 fa8e 	bl	8003f28 <Motors_RPS>
 8003a0c:	eef0 7a40 	vmov.f32	s15, s0
 8003a10:	4b4d      	ldr	r3, [pc, #308]	; (8003b48 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8003a12:	edc3 7a00 	vstr	s15, [r3]

// pwm ---------------------------------------------------------------------------------
		  if(pwm_M1 > 0){
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a18:	edd3 7a00 	vldr	s15, [r3]
 8003a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a24:	dd0c      	ble.n	8003a40 <HAL_TIM_PeriodElapsedCallback+0x294>
			  TIM1->CCR1 = 0;
 8003a26:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a28:	2200      	movs	r2, #0
 8003a2a:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = pwm_M1;
 8003a2c:	4b41      	ldr	r3, [pc, #260]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a2e:	edd3 7a00 	vldr	s15, [r3]
 8003a32:	4b48      	ldr	r3, [pc, #288]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a38:	ee17 2a90 	vmov	r2, s15
 8003a3c:	639a      	str	r2, [r3, #56]	; 0x38
 8003a3e:	e023      	b.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x2dc>
		  }
		  else if(pwm_M1 < 0){
 8003a40:	4b3c      	ldr	r3, [pc, #240]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4e:	d515      	bpl.n	8003a7c <HAL_TIM_PeriodElapsedCallback+0x2d0>
			  TIM1->CCR1 = -1.0*pwm_M1;
 8003a50:	4b38      	ldr	r3, [pc, #224]	; (8003b34 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fc fd77 	bl	8000548 <__aeabi_f2d>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	603a      	str	r2, [r7, #0]
 8003a60:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	4e3b      	ldr	r6, [pc, #236]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a6c:	f7fd f89c 	bl	8000ba8 <__aeabi_d2uiz>
 8003a70:	4603      	mov	r3, r0
 8003a72:	6373      	str	r3, [r6, #52]	; 0x34
			  TIM1->CCR2 = 0;
 8003a74:	4b37      	ldr	r3, [pc, #220]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
 8003a7a:	e005      	b.n	8003a88 <HAL_TIM_PeriodElapsedCallback+0x2dc>
		  }
		  else {
			  TIM1->CCR1 = 0;
 8003a7c:	4b35      	ldr	r3, [pc, #212]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM1->CCR2 = 0;
 8003a82:	4b34      	ldr	r3, [pc, #208]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	639a      	str	r2, [r3, #56]	; 0x38
		  }
		  // motor 2
		  if(pwm_M2 > 0){
 8003a88:	4b2c      	ldr	r3, [pc, #176]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a96:	dd0c      	ble.n	8003ab2 <HAL_TIM_PeriodElapsedCallback+0x306>
			  TIM1->CCR3 = 0;
 8003a98:	4b2e      	ldr	r3, [pc, #184]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR4 = pwm_M2;
 8003a9e:	4b27      	ldr	r3, [pc, #156]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003aa0:	edd3 7a00 	vldr	s15, [r3]
 8003aa4:	4b2b      	ldr	r3, [pc, #172]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003aa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aaa:	ee17 2a90 	vmov	r2, s15
 8003aae:	641a      	str	r2, [r3, #64]	; 0x40
 8003ab0:	e058      	b.n	8003b64 <HAL_TIM_PeriodElapsedCallback+0x3b8>
		  }
		  else if(pwm_M2 < 0){
 8003ab2:	4b22      	ldr	r3, [pc, #136]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ac0:	d54a      	bpl.n	8003b58 <HAL_TIM_PeriodElapsedCallback+0x3ac>
			  TIM1->CCR3 = -1.0*pwm_M2;
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	; (8003b3c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fd3e 	bl	8000548 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4692      	mov	sl, r2
 8003ad2:	f083 4b00 	eor.w	fp, r3, #2147483648	; 0x80000000
 8003ad6:	4e1f      	ldr	r6, [pc, #124]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003ad8:	4650      	mov	r0, sl
 8003ada:	4659      	mov	r1, fp
 8003adc:	f7fd f864 	bl	8000ba8 <__aeabi_d2uiz>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	63f3      	str	r3, [r6, #60]	; 0x3c
			  TIM1->CCR4 = 0;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	641a      	str	r2, [r3, #64]	; 0x40
 8003aea:	e03b      	b.n	8003b64 <HAL_TIM_PeriodElapsedCallback+0x3b8>
 8003aec:	40001400 	.word	0x40001400
 8003af0:	20000254 	.word	0x20000254
 8003af4:	20000218 	.word	0x20000218
 8003af8:	20000184 	.word	0x20000184
 8003afc:	20000000 	.word	0x20000000
 8003b00:	42c80000 	.word	0x42c80000
 8003b04:	20000244 	.word	0x20000244
 8003b08:	20000258 	.word	0x20000258
 8003b0c:	2000027c 	.word	0x2000027c
 8003b10:	20000164 	.word	0x20000164
 8003b14:	20000168 	.word	0x20000168
 8003b18:	2000016c 	.word	0x2000016c
 8003b1c:	20000170 	.word	0x20000170
 8003b20:	20000154 	.word	0x20000154
 8003b24:	00000000 	.word	0x00000000
 8003b28:	43087ae1 	.word	0x43087ae1
 8003b2c:	40fd70a4 	.word	0x40fd70a4
 8003b30:	200002dc 	.word	0x200002dc
 8003b34:	20000174 	.word	0x20000174
 8003b38:	20000158 	.word	0x20000158
 8003b3c:	20000178 	.word	0x20000178
 8003b40:	2000015c 	.word	0x2000015c
 8003b44:	2000017c 	.word	0x2000017c
 8003b48:	20000160 	.word	0x20000160
 8003b4c:	20000180 	.word	0x20000180
 8003b50:	44640000 	.word	0x44640000
 8003b54:	40010000 	.word	0x40010000
		  }
		  else {
			  TIM1->CCR3 = 0;
 8003b58:	4b5f      	ldr	r3, [pc, #380]	; (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM1->CCR4 = 0;
 8003b5e:	4b5e      	ldr	r3, [pc, #376]	; (8003cd8 <HAL_TIM_PeriodElapsedCallback+0x52c>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	641a      	str	r2, [r3, #64]	; 0x40
		  }
		  // motor 3
		  if(pwm_M3 > 0){
 8003b64:	4b5d      	ldr	r3, [pc, #372]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b72:	dd0c      	ble.n	8003b8e <HAL_TIM_PeriodElapsedCallback+0x3e2>
			  TIM3->CCR1 = pwm_M3;
 8003b74:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	4b59      	ldr	r3, [pc, #356]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003b7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b80:	ee17 2a90 	vmov	r2, s15
 8003b84:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM3->CCR2 = 0;
 8003b86:	4b56      	ldr	r3, [pc, #344]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
 8003b8c:	e022      	b.n	8003bd4 <HAL_TIM_PeriodElapsedCallback+0x428>
		  }
		  else if(pwm_M3 < 0){
 8003b8e:	4b53      	ldr	r3, [pc, #332]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003b90:	edd3 7a00 	vldr	s15, [r3]
 8003b94:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b9c:	d514      	bpl.n	8003bc8 <HAL_TIM_PeriodElapsedCallback+0x41c>
			  TIM3->CCR1 = 0;
 8003b9e:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM3->CCR2 = -1.0*pwm_M3;
 8003ba4:	4b4d      	ldr	r3, [pc, #308]	; (8003cdc <HAL_TIM_PeriodElapsedCallback+0x530>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fc fccd 	bl	8000548 <__aeabi_f2d>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	4690      	mov	r8, r2
 8003bb4:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8003bb8:	4e49      	ldr	r6, [pc, #292]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003bba:	4640      	mov	r0, r8
 8003bbc:	4649      	mov	r1, r9
 8003bbe:	f7fc fff3 	bl	8000ba8 <__aeabi_d2uiz>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	63b3      	str	r3, [r6, #56]	; 0x38
 8003bc6:	e005      	b.n	8003bd4 <HAL_TIM_PeriodElapsedCallback+0x428>
		  }
		  else {
			  TIM3->CCR1 = 0;
 8003bc8:	4b45      	ldr	r3, [pc, #276]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM3->CCR2 = 0;
 8003bce:	4b44      	ldr	r3, [pc, #272]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
		  }
		  // motor 4
		  if(pwm_M4 > 0){
 8003bd4:	4b43      	ldr	r3, [pc, #268]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003bd6:	edd3 7a00 	vldr	s15, [r3]
 8003bda:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	dd0c      	ble.n	8003bfe <HAL_TIM_PeriodElapsedCallback+0x452>
			  TIM3->CCR3 = pwm_M4;
 8003be4:	4b3f      	ldr	r3, [pc, #252]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003be6:	edd3 7a00 	vldr	s15, [r3]
 8003bea:	4b3d      	ldr	r3, [pc, #244]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bf0:	ee17 2a90 	vmov	r2, s15
 8003bf4:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM3->CCR4 = 0;
 8003bf6:	4b3a      	ldr	r3, [pc, #232]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
 8003bfc:	e022      	b.n	8003c44 <HAL_TIM_PeriodElapsedCallback+0x498>
		  }
		  else if(pwm_M4 < 0){
 8003bfe:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003c08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c0c:	d514      	bpl.n	8003c38 <HAL_TIM_PeriodElapsedCallback+0x48c>
			  TIM3->CCR3 = 0;
 8003c0e:	4b34      	ldr	r3, [pc, #208]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM3->CCR4 = -1.0*pwm_M4;
 8003c14:	4b33      	ldr	r3, [pc, #204]	; (8003ce4 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fc fc95 	bl	8000548 <__aeabi_f2d>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4614      	mov	r4, r2
 8003c24:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8003c28:	4e2d      	ldr	r6, [pc, #180]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	f7fc ffbb 	bl	8000ba8 <__aeabi_d2uiz>
 8003c32:	4603      	mov	r3, r0
 8003c34:	6433      	str	r3, [r6, #64]	; 0x40
 8003c36:	e005      	b.n	8003c44 <HAL_TIM_PeriodElapsedCallback+0x498>
		  }
		  else {
			  TIM3->CCR3 = 0;
 8003c38:	4b29      	ldr	r3, [pc, #164]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	63da      	str	r2, [r3, #60]	; 0x3c
			  TIM3->CCR4 = 0;
 8003c3e:	4b28      	ldr	r3, [pc, #160]	; (8003ce0 <HAL_TIM_PeriodElapsedCallback+0x534>)
 8003c40:	2200      	movs	r2, #0
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
		  }

// up and down motor -----------------------------------------------
 		  if(M_down == 1 && M_up == 0){
 8003c44:	4b28      	ldr	r3, [pc, #160]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c4e:	eef4 7a47 	vcmp.f32	s15, s14
 8003c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c56:	d114      	bne.n	8003c82 <HAL_TIM_PeriodElapsedCallback+0x4d6>
 8003c58:	4b24      	ldr	r3, [pc, #144]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x540>)
 8003c5a:	edd3 7a00 	vldr	s15, [r3]
 8003c5e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c66:	d10c      	bne.n	8003c82 <HAL_TIM_PeriodElapsedCallback+0x4d6>
 			  TIM4->CCR1 = pwm_cnt;
 8003c68:	4b21      	ldr	r3, [pc, #132]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	4b21      	ldr	r3, [pc, #132]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003c70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c74:	ee17 2a90 	vmov	r2, s15
 8003c78:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = 0;
 8003c7a:	4b1e      	ldr	r3, [pc, #120]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8003c80:	e025      	b.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x522>
		  }
		  else if(M_down == 0 && M_up == 1){
 8003c82:	4b19      	ldr	r3, [pc, #100]	; (8003ce8 <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8003c84:	edd3 7a00 	vldr	s15, [r3]
 8003c88:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c90:	d116      	bne.n	8003cc0 <HAL_TIM_PeriodElapsedCallback+0x514>
 8003c92:	4b16      	ldr	r3, [pc, #88]	; (8003cec <HAL_TIM_PeriodElapsedCallback+0x540>)
 8003c94:	edd3 7a00 	vldr	s15, [r3]
 8003c98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003c9c:	eef4 7a47 	vcmp.f32	s15, s14
 8003ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_TIM_PeriodElapsedCallback+0x514>
			  TIM4->CCR1 = 0;
 8003ca6:	4b13      	ldr	r3, [pc, #76]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = pwm_cnt;
 8003cac:	4b10      	ldr	r3, [pc, #64]	; (8003cf0 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8003cae:	edd3 7a00 	vldr	s15, [r3]
 8003cb2:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003cb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb8:	ee17 2a90 	vmov	r2, s15
 8003cbc:	639a      	str	r2, [r3, #56]	; 0x38
 8003cbe:	e006      	b.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x522>
		  }
		  else {
			  TIM4->CCR1 = 0;
 8003cc0:	4b0c      	ldr	r3, [pc, #48]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	635a      	str	r2, [r3, #52]	; 0x34
			  TIM4->CCR2 = 0;
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
		  }
	  }
}
 8003ccc:	e7ff      	b.n	8003cce <HAL_TIM_PeriodElapsedCallback+0x522>
 8003cce:	bf00      	nop
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	2000017c 	.word	0x2000017c
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	20000180 	.word	0x20000180
 8003ce8:	20000254 	.word	0x20000254
 8003cec:	20000218 	.word	0x20000218
 8003cf0:	20000184 	.word	0x20000184
 8003cf4:	40000800 	.word	0x40000800

08003cf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <wheel2>:

#include "omni_wheel.h"
#include "tim.h"

float wheel2(float vx, float vy, float omega){
 8003d08:	b5b0      	push	{r4, r5, r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d12:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d16:	ed87 1a01 	vstr	s2, [r7, #4]
	return -1.0 * (0.7071/wheel_r)*(vx + vy - 2.0 * wheel_D * omega);
 8003d1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d26:	ee17 0a90 	vmov	r0, s15
 8003d2a:	f7fc fc0d 	bl	8000548 <__aeabi_f2d>
 8003d2e:	4604      	mov	r4, r0
 8003d30:	460d      	mov	r5, r1
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f7fc fc08 	bl	8000548 <__aeabi_f2d>
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	4b12      	ldr	r3, [pc, #72]	; (8003d88 <wheel2+0x80>)
 8003d3e:	f7fc fc5b 	bl	80005f8 <__aeabi_dmul>
 8003d42:	4602      	mov	r2, r0
 8003d44:	460b      	mov	r3, r1
 8003d46:	4620      	mov	r0, r4
 8003d48:	4629      	mov	r1, r5
 8003d4a:	f7fc fa9d 	bl	8000288 <__aeabi_dsub>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	460c      	mov	r4, r1
 8003d52:	4618      	mov	r0, r3
 8003d54:	4621      	mov	r1, r4
 8003d56:	a30a      	add	r3, pc, #40	; (adr r3, 8003d80 <wheel2+0x78>)
 8003d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d5c:	f7fc fc4c 	bl	80005f8 <__aeabi_dmul>
 8003d60:	4603      	mov	r3, r0
 8003d62:	460c      	mov	r4, r1
 8003d64:	4618      	mov	r0, r3
 8003d66:	4621      	mov	r1, r4
 8003d68:	f7fc ff3e 	bl	8000be8 <__aeabi_d2f>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	ee07 3a90 	vmov	s15, r3
}
 8003d72:	eeb0 0a67 	vmov.f32	s0, s15
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003d7c:	f3af 8000 	nop.w
 8003d80:	dfd61995 	.word	0xdfd61995
 8003d84:	bfbdaccd 	.word	0xbfbdaccd
 8003d88:	404a0000 	.word	0x404a0000
 8003d8c:	00000000 	.word	0x00000000

08003d90 <wheel3>:

float wheel3(float vx, float vy, float omega){
 8003d90:	b5b0      	push	{r4, r5, r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d9a:	edc7 0a02 	vstr	s1, [r7, #8]
 8003d9e:	ed87 1a01 	vstr	s2, [r7, #4]
	return -1.0 * (0.7071/wheel_r)*(vx - vy -2.0 * wheel_D * omega);
 8003da2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003da6:	edd7 7a02 	vldr	s15, [r7, #8]
 8003daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dae:	ee17 0a90 	vmov	r0, s15
 8003db2:	f7fc fbc9 	bl	8000548 <__aeabi_f2d>
 8003db6:	4604      	mov	r4, r0
 8003db8:	460d      	mov	r5, r1
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f7fc fbc4 	bl	8000548 <__aeabi_f2d>
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	4b12      	ldr	r3, [pc, #72]	; (8003e10 <wheel3+0x80>)
 8003dc6:	f7fc fc17 	bl	80005f8 <__aeabi_dmul>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4620      	mov	r0, r4
 8003dd0:	4629      	mov	r1, r5
 8003dd2:	f7fc fa59 	bl	8000288 <__aeabi_dsub>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	460c      	mov	r4, r1
 8003dda:	4618      	mov	r0, r3
 8003ddc:	4621      	mov	r1, r4
 8003dde:	a30a      	add	r3, pc, #40	; (adr r3, 8003e08 <wheel3+0x78>)
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f7fc fc08 	bl	80005f8 <__aeabi_dmul>
 8003de8:	4603      	mov	r3, r0
 8003dea:	460c      	mov	r4, r1
 8003dec:	4618      	mov	r0, r3
 8003dee:	4621      	mov	r1, r4
 8003df0:	f7fc fefa 	bl	8000be8 <__aeabi_d2f>
 8003df4:	4603      	mov	r3, r0
 8003df6:	ee07 3a90 	vmov	s15, r3
}
 8003dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bdb0      	pop	{r4, r5, r7, pc}
 8003e04:	f3af 8000 	nop.w
 8003e08:	dfd61995 	.word	0xdfd61995
 8003e0c:	bfbdaccd 	.word	0xbfbdaccd
 8003e10:	404a0000 	.word	0x404a0000
 8003e14:	00000000 	.word	0x00000000

08003e18 <wheel4>:

float wheel4(float vx, float vy, float omega){
 8003e18:	b5b0      	push	{r4, r5, r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003e22:	edc7 0a02 	vstr	s1, [r7, #8]
 8003e26:	ed87 1a01 	vstr	s2, [r7, #4]
	return -1.0 * (0.7071/wheel_r)*(-vx - vy -2.0 * wheel_D * omega);
 8003e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e2e:	eeb1 7a67 	vneg.f32	s14, s15
 8003e32:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e3a:	ee17 0a90 	vmov	r0, s15
 8003e3e:	f7fc fb83 	bl	8000548 <__aeabi_f2d>
 8003e42:	4604      	mov	r4, r0
 8003e44:	460d      	mov	r5, r1
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7fc fb7e 	bl	8000548 <__aeabi_f2d>
 8003e4c:	f04f 0200 	mov.w	r2, #0
 8003e50:	4b11      	ldr	r3, [pc, #68]	; (8003e98 <wheel4+0x80>)
 8003e52:	f7fc fbd1 	bl	80005f8 <__aeabi_dmul>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	f7fc fa13 	bl	8000288 <__aeabi_dsub>
 8003e62:	4603      	mov	r3, r0
 8003e64:	460c      	mov	r4, r1
 8003e66:	4618      	mov	r0, r3
 8003e68:	4621      	mov	r1, r4
 8003e6a:	a309      	add	r3, pc, #36	; (adr r3, 8003e90 <wheel4+0x78>)
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f7fc fbc2 	bl	80005f8 <__aeabi_dmul>
 8003e74:	4603      	mov	r3, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	4621      	mov	r1, r4
 8003e7c:	f7fc feb4 	bl	8000be8 <__aeabi_d2f>
 8003e80:	4603      	mov	r3, r0
 8003e82:	ee07 3a90 	vmov	s15, r3
}
 8003e86:	eeb0 0a67 	vmov.f32	s0, s15
 8003e8a:	3710      	adds	r7, #16
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e90:	dfd61995 	.word	0xdfd61995
 8003e94:	bfbdaccd 	.word	0xbfbdaccd
 8003e98:	404a0000 	.word	0x404a0000
 8003e9c:	00000000 	.word	0x00000000

08003ea0 <wheel1>:

float wheel1(float vx, float vy, float omega){
 8003ea0:	b5b0      	push	{r4, r5, r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	ed87 0a03 	vstr	s0, [r7, #12]
 8003eaa:	edc7 0a02 	vstr	s1, [r7, #8]
 8003eae:	ed87 1a01 	vstr	s2, [r7, #4]
	return -1.0 * (0.7071/wheel_r)*(-vx + vy - 2.0 * wheel_D * omega);
 8003eb2:	ed97 7a02 	vldr	s14, [r7, #8]
 8003eb6:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ebe:	ee17 0a90 	vmov	r0, s15
 8003ec2:	f7fc fb41 	bl	8000548 <__aeabi_f2d>
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	460d      	mov	r5, r1
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc fb3c 	bl	8000548 <__aeabi_f2d>
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <wheel1+0x80>)
 8003ed6:	f7fc fb8f 	bl	80005f8 <__aeabi_dmul>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4620      	mov	r0, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	f7fc f9d1 	bl	8000288 <__aeabi_dsub>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460c      	mov	r4, r1
 8003eea:	4618      	mov	r0, r3
 8003eec:	4621      	mov	r1, r4
 8003eee:	a30a      	add	r3, pc, #40	; (adr r3, 8003f18 <wheel1+0x78>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc fb80 	bl	80005f8 <__aeabi_dmul>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	460c      	mov	r4, r1
 8003efc:	4618      	mov	r0, r3
 8003efe:	4621      	mov	r1, r4
 8003f00:	f7fc fe72 	bl	8000be8 <__aeabi_d2f>
 8003f04:	4603      	mov	r3, r0
 8003f06:	ee07 3a90 	vmov	s15, r3
}
 8003f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f0e:	3710      	adds	r7, #16
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bdb0      	pop	{r4, r5, r7, pc}
 8003f14:	f3af 8000 	nop.w
 8003f18:	dfd61995 	.word	0xdfd61995
 8003f1c:	bfbdaccd 	.word	0xbfbdaccd
 8003f20:	404a0000 	.word	0x404a0000
 8003f24:	00000000 	.word	0x00000000

08003f28 <Motors_RPS>:

float Motors_RPS(int j, float SampleTime, float N_round){
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f34:	edc7 0a01 	vstr	s1, [r7, #4]
	new_count[Motor1] = Enc_count[0];
 8003f38:	4b81      	ldr	r3, [pc, #516]	; (8004140 <Motors_RPS+0x218>)
 8003f3a:	881a      	ldrh	r2, [r3, #0]
 8003f3c:	4b81      	ldr	r3, [pc, #516]	; (8004144 <Motors_RPS+0x21c>)
 8003f3e:	801a      	strh	r2, [r3, #0]
	new_count[Motor2] = Enc_count[1];
 8003f40:	4b7f      	ldr	r3, [pc, #508]	; (8004140 <Motors_RPS+0x218>)
 8003f42:	885a      	ldrh	r2, [r3, #2]
 8003f44:	4b7f      	ldr	r3, [pc, #508]	; (8004144 <Motors_RPS+0x21c>)
 8003f46:	805a      	strh	r2, [r3, #2]
	new_count[Motor3] = Enc_count[2];
 8003f48:	4b7d      	ldr	r3, [pc, #500]	; (8004140 <Motors_RPS+0x218>)
 8003f4a:	889a      	ldrh	r2, [r3, #4]
 8003f4c:	4b7d      	ldr	r3, [pc, #500]	; (8004144 <Motors_RPS+0x21c>)
 8003f4e:	809a      	strh	r2, [r3, #4]
	new_count[Motor4] = Enc_count[3];
 8003f50:	4b7b      	ldr	r3, [pc, #492]	; (8004140 <Motors_RPS+0x218>)
 8003f52:	88da      	ldrh	r2, [r3, #6]
 8003f54:	4b7b      	ldr	r3, [pc, #492]	; (8004144 <Motors_RPS+0x21c>)
 8003f56:	80da      	strh	r2, [r3, #6]
	count_state[Motor1] =! dir[0];
 8003f58:	4b7b      	ldr	r3, [pc, #492]	; (8004148 <Motors_RPS+0x220>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b78      	ldr	r3, [pc, #480]	; (800414c <Motors_RPS+0x224>)
 8003f6a:	701a      	strb	r2, [r3, #0]
	count_state[Motor2] =! dir[1];
 8003f6c:	4b76      	ldr	r3, [pc, #472]	; (8004148 <Motors_RPS+0x220>)
 8003f6e:	785b      	ldrb	r3, [r3, #1]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	4b73      	ldr	r3, [pc, #460]	; (800414c <Motors_RPS+0x224>)
 8003f7e:	705a      	strb	r2, [r3, #1]
	count_state[Motor3] =! dir[2];
 8003f80:	4b71      	ldr	r3, [pc, #452]	; (8004148 <Motors_RPS+0x220>)
 8003f82:	789b      	ldrb	r3, [r3, #2]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	bf0c      	ite	eq
 8003f88:	2301      	moveq	r3, #1
 8003f8a:	2300      	movne	r3, #0
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4b6e      	ldr	r3, [pc, #440]	; (800414c <Motors_RPS+0x224>)
 8003f92:	709a      	strb	r2, [r3, #2]
	count_state[Motor4] =! dir[3];
 8003f94:	4b6c      	ldr	r3, [pc, #432]	; (8004148 <Motors_RPS+0x220>)
 8003f96:	78db      	ldrb	r3, [r3, #3]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	bf0c      	ite	eq
 8003f9c:	2301      	moveq	r3, #1
 8003f9e:	2300      	movne	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4b69      	ldr	r3, [pc, #420]	; (800414c <Motors_RPS+0x224>)
 8003fa6:	70da      	strb	r2, [r3, #3]

	if(count_state[j]){
 8003fa8:	4a68      	ldr	r2, [pc, #416]	; (800414c <Motors_RPS+0x224>)
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	4413      	add	r3, r2
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d050      	beq.n	8004056 <Motors_RPS+0x12e>
		if(new_count[j] <= count[j]){ // Check for counter underflow
 8003fb4:	4a63      	ldr	r2, [pc, #396]	; (8004144 <Motors_RPS+0x21c>)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003fbc:	4964      	ldr	r1, [pc, #400]	; (8004150 <Motors_RPS+0x228>)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d80e      	bhi.n	8003fe6 <Motors_RPS+0xbe>
			diff[j] = count[j] - new_count[j];
 8003fc8:	4a61      	ldr	r2, [pc, #388]	; (8004150 <Motors_RPS+0x228>)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003fd0:	495c      	ldr	r1, [pc, #368]	; (8004144 <Motors_RPS+0x21c>)
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	b299      	uxth	r1, r3
 8003fdc:	4a5d      	ldr	r2, [pc, #372]	; (8004154 <Motors_RPS+0x22c>)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8003fe4:	e00d      	b.n	8004002 <Motors_RPS+0xda>
		}else{
			diff[j] = (65536 - new_count[j]) + count[j];
 8003fe6:	4a5a      	ldr	r2, [pc, #360]	; (8004150 <Motors_RPS+0x228>)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003fee:	4955      	ldr	r1, [pc, #340]	; (8004144 <Motors_RPS+0x21c>)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	b299      	uxth	r1, r3
 8003ffa:	4a56      	ldr	r2, [pc, #344]	; (8004154 <Motors_RPS+0x22c>)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
			speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime) * -1.0;
 8004002:	4a54      	ldr	r2, [pc, #336]	; (8004154 <Motors_RPS+0x22c>)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8004158 <Motors_RPS+0x230>
 8004016:	ee27 7a87 	vmul.f32	s14, s15, s14
 800401a:	edd7 6a01 	vldr	s13, [r7, #4]
 800401e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004026:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800402a:	ee16 0a90 	vmov	r0, s13
 800402e:	f7fc fa8b 	bl	8000548 <__aeabi_f2d>
 8004032:	4603      	mov	r3, r0
 8004034:	460c      	mov	r4, r1
 8004036:	4618      	mov	r0, r3
 8004038:	4621      	mov	r1, r4
 800403a:	f7fc fdd5 	bl	8000be8 <__aeabi_d2f>
 800403e:	4603      	mov	r3, r0
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef1 7a67 	vneg.f32	s15, s15
 8004048:	4a44      	ldr	r2, [pc, #272]	; (800415c <Motors_RPS+0x234>)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	edc3 7a00 	vstr	s15, [r3]
 8004054:	e040      	b.n	80040d8 <Motors_RPS+0x1b0>
	}
	else{
		if(new_count[j] >= count[j]){// Check for counter overflow
 8004056:	4a3b      	ldr	r2, [pc, #236]	; (8004144 <Motors_RPS+0x21c>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800405e:	493c      	ldr	r1, [pc, #240]	; (8004150 <Motors_RPS+0x228>)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004066:	429a      	cmp	r2, r3
 8004068:	d30e      	bcc.n	8004088 <Motors_RPS+0x160>
			diff[j] = new_count[j] - count[j];
 800406a:	4a36      	ldr	r2, [pc, #216]	; (8004144 <Motors_RPS+0x21c>)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004072:	4937      	ldr	r1, [pc, #220]	; (8004150 <Motors_RPS+0x228>)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	b299      	uxth	r1, r3
 800407e:	4a35      	ldr	r2, [pc, #212]	; (8004154 <Motors_RPS+0x22c>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004086:	e00d      	b.n	80040a4 <Motors_RPS+0x17c>
		}else{
			diff[j] = (65536 - count[j]) + new_count[j];
 8004088:	4a2e      	ldr	r2, [pc, #184]	; (8004144 <Motors_RPS+0x21c>)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8004090:	492f      	ldr	r1, [pc, #188]	; (8004150 <Motors_RPS+0x228>)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	b299      	uxth	r1, r3
 800409c:	4a2d      	ldr	r2, [pc, #180]	; (8004154 <Motors_RPS+0x22c>)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		}
		speedM[j] = (float)diff[j] * 1000.0f / (N_round * SampleTime);
 80040a4:	4a2b      	ldr	r2, [pc, #172]	; (8004154 <Motors_RPS+0x22c>)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040ac:	ee07 3a90 	vmov	s15, r3
 80040b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8004158 <Motors_RPS+0x230>
 80040b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80040bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80040c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80040c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80040c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040cc:	4a23      	ldr	r2, [pc, #140]	; (800415c <Motors_RPS+0x234>)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	edc3 7a00 	vstr	s15, [r3]
	}

	rdps[j] = 2.0f * pi *speedM[j];
 80040d8:	4a20      	ldr	r2, [pc, #128]	; (800415c <Motors_RPS+0x234>)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	009b      	lsls	r3, r3, #2
 80040de:	4413      	add	r3, r2
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7fc fa30 	bl	8000548 <__aeabi_f2d>
 80040e8:	a313      	add	r3, pc, #76	; (adr r3, 8004138 <Motors_RPS+0x210>)
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f7fc fa83 	bl	80005f8 <__aeabi_dmul>
 80040f2:	4603      	mov	r3, r0
 80040f4:	460c      	mov	r4, r1
 80040f6:	4618      	mov	r0, r3
 80040f8:	4621      	mov	r1, r4
 80040fa:	f7fc fd75 	bl	8000be8 <__aeabi_d2f>
 80040fe:	4601      	mov	r1, r0
 8004100:	4a17      	ldr	r2, [pc, #92]	; (8004160 <Motors_RPS+0x238>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	4413      	add	r3, r2
 8004108:	6019      	str	r1, [r3, #0]
	count[j] = new_count[j];
 800410a:	4a0e      	ldr	r2, [pc, #56]	; (8004144 <Motors_RPS+0x21c>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004112:	4a0f      	ldr	r2, [pc, #60]	; (8004150 <Motors_RPS+0x228>)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

	return rdps[j];
 800411a:	4a11      	ldr	r2, [pc, #68]	; (8004160 <Motors_RPS+0x238>)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	ee07 3a90 	vmov	s15, r3
}
 8004128:	eeb0 0a67 	vmov.f32	s0, s15
 800412c:	3714      	adds	r7, #20
 800412e:	46bd      	mov	sp, r7
 8004130:	bd90      	pop	{r4, r7, pc}
 8004132:	bf00      	nop
 8004134:	f3af 8000 	nop.w
 8004138:	c083126f 	.word	0xc083126f
 800413c:	401921ca 	.word	0x401921ca
 8004140:	20000230 	.word	0x20000230
 8004144:	2000024c 	.word	0x2000024c
 8004148:	20000260 	.word	0x20000260
 800414c:	2000021c 	.word	0x2000021c
 8004150:	20000264 	.word	0x20000264
 8004154:	20000274 	.word	0x20000274
 8004158:	447a0000 	.word	0x447a0000
 800415c:	20000208 	.word	0x20000208
 8004160:	200001a0 	.word	0x200001a0

08004164 <encoder>:

uint16_t encoder(int i){
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	if(nowA[i] != lastA[i]){
 800416c:	4a68      	ldr	r2, [pc, #416]	; (8004310 <encoder+0x1ac>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	781a      	ldrb	r2, [r3, #0]
 8004174:	4967      	ldr	r1, [pc, #412]	; (8004314 <encoder+0x1b0>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	440b      	add	r3, r1
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	429a      	cmp	r2, r3
 800417e:	d059      	beq.n	8004234 <encoder+0xd0>
		lastA[i] = nowA[i];
 8004180:	4a63      	ldr	r2, [pc, #396]	; (8004310 <encoder+0x1ac>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	7819      	ldrb	r1, [r3, #0]
 8004188:	4a62      	ldr	r2, [pc, #392]	; (8004314 <encoder+0x1b0>)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4413      	add	r3, r2
 800418e:	460a      	mov	r2, r1
 8004190:	701a      	strb	r2, [r3, #0]
		if(lastA[i] == 0){
 8004192:	4a60      	ldr	r2, [pc, #384]	; (8004314 <encoder+0x1b0>)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	4413      	add	r3, r2
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d125      	bne.n	80041ea <encoder+0x86>
			if(nowB[i] == 0){
 800419e:	4a5e      	ldr	r2, [pc, #376]	; (8004318 <encoder+0x1b4>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <encoder+0x66>
				dir[i] = 0;
 80041aa:	4a5c      	ldr	r2, [pc, #368]	; (800431c <encoder+0x1b8>)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80041b4:	4a5a      	ldr	r2, [pc, #360]	; (8004320 <encoder+0x1bc>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041bc:	3b01      	subs	r3, #1
 80041be:	b299      	uxth	r1, r3
 80041c0:	4a57      	ldr	r2, [pc, #348]	; (8004320 <encoder+0x1bc>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80041c8:	e034      	b.n	8004234 <encoder+0xd0>
			}else{
				dir[i] = 1;
 80041ca:	4a54      	ldr	r2, [pc, #336]	; (800431c <encoder+0x1b8>)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	2201      	movs	r2, #1
 80041d2:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 80041d4:	4a52      	ldr	r2, [pc, #328]	; (8004320 <encoder+0x1bc>)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041dc:	3301      	adds	r3, #1
 80041de:	b299      	uxth	r1, r3
 80041e0:	4a4f      	ldr	r2, [pc, #316]	; (8004320 <encoder+0x1bc>)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80041e8:	e024      	b.n	8004234 <encoder+0xd0>
			}
		}else{
			if(nowB[i] == 1){
 80041ea:	4a4b      	ldr	r2, [pc, #300]	; (8004318 <encoder+0x1b4>)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d10f      	bne.n	8004216 <encoder+0xb2>
				dir[i] = 0;
 80041f6:	4a49      	ldr	r2, [pc, #292]	; (800431c <encoder+0x1b8>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4413      	add	r3, r2
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 8004200:	4a47      	ldr	r2, [pc, #284]	; (8004320 <encoder+0x1bc>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004208:	3b01      	subs	r3, #1
 800420a:	b299      	uxth	r1, r3
 800420c:	4a44      	ldr	r2, [pc, #272]	; (8004320 <encoder+0x1bc>)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004214:	e00e      	b.n	8004234 <encoder+0xd0>
			}else{
				dir[i] = 1;
 8004216:	4a41      	ldr	r2, [pc, #260]	; (800431c <encoder+0x1b8>)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4413      	add	r3, r2
 800421c:	2201      	movs	r2, #1
 800421e:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 8004220:	4a3f      	ldr	r2, [pc, #252]	; (8004320 <encoder+0x1bc>)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004228:	3301      	adds	r3, #1
 800422a:	b299      	uxth	r1, r3
 800422c:	4a3c      	ldr	r2, [pc, #240]	; (8004320 <encoder+0x1bc>)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	if(nowB[i] != lastB[i]){
 8004234:	4a38      	ldr	r2, [pc, #224]	; (8004318 <encoder+0x1b4>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4413      	add	r3, r2
 800423a:	781a      	ldrb	r2, [r3, #0]
 800423c:	4939      	ldr	r1, [pc, #228]	; (8004324 <encoder+0x1c0>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	440b      	add	r3, r1
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	429a      	cmp	r2, r3
 8004246:	d059      	beq.n	80042fc <encoder+0x198>
		lastB[i] = nowB[i];
 8004248:	4a33      	ldr	r2, [pc, #204]	; (8004318 <encoder+0x1b4>)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4413      	add	r3, r2
 800424e:	7819      	ldrb	r1, [r3, #0]
 8004250:	4a34      	ldr	r2, [pc, #208]	; (8004324 <encoder+0x1c0>)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4413      	add	r3, r2
 8004256:	460a      	mov	r2, r1
 8004258:	701a      	strb	r2, [r3, #0]
		if(lastB[i] == 0){
 800425a:	4a32      	ldr	r2, [pc, #200]	; (8004324 <encoder+0x1c0>)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d125      	bne.n	80042b2 <encoder+0x14e>
			if(nowA[i] == 1){
 8004266:	4a2a      	ldr	r2, [pc, #168]	; (8004310 <encoder+0x1ac>)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	4413      	add	r3, r2
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10f      	bne.n	8004292 <encoder+0x12e>
				dir[i] = 0;
 8004272:	4a2a      	ldr	r2, [pc, #168]	; (800431c <encoder+0x1b8>)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4413      	add	r3, r2
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <encoder+0x1bc>)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004284:	3b01      	subs	r3, #1
 8004286:	b299      	uxth	r1, r3
 8004288:	4a25      	ldr	r2, [pc, #148]	; (8004320 <encoder+0x1bc>)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8004290:	e034      	b.n	80042fc <encoder+0x198>
			}else{
				dir[i] = 1;
 8004292:	4a22      	ldr	r2, [pc, #136]	; (800431c <encoder+0x1b8>)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4413      	add	r3, r2
 8004298:	2201      	movs	r2, #1
 800429a:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 800429c:	4a20      	ldr	r2, [pc, #128]	; (8004320 <encoder+0x1bc>)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042a4:	3301      	adds	r3, #1
 80042a6:	b299      	uxth	r1, r3
 80042a8:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <encoder+0x1bc>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80042b0:	e024      	b.n	80042fc <encoder+0x198>
			}
		}else{
			if(nowA[i] == 0){
 80042b2:	4a17      	ldr	r2, [pc, #92]	; (8004310 <encoder+0x1ac>)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10f      	bne.n	80042de <encoder+0x17a>
				dir[i] = 0;
 80042be:	4a17      	ldr	r2, [pc, #92]	; (800431c <encoder+0x1b8>)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4413      	add	r3, r2
 80042c4:	2200      	movs	r2, #0
 80042c6:	701a      	strb	r2, [r3, #0]
				cnt[i]--;
 80042c8:	4a15      	ldr	r2, [pc, #84]	; (8004320 <encoder+0x1bc>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b299      	uxth	r1, r3
 80042d4:	4a12      	ldr	r2, [pc, #72]	; (8004320 <encoder+0x1bc>)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80042dc:	e00e      	b.n	80042fc <encoder+0x198>
			}else{
				dir[i] = 1;
 80042de:	4a0f      	ldr	r2, [pc, #60]	; (800431c <encoder+0x1b8>)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4413      	add	r3, r2
 80042e4:	2201      	movs	r2, #1
 80042e6:	701a      	strb	r2, [r3, #0]
				cnt[i]++;
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <encoder+0x1bc>)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80042f0:	3301      	adds	r3, #1
 80042f2:	b299      	uxth	r1, r3
 80042f4:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <encoder+0x1bc>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
	}
	return cnt[i];
 80042fc:	4a08      	ldr	r2, [pc, #32]	; (8004320 <encoder+0x1bc>)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
}
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr
 8004310:	2000026c 	.word	0x2000026c
 8004314:	2000025c 	.word	0x2000025c
 8004318:	20000248 	.word	0x20000248
 800431c:	20000260 	.word	0x20000260
 8004320:	20000224 	.word	0x20000224
 8004324:	200002d8 	.word	0x200002d8

08004328 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800432c:	4b17      	ldr	r3, [pc, #92]	; (800438c <MX_SPI1_Init+0x64>)
 800432e:	4a18      	ldr	r2, [pc, #96]	; (8004390 <MX_SPI1_Init+0x68>)
 8004330:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004332:	4b16      	ldr	r3, [pc, #88]	; (800438c <MX_SPI1_Init+0x64>)
 8004334:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004338:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <MX_SPI1_Init+0x64>)
 800433c:	2200      	movs	r2, #0
 800433e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004340:	4b12      	ldr	r3, [pc, #72]	; (800438c <MX_SPI1_Init+0x64>)
 8004342:	2200      	movs	r2, #0
 8004344:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004346:	4b11      	ldr	r3, [pc, #68]	; (800438c <MX_SPI1_Init+0x64>)
 8004348:	2200      	movs	r2, #0
 800434a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <MX_SPI1_Init+0x64>)
 800434e:	2200      	movs	r2, #0
 8004350:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004352:	4b0e      	ldr	r3, [pc, #56]	; (800438c <MX_SPI1_Init+0x64>)
 8004354:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004358:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800435a:	4b0c      	ldr	r3, [pc, #48]	; (800438c <MX_SPI1_Init+0x64>)
 800435c:	2220      	movs	r2, #32
 800435e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <MX_SPI1_Init+0x64>)
 8004362:	2200      	movs	r2, #0
 8004364:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <MX_SPI1_Init+0x64>)
 8004368:	2200      	movs	r2, #0
 800436a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <MX_SPI1_Init+0x64>)
 800436e:	2200      	movs	r2, #0
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <MX_SPI1_Init+0x64>)
 8004374:	220a      	movs	r2, #10
 8004376:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004378:	4804      	ldr	r0, [pc, #16]	; (800438c <MX_SPI1_Init+0x64>)
 800437a:	f001 fd39 	bl	8005df0 <HAL_SPI_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004384:	f7ff fcb8 	bl	8003cf8 <Error_Handler>
  }

}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	2000036c 	.word	0x2000036c
 8004390:	40013000 	.word	0x40013000

08004394 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800439c:	f107 0314 	add.w	r3, r7, #20
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]
 80043a4:	605a      	str	r2, [r3, #4]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	60da      	str	r2, [r3, #12]
 80043aa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <HAL_SPI_MspInit+0x84>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d12b      	bne.n	800440e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80043b6:	2300      	movs	r3, #0
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_SPI_MspInit+0x88>)
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	4a17      	ldr	r2, [pc, #92]	; (800441c <HAL_SPI_MspInit+0x88>)
 80043c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043c4:	6453      	str	r3, [r2, #68]	; 0x44
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <HAL_SPI_MspInit+0x88>)
 80043c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ce:	613b      	str	r3, [r7, #16]
 80043d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	4b11      	ldr	r3, [pc, #68]	; (800441c <HAL_SPI_MspInit+0x88>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	4a10      	ldr	r2, [pc, #64]	; (800441c <HAL_SPI_MspInit+0x88>)
 80043dc:	f043 0302 	orr.w	r3, r3, #2
 80043e0:	6313      	str	r3, [r2, #48]	; 0x30
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <HAL_SPI_MspInit+0x88>)
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	f003 0302 	and.w	r3, r3, #2
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80043ee:	2338      	movs	r3, #56	; 0x38
 80043f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043f2:	2302      	movs	r3, #2
 80043f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043fa:	2303      	movs	r3, #3
 80043fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80043fe:	2305      	movs	r3, #5
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004402:	f107 0314 	add.w	r3, r7, #20
 8004406:	4619      	mov	r1, r3
 8004408:	4805      	ldr	r0, [pc, #20]	; (8004420 <HAL_SPI_MspInit+0x8c>)
 800440a:	f000 fead 	bl	8005168 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800440e:	bf00      	nop
 8004410:	3728      	adds	r7, #40	; 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	40013000 	.word	0x40013000
 800441c:	40023800 	.word	0x40023800
 8004420:	40020400 	.word	0x40020400

08004424 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800442a:	2300      	movs	r3, #0
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	4b10      	ldr	r3, [pc, #64]	; (8004470 <HAL_MspInit+0x4c>)
 8004430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004432:	4a0f      	ldr	r2, [pc, #60]	; (8004470 <HAL_MspInit+0x4c>)
 8004434:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004438:	6453      	str	r3, [r2, #68]	; 0x44
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <HAL_MspInit+0x4c>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004442:	607b      	str	r3, [r7, #4]
 8004444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004446:	2300      	movs	r3, #0
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4b09      	ldr	r3, [pc, #36]	; (8004470 <HAL_MspInit+0x4c>)
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <HAL_MspInit+0x4c>)
 8004450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004454:	6413      	str	r3, [r2, #64]	; 0x40
 8004456:	4b06      	ldr	r3, [pc, #24]	; (8004470 <HAL_MspInit+0x4c>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	40023800 	.word	0x40023800

08004474 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004474:	b480      	push	{r7}
 8004476:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr

08004482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004482:	b480      	push	{r7}
 8004484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004486:	e7fe      	b.n	8004486 <HardFault_Handler+0x4>

08004488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800448c:	e7fe      	b.n	800448c <MemManage_Handler+0x4>

0800448e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800448e:	b480      	push	{r7}
 8004490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004492:	e7fe      	b.n	8004492 <BusFault_Handler+0x4>

08004494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004494:	b480      	push	{r7}
 8004496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004498:	e7fe      	b.n	8004498 <UsageFault_Handler+0x4>

0800449a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800449a:	b480      	push	{r7}
 800449c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800449e:	bf00      	nop
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044ac:	bf00      	nop
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80044b6:	b480      	push	{r7}
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80044ba:	bf00      	nop
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044c8:	f000 fcfa 	bl	8004ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80044cc:	bf00      	nop
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80044d4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80044d8:	f001 f812 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80044dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80044e0:	f001 f80e 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80044e4:	bf00      	nop
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80044ec:	4803      	ldr	r0, [pc, #12]	; (80044fc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80044ee:	f002 fa95 	bl	8006a1c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80044f2:	4803      	ldr	r0, [pc, #12]	; (8004500 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80044f4:	f002 fa92 	bl	8006a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80044f8:	bf00      	nop
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000444 	.word	0x20000444
 8004500:	20000484 	.word	0x20000484

08004504 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8004508:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800450c:	f000 fff8 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004510:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004514:	f000 fff4 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8004518:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800451c:	f000 fff0 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004520:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004524:	f000 ffec 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8004528:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800452c:	f000 ffe8 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004534:	f000 ffe4 	bl	8005500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004538:	bf00      	nop
 800453a:	bd80      	pop	{r7, pc}

0800453c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004540:	4802      	ldr	r0, [pc, #8]	; (800454c <TIM7_IRQHandler+0x10>)
 8004542:	f002 fa6b 	bl	8006a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	200004c4 	.word	0x200004c4

08004550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004558:	4a14      	ldr	r2, [pc, #80]	; (80045ac <_sbrk+0x5c>)
 800455a:	4b15      	ldr	r3, [pc, #84]	; (80045b0 <_sbrk+0x60>)
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004564:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <_sbrk+0x64>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d102      	bne.n	8004572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800456c:	4b11      	ldr	r3, [pc, #68]	; (80045b4 <_sbrk+0x64>)
 800456e:	4a12      	ldr	r2, [pc, #72]	; (80045b8 <_sbrk+0x68>)
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004572:	4b10      	ldr	r3, [pc, #64]	; (80045b4 <_sbrk+0x64>)
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	429a      	cmp	r2, r3
 800457e:	d207      	bcs.n	8004590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004580:	f003 fd98 	bl	80080b4 <__errno>
 8004584:	4602      	mov	r2, r0
 8004586:	230c      	movs	r3, #12
 8004588:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800458a:	f04f 33ff 	mov.w	r3, #4294967295
 800458e:	e009      	b.n	80045a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <_sbrk+0x64>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <_sbrk+0x64>)
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4413      	add	r3, r2
 800459e:	4a05      	ldr	r2, [pc, #20]	; (80045b4 <_sbrk+0x64>)
 80045a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80045a2:	68fb      	ldr	r3, [r7, #12]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	20020000 	.word	0x20020000
 80045b0:	00000400 	.word	0x00000400
 80045b4:	20000194 	.word	0x20000194
 80045b8:	20000550 	.word	0x20000550

080045bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045c0:	4b08      	ldr	r3, [pc, #32]	; (80045e4 <SystemInit+0x28>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c6:	4a07      	ldr	r2, [pc, #28]	; (80045e4 <SystemInit+0x28>)
 80045c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80045d0:	4b04      	ldr	r3, [pc, #16]	; (80045e4 <SystemInit+0x28>)
 80045d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045d6:	609a      	str	r2, [r3, #8]
#endif
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	e000ed00 	.word	0xe000ed00

080045e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b096      	sub	sp, #88	; 0x58
 80045ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80045ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	605a      	str	r2, [r3, #4]
 80045f8:	609a      	str	r2, [r3, #8]
 80045fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
 8004604:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800460a:	2200      	movs	r2, #0
 800460c:	601a      	str	r2, [r3, #0]
 800460e:	605a      	str	r2, [r3, #4]
 8004610:	609a      	str	r2, [r3, #8]
 8004612:	60da      	str	r2, [r3, #12]
 8004614:	611a      	str	r2, [r3, #16]
 8004616:	615a      	str	r2, [r3, #20]
 8004618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800461a:	1d3b      	adds	r3, r7, #4
 800461c:	2220      	movs	r2, #32
 800461e:	2100      	movs	r1, #0
 8004620:	4618      	mov	r0, r3
 8004622:	f003 fd7c 	bl	800811e <memset>

  htim1.Instance = TIM1;
 8004626:	4b50      	ldr	r3, [pc, #320]	; (8004768 <MX_TIM1_Init+0x180>)
 8004628:	4a50      	ldr	r2, [pc, #320]	; (800476c <MX_TIM1_Init+0x184>)
 800462a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 800462c:	4b4e      	ldr	r3, [pc, #312]	; (8004768 <MX_TIM1_Init+0x180>)
 800462e:	220a      	movs	r2, #10
 8004630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004632:	4b4d      	ldr	r3, [pc, #308]	; (8004768 <MX_TIM1_Init+0x180>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8004638:	4b4b      	ldr	r3, [pc, #300]	; (8004768 <MX_TIM1_Init+0x180>)
 800463a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800463e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004640:	4b49      	ldr	r3, [pc, #292]	; (8004768 <MX_TIM1_Init+0x180>)
 8004642:	2200      	movs	r2, #0
 8004644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004646:	4b48      	ldr	r3, [pc, #288]	; (8004768 <MX_TIM1_Init+0x180>)
 8004648:	2200      	movs	r2, #0
 800464a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800464c:	4b46      	ldr	r3, [pc, #280]	; (8004768 <MX_TIM1_Init+0x180>)
 800464e:	2280      	movs	r2, #128	; 0x80
 8004650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004652:	4845      	ldr	r0, [pc, #276]	; (8004768 <MX_TIM1_Init+0x180>)
 8004654:	f002 f920 	bl	8006898 <HAL_TIM_Base_Init>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800465e:	f7ff fb4b 	bl	8003cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004662:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800466c:	4619      	mov	r1, r3
 800466e:	483e      	ldr	r0, [pc, #248]	; (8004768 <MX_TIM1_Init+0x180>)
 8004670:	f002 fba2 	bl	8006db8 <HAL_TIM_ConfigClockSource>
 8004674:	4603      	mov	r3, r0
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800467a:	f7ff fb3d 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800467e:	483a      	ldr	r0, [pc, #232]	; (8004768 <MX_TIM1_Init+0x180>)
 8004680:	f002 f959 	bl	8006936 <HAL_TIM_PWM_Init>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800468a:	f7ff fb35 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800468e:	2300      	movs	r3, #0
 8004690:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004692:	2300      	movs	r3, #0
 8004694:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800469a:	4619      	mov	r1, r3
 800469c:	4832      	ldr	r0, [pc, #200]	; (8004768 <MX_TIM1_Init+0x180>)
 800469e:	f002 ff7b 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80046a8:	f7ff fb26 	bl	8003cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046ac:	2360      	movs	r3, #96	; 0x60
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046b8:	2300      	movs	r3, #0
 80046ba:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046bc:	2300      	movs	r3, #0
 80046be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80046c0:	2300      	movs	r3, #0
 80046c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046c4:	2300      	movs	r3, #0
 80046c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80046c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046cc:	2200      	movs	r2, #0
 80046ce:	4619      	mov	r1, r3
 80046d0:	4825      	ldr	r0, [pc, #148]	; (8004768 <MX_TIM1_Init+0x180>)
 80046d2:	f002 faab 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80046dc:	f7ff fb0c 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80046e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046e4:	2204      	movs	r2, #4
 80046e6:	4619      	mov	r1, r3
 80046e8:	481f      	ldr	r0, [pc, #124]	; (8004768 <MX_TIM1_Init+0x180>)
 80046ea:	f002 fa9f 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 80046ee:	4603      	mov	r3, r0
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d001      	beq.n	80046f8 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80046f4:	f7ff fb00 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80046f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fc:	2208      	movs	r2, #8
 80046fe:	4619      	mov	r1, r3
 8004700:	4819      	ldr	r0, [pc, #100]	; (8004768 <MX_TIM1_Init+0x180>)
 8004702:	f002 fa93 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800470c:	f7ff faf4 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004714:	220c      	movs	r2, #12
 8004716:	4619      	mov	r1, r3
 8004718:	4813      	ldr	r0, [pc, #76]	; (8004768 <MX_TIM1_Init+0x180>)
 800471a:	f002 fa87 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8004724:	f7ff fae8 	bl	8003cf8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004728:	2300      	movs	r3, #0
 800472a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800472c:	2300      	movs	r3, #0
 800472e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004730:	2300      	movs	r3, #0
 8004732:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800473c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004740:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004742:	2300      	movs	r3, #0
 8004744:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004746:	1d3b      	adds	r3, r7, #4
 8004748:	4619      	mov	r1, r3
 800474a:	4807      	ldr	r0, [pc, #28]	; (8004768 <MX_TIM1_Init+0x180>)
 800474c:	f002 ffa0 	bl	8007690 <HAL_TIMEx_ConfigBreakDeadTime>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8004756:	f7ff facf 	bl	8003cf8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 800475a:	4803      	ldr	r0, [pc, #12]	; (8004768 <MX_TIM1_Init+0x180>)
 800475c:	f000 fa36 	bl	8004bcc <HAL_TIM_MspPostInit>

}
 8004760:	bf00      	nop
 8004762:	3758      	adds	r7, #88	; 0x58
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	20000444 	.word	0x20000444
 800476c:	40010000 	.word	0x40010000

08004770 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b08e      	sub	sp, #56	; 0x38
 8004774:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004776:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800477a:	2200      	movs	r2, #0
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	605a      	str	r2, [r3, #4]
 8004780:	609a      	str	r2, [r3, #8]
 8004782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004784:	f107 0320 	add.w	r3, r7, #32
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
 800478c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800478e:	1d3b      	adds	r3, r7, #4
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
 800479c:	615a      	str	r2, [r3, #20]
 800479e:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80047a0:	4b3d      	ldr	r3, [pc, #244]	; (8004898 <MX_TIM3_Init+0x128>)
 80047a2:	4a3e      	ldr	r2, [pc, #248]	; (800489c <MX_TIM3_Init+0x12c>)
 80047a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10;
 80047a6:	4b3c      	ldr	r3, [pc, #240]	; (8004898 <MX_TIM3_Init+0x128>)
 80047a8:	220a      	movs	r2, #10
 80047aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <MX_TIM3_Init+0x128>)
 80047ae:	2200      	movs	r2, #0
 80047b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80047b2:	4b39      	ldr	r3, [pc, #228]	; (8004898 <MX_TIM3_Init+0x128>)
 80047b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <MX_TIM3_Init+0x128>)
 80047bc:	2200      	movs	r2, #0
 80047be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80047c0:	4b35      	ldr	r3, [pc, #212]	; (8004898 <MX_TIM3_Init+0x128>)
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80047c6:	4834      	ldr	r0, [pc, #208]	; (8004898 <MX_TIM3_Init+0x128>)
 80047c8:	f002 f866 	bl	8006898 <HAL_TIM_Base_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80047d2:	f7ff fa91 	bl	8003cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047e0:	4619      	mov	r1, r3
 80047e2:	482d      	ldr	r0, [pc, #180]	; (8004898 <MX_TIM3_Init+0x128>)
 80047e4:	f002 fae8 	bl	8006db8 <HAL_TIM_ConfigClockSource>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80047ee:	f7ff fa83 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047f2:	4829      	ldr	r0, [pc, #164]	; (8004898 <MX_TIM3_Init+0x128>)
 80047f4:	f002 f89f 	bl	8006936 <HAL_TIM_PWM_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80047fe:	f7ff fa7b 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004802:	2300      	movs	r3, #0
 8004804:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004806:	2300      	movs	r3, #0
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800480a:	f107 0320 	add.w	r3, r7, #32
 800480e:	4619      	mov	r1, r3
 8004810:	4821      	ldr	r0, [pc, #132]	; (8004898 <MX_TIM3_Init+0x128>)
 8004812:	f002 fec1 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d001      	beq.n	8004820 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800481c:	f7ff fa6c 	bl	8003cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004820:	2360      	movs	r3, #96	; 0x60
 8004822:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800482c:	2300      	movs	r3, #0
 800482e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004830:	1d3b      	adds	r3, r7, #4
 8004832:	2200      	movs	r2, #0
 8004834:	4619      	mov	r1, r3
 8004836:	4818      	ldr	r0, [pc, #96]	; (8004898 <MX_TIM3_Init+0x128>)
 8004838:	f002 f9f8 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 800483c:	4603      	mov	r3, r0
 800483e:	2b00      	cmp	r3, #0
 8004840:	d001      	beq.n	8004846 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8004842:	f7ff fa59 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004846:	1d3b      	adds	r3, r7, #4
 8004848:	2204      	movs	r2, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4812      	ldr	r0, [pc, #72]	; (8004898 <MX_TIM3_Init+0x128>)
 800484e:	f002 f9ed 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8004858:	f7ff fa4e 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800485c:	1d3b      	adds	r3, r7, #4
 800485e:	2208      	movs	r2, #8
 8004860:	4619      	mov	r1, r3
 8004862:	480d      	ldr	r0, [pc, #52]	; (8004898 <MX_TIM3_Init+0x128>)
 8004864:	f002 f9e2 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 800486e:	f7ff fa43 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004872:	1d3b      	adds	r3, r7, #4
 8004874:	220c      	movs	r2, #12
 8004876:	4619      	mov	r1, r3
 8004878:	4807      	ldr	r0, [pc, #28]	; (8004898 <MX_TIM3_Init+0x128>)
 800487a:	f002 f9d7 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8004884:	f7ff fa38 	bl	8003cf8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8004888:	4803      	ldr	r0, [pc, #12]	; (8004898 <MX_TIM3_Init+0x128>)
 800488a:	f000 f99f 	bl	8004bcc <HAL_TIM_MspPostInit>

}
 800488e:	bf00      	nop
 8004890:	3738      	adds	r7, #56	; 0x38
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	20000404 	.word	0x20000404
 800489c:	40000400 	.word	0x40000400

080048a0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08e      	sub	sp, #56	; 0x38
 80048a4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80048a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
 80048ae:	605a      	str	r2, [r3, #4]
 80048b0:	609a      	str	r2, [r3, #8]
 80048b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80048b4:	f107 0320 	add.w	r3, r7, #32
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80048be:	1d3b      	adds	r3, r7, #4
 80048c0:	2200      	movs	r2, #0
 80048c2:	601a      	str	r2, [r3, #0]
 80048c4:	605a      	str	r2, [r3, #4]
 80048c6:	609a      	str	r2, [r3, #8]
 80048c8:	60da      	str	r2, [r3, #12]
 80048ca:	611a      	str	r2, [r3, #16]
 80048cc:	615a      	str	r2, [r3, #20]
 80048ce:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80048d0:	4b3d      	ldr	r3, [pc, #244]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048d2:	4a3e      	ldr	r2, [pc, #248]	; (80049cc <MX_TIM4_Init+0x12c>)
 80048d4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10;
 80048d6:	4b3c      	ldr	r3, [pc, #240]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048d8:	220a      	movs	r2, #10
 80048da:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048dc:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 80048e2:	4b39      	ldr	r3, [pc, #228]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80048e8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048ea:	4b37      	ldr	r3, [pc, #220]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048f0:	4b35      	ldr	r3, [pc, #212]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048f2:	2280      	movs	r2, #128	; 0x80
 80048f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80048f6:	4834      	ldr	r0, [pc, #208]	; (80049c8 <MX_TIM4_Init+0x128>)
 80048f8:	f001 ffce 	bl	8006898 <HAL_TIM_Base_Init>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8004902:	f7ff f9f9 	bl	8003cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800490c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004910:	4619      	mov	r1, r3
 8004912:	482d      	ldr	r0, [pc, #180]	; (80049c8 <MX_TIM4_Init+0x128>)
 8004914:	f002 fa50 	bl	8006db8 <HAL_TIM_ConfigClockSource>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d001      	beq.n	8004922 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800491e:	f7ff f9eb 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8004922:	4829      	ldr	r0, [pc, #164]	; (80049c8 <MX_TIM4_Init+0x128>)
 8004924:	f002 f807 	bl	8006936 <HAL_TIM_PWM_Init>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800492e:	f7ff f9e3 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004932:	2300      	movs	r3, #0
 8004934:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004936:	2300      	movs	r3, #0
 8004938:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800493a:	f107 0320 	add.w	r3, r7, #32
 800493e:	4619      	mov	r1, r3
 8004940:	4821      	ldr	r0, [pc, #132]	; (80049c8 <MX_TIM4_Init+0x128>)
 8004942:	f002 fe29 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800494c:	f7ff f9d4 	bl	8003cf8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004950:	2360      	movs	r3, #96	; 0x60
 8004952:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004954:	2300      	movs	r3, #0
 8004956:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004960:	1d3b      	adds	r3, r7, #4
 8004962:	2200      	movs	r2, #0
 8004964:	4619      	mov	r1, r3
 8004966:	4818      	ldr	r0, [pc, #96]	; (80049c8 <MX_TIM4_Init+0x128>)
 8004968:	f002 f960 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8004972:	f7ff f9c1 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004976:	1d3b      	adds	r3, r7, #4
 8004978:	2204      	movs	r2, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4812      	ldr	r0, [pc, #72]	; (80049c8 <MX_TIM4_Init+0x128>)
 800497e:	f002 f955 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8004988:	f7ff f9b6 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800498c:	1d3b      	adds	r3, r7, #4
 800498e:	2208      	movs	r2, #8
 8004990:	4619      	mov	r1, r3
 8004992:	480d      	ldr	r0, [pc, #52]	; (80049c8 <MX_TIM4_Init+0x128>)
 8004994:	f002 f94a 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 800499e:	f7ff f9ab 	bl	8003cf8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80049a2:	1d3b      	adds	r3, r7, #4
 80049a4:	220c      	movs	r2, #12
 80049a6:	4619      	mov	r1, r3
 80049a8:	4807      	ldr	r0, [pc, #28]	; (80049c8 <MX_TIM4_Init+0x128>)
 80049aa:	f002 f93f 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80049b4:	f7ff f9a0 	bl	8003cf8 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 80049b8:	4803      	ldr	r0, [pc, #12]	; (80049c8 <MX_TIM4_Init+0x128>)
 80049ba:	f000 f907 	bl	8004bcc <HAL_TIM_MspPostInit>

}
 80049be:	bf00      	nop
 80049c0:	3738      	adds	r7, #56	; 0x38
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	200003c4 	.word	0x200003c4
 80049cc:	40000800 	.word	0x40000800

080049d0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80049d6:	463b      	mov	r3, r7
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	605a      	str	r2, [r3, #4]

  htim7.Instance = TIM7;
 80049de:	4b15      	ldr	r3, [pc, #84]	; (8004a34 <MX_TIM7_Init+0x64>)
 80049e0:	4a15      	ldr	r2, [pc, #84]	; (8004a38 <MX_TIM7_Init+0x68>)
 80049e2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 999;
 80049e4:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <MX_TIM7_Init+0x64>)
 80049e6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80049ea:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80049ec:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <MX_TIM7_Init+0x64>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1679;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <MX_TIM7_Init+0x64>)
 80049f4:	f240 628f 	movw	r2, #1679	; 0x68f
 80049f8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <MX_TIM7_Init+0x64>)
 80049fc:	2280      	movs	r2, #128	; 0x80
 80049fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004a00:	480c      	ldr	r0, [pc, #48]	; (8004a34 <MX_TIM7_Init+0x64>)
 8004a02:	f001 ff49 	bl	8006898 <HAL_TIM_Base_Init>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004a0c:	f7ff f974 	bl	8003cf8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004a10:	2300      	movs	r3, #0
 8004a12:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004a14:	2300      	movs	r3, #0
 8004a16:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004a18:	463b      	mov	r3, r7
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4805      	ldr	r0, [pc, #20]	; (8004a34 <MX_TIM7_Init+0x64>)
 8004a1e:	f002 fdbb 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8004a22:	4603      	mov	r3, r0
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d001      	beq.n	8004a2c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004a28:	f7ff f966 	bl	8003cf8 <Error_Handler>
  }

}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	200004c4 	.word	0x200004c4
 8004a38:	40001400 	.word	0x40001400

08004a3c <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004a42:	463b      	mov	r3, r7
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]

  htim9.Instance = TIM9;
 8004a4e:	4b15      	ldr	r3, [pc, #84]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a50:	4a15      	ldr	r2, [pc, #84]	; (8004aa8 <MX_TIM9_Init+0x6c>)
 8004a52:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 1;
 8004a54:	4b13      	ldr	r3, [pc, #76]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a56:	2201      	movs	r2, #1
 8004a58:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a5a:	4b12      	ldr	r3, [pc, #72]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 167;
 8004a60:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a62:	22a7      	movs	r2, #167	; 0xa7
 8004a64:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004a66:	4b0f      	ldr	r3, [pc, #60]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004a6c:	4b0d      	ldr	r3, [pc, #52]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8004a72:	480c      	ldr	r0, [pc, #48]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a74:	f001 ff10 	bl	8006898 <HAL_TIM_Base_Init>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 8004a7e:	f7ff f93b 	bl	8003cf8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004a82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a86:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8004a88:	463b      	mov	r3, r7
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <MX_TIM9_Init+0x68>)
 8004a8e:	f002 f993 	bl	8006db8 <HAL_TIM_ConfigClockSource>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d001      	beq.n	8004a9c <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 8004a98:	f7ff f92e 	bl	8003cf8 <Error_Handler>
  }

}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000484 	.word	0x20000484
 8004aa8:	40014000 	.word	0x40014000

08004aac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b088      	sub	sp, #32
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a3e      	ldr	r2, [pc, #248]	; (8004bb4 <HAL_TIM_Base_MspInit+0x108>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d116      	bne.n	8004aec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac6:	4a3c      	ldr	r2, [pc, #240]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ace:	4b3a      	ldr	r3, [pc, #232]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	61fb      	str	r3, [r7, #28]
 8004ad8:	69fb      	ldr	r3, [r7, #28]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004ada:	2200      	movs	r2, #0
 8004adc:	2100      	movs	r1, #0
 8004ade:	2018      	movs	r0, #24
 8004ae0:	f000 fb0b 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004ae4:	2018      	movs	r0, #24
 8004ae6:	f000 fb24 	bl	8005132 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8004aea:	e05e      	b.n	8004baa <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM3)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a32      	ldr	r2, [pc, #200]	; (8004bbc <HAL_TIM_Base_MspInit+0x110>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d10e      	bne.n	8004b14 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	61bb      	str	r3, [r7, #24]
 8004afa:	4b2f      	ldr	r3, [pc, #188]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afe:	4a2e      	ldr	r2, [pc, #184]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b00:	f043 0302 	orr.w	r3, r3, #2
 8004b04:	6413      	str	r3, [r2, #64]	; 0x40
 8004b06:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	61bb      	str	r3, [r7, #24]
 8004b10:	69bb      	ldr	r3, [r7, #24]
}
 8004b12:	e04a      	b.n	8004baa <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM4)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a29      	ldr	r2, [pc, #164]	; (8004bc0 <HAL_TIM_Base_MspInit+0x114>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d10e      	bne.n	8004b3c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b1e:	2300      	movs	r3, #0
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b26:	4a24      	ldr	r2, [pc, #144]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b2e:	4b22      	ldr	r3, [pc, #136]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	697b      	ldr	r3, [r7, #20]
}
 8004b3a:	e036      	b.n	8004baa <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM7)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <HAL_TIM_Base_MspInit+0x118>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d116      	bne.n	8004b74 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004b46:	2300      	movs	r3, #0
 8004b48:	613b      	str	r3, [r7, #16]
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b50:	f043 0320 	orr.w	r3, r3, #32
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
 8004b56:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004b62:	2200      	movs	r2, #0
 8004b64:	2100      	movs	r1, #0
 8004b66:	2037      	movs	r0, #55	; 0x37
 8004b68:	f000 fac7 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004b6c:	2037      	movs	r0, #55	; 0x37
 8004b6e:	f000 fae0 	bl	8005132 <HAL_NVIC_EnableIRQ>
}
 8004b72:	e01a      	b.n	8004baa <HAL_TIM_Base_MspInit+0xfe>
  else if(tim_baseHandle->Instance==TIM9)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a13      	ldr	r2, [pc, #76]	; (8004bc8 <HAL_TIM_Base_MspInit+0x11c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d115      	bne.n	8004baa <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b8e:	4b0a      	ldr	r3, [pc, #40]	; (8004bb8 <HAL_TIM_Base_MspInit+0x10c>)
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b96:	60fb      	str	r3, [r7, #12]
 8004b98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	2100      	movs	r1, #0
 8004b9e:	2018      	movs	r0, #24
 8004ba0:	f000 faab 	bl	80050fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004ba4:	2018      	movs	r0, #24
 8004ba6:	f000 fac4 	bl	8005132 <HAL_NVIC_EnableIRQ>
}
 8004baa:	bf00      	nop
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40010000 	.word	0x40010000
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	40000400 	.word	0x40000400
 8004bc0:	40000800 	.word	0x40000800
 8004bc4:	40001400 	.word	0x40001400
 8004bc8:	40014000 	.word	0x40014000

08004bcc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b08a      	sub	sp, #40	; 0x28
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	605a      	str	r2, [r3, #4]
 8004bde:	609a      	str	r2, [r3, #8]
 8004be0:	60da      	str	r2, [r3, #12]
 8004be2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a37      	ldr	r2, [pc, #220]	; (8004cc8 <HAL_TIM_MspPostInit+0xfc>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d11f      	bne.n	8004c2e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	4a35      	ldr	r2, [pc, #212]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bfe:	4b33      	ldr	r3, [pc, #204]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004c0a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c10:	2302      	movs	r3, #2
 8004c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c14:	2300      	movs	r3, #0
 8004c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	4619      	mov	r1, r3
 8004c26:	482a      	ldr	r0, [pc, #168]	; (8004cd0 <HAL_TIM_MspPostInit+0x104>)
 8004c28:	f000 fa9e 	bl	8005168 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004c2c:	e048      	b.n	8004cc0 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM3)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a28      	ldr	r2, [pc, #160]	; (8004cd4 <HAL_TIM_MspPostInit+0x108>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d11f      	bne.n	8004c78 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c38:	2300      	movs	r3, #0
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	4a22      	ldr	r2, [pc, #136]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c42:	f043 0304 	orr.w	r3, r3, #4
 8004c46:	6313      	str	r3, [r2, #48]	; 0x30
 8004c48:	4b20      	ldr	r3, [pc, #128]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8004c54:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c62:	2300      	movs	r3, #0
 8004c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c66:	2302      	movs	r3, #2
 8004c68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c6a:	f107 0314 	add.w	r3, r7, #20
 8004c6e:	4619      	mov	r1, r3
 8004c70:	4819      	ldr	r0, [pc, #100]	; (8004cd8 <HAL_TIM_MspPostInit+0x10c>)
 8004c72:	f000 fa79 	bl	8005168 <HAL_GPIO_Init>
}
 8004c76:	e023      	b.n	8004cc0 <HAL_TIM_MspPostInit+0xf4>
  else if(timHandle->Instance==TIM4)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a17      	ldr	r2, [pc, #92]	; (8004cdc <HAL_TIM_MspPostInit+0x110>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d11e      	bne.n	8004cc0 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c82:	2300      	movs	r3, #0
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8a:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c8c:	f043 0308 	orr.w	r3, r3, #8
 8004c90:	6313      	str	r3, [r2, #48]	; 0x30
 8004c92:	4b0e      	ldr	r3, [pc, #56]	; (8004ccc <HAL_TIM_MspPostInit+0x100>)
 8004c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c96:	f003 0308 	and.w	r3, r3, #8
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004c9e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cac:	2300      	movs	r3, #0
 8004cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cb0:	2302      	movs	r3, #2
 8004cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cb4:	f107 0314 	add.w	r3, r7, #20
 8004cb8:	4619      	mov	r1, r3
 8004cba:	4809      	ldr	r0, [pc, #36]	; (8004ce0 <HAL_TIM_MspPostInit+0x114>)
 8004cbc:	f000 fa54 	bl	8005168 <HAL_GPIO_Init>
}
 8004cc0:	bf00      	nop
 8004cc2:	3728      	adds	r7, #40	; 0x28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40010000 	.word	0x40010000
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	40020000 	.word	0x40020000
 8004cd4:	40000400 	.word	0x40000400
 8004cd8:	40020800 	.word	0x40020800
 8004cdc:	40000800 	.word	0x40000800
 8004ce0:	40020c00 	.word	0x40020c00

08004ce4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8004ce8:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cea:	4a12      	ldr	r2, [pc, #72]	; (8004d34 <MX_USART1_UART_Init+0x50>)
 8004cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004cee:	4b10      	ldr	r3, [pc, #64]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004cf6:	4b0e      	ldr	r3, [pc, #56]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004cfc:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d02:	4b0b      	ldr	r3, [pc, #44]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d08:	4b09      	ldr	r3, [pc, #36]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d0a:	220c      	movs	r2, #12
 8004d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d16:	2200      	movs	r2, #0
 8004d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d1a:	4805      	ldr	r0, [pc, #20]	; (8004d30 <MX_USART1_UART_Init+0x4c>)
 8004d1c:	f002 fd1e 	bl	800775c <HAL_UART_Init>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004d26:	f7fe ffe7 	bl	8003cf8 <Error_Handler>
  }

}
 8004d2a:	bf00      	nop
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	20000504 	.word	0x20000504
 8004d34:	40011000 	.word	0x40011000

08004d38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d40:	f107 0314 	add.w	r3, r7, #20
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	605a      	str	r2, [r3, #4]
 8004d4a:	609a      	str	r2, [r3, #8]
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a19      	ldr	r2, [pc, #100]	; (8004dbc <HAL_UART_MspInit+0x84>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d12b      	bne.n	8004db2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
 8004d5e:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <HAL_UART_MspInit+0x88>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	4a17      	ldr	r2, [pc, #92]	; (8004dc0 <HAL_UART_MspInit+0x88>)
 8004d64:	f043 0310 	orr.w	r3, r3, #16
 8004d68:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6a:	4b15      	ldr	r3, [pc, #84]	; (8004dc0 <HAL_UART_MspInit+0x88>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]
 8004d7a:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <HAL_UART_MspInit+0x88>)
 8004d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d7e:	4a10      	ldr	r2, [pc, #64]	; (8004dc0 <HAL_UART_MspInit+0x88>)
 8004d80:	f043 0302 	orr.w	r3, r3, #2
 8004d84:	6313      	str	r3, [r2, #48]	; 0x30
 8004d86:	4b0e      	ldr	r3, [pc, #56]	; (8004dc0 <HAL_UART_MspInit+0x88>)
 8004d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d92:	23c0      	movs	r3, #192	; 0xc0
 8004d94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d96:	2302      	movs	r3, #2
 8004d98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004da2:	2307      	movs	r3, #7
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da6:	f107 0314 	add.w	r3, r7, #20
 8004daa:	4619      	mov	r1, r3
 8004dac:	4805      	ldr	r0, [pc, #20]	; (8004dc4 <HAL_UART_MspInit+0x8c>)
 8004dae:	f000 f9db 	bl	8005168 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004db2:	bf00      	nop
 8004db4:	3728      	adds	r7, #40	; 0x28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40011000 	.word	0x40011000
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	40020400 	.word	0x40020400

08004dc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004dc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004dcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dce:	e003      	b.n	8004dd8 <LoopCopyDataInit>

08004dd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004dd0:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004dd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004dd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004dd6:	3104      	adds	r1, #4

08004dd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004dd8:	480b      	ldr	r0, [pc, #44]	; (8004e08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004dda:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004ddc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004de0:	d3f6      	bcc.n	8004dd0 <CopyDataInit>
  ldr  r2, =_sbss
 8004de2:	4a0b      	ldr	r2, [pc, #44]	; (8004e10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004de4:	e002      	b.n	8004dec <LoopFillZerobss>

08004de6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004de6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004de8:	f842 3b04 	str.w	r3, [r2], #4

08004dec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004dee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004df0:	d3f9      	bcc.n	8004de6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004df2:	f7ff fbe3 	bl	80045bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004df6:	f003 f963 	bl	80080c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004dfa:	f7fe f901 	bl	8003000 <main>
  bx  lr    
 8004dfe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004e00:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004e04:	0800910c 	.word	0x0800910c
  ldr  r0, =_sdata
 8004e08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e0c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8004e10:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8004e14:	2000054c 	.word	0x2000054c

08004e18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e18:	e7fe      	b.n	8004e18 <ADC_IRQHandler>
	...

08004e1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <HAL_Init+0x40>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <HAL_Init+0x40>)
 8004e26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e2c:	4b0b      	ldr	r3, [pc, #44]	; (8004e5c <HAL_Init+0x40>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <HAL_Init+0x40>)
 8004e32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004e38:	4b08      	ldr	r3, [pc, #32]	; (8004e5c <HAL_Init+0x40>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a07      	ldr	r2, [pc, #28]	; (8004e5c <HAL_Init+0x40>)
 8004e3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e44:	2003      	movs	r0, #3
 8004e46:	f000 f94d 	bl	80050e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f000 f808 	bl	8004e60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e50:	f7ff fae8 	bl	8004424 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40023c00 	.word	0x40023c00

08004e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e68:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_InitTick+0x54>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_InitTick+0x58>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	4619      	mov	r1, r3
 8004e72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8004e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f965 	bl	800514e <HAL_SYSTICK_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e00e      	b.n	8004eac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b0f      	cmp	r3, #15
 8004e92:	d80a      	bhi.n	8004eaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004e94:	2200      	movs	r2, #0
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	f04f 30ff 	mov.w	r0, #4294967295
 8004e9c:	f000 f92d 	bl	80050fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ea0:	4a06      	ldr	r2, [pc, #24]	; (8004ebc <HAL_InitTick+0x5c>)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	e000      	b.n	8004eac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3708      	adds	r7, #8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	20000010 	.word	0x20000010
 8004eb8:	20000018 	.word	0x20000018
 8004ebc:	20000014 	.word	0x20000014

08004ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ec4:	4b06      	ldr	r3, [pc, #24]	; (8004ee0 <HAL_IncTick+0x20>)
 8004ec6:	781b      	ldrb	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <HAL_IncTick+0x24>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4413      	add	r3, r2
 8004ed0:	4a04      	ldr	r2, [pc, #16]	; (8004ee4 <HAL_IncTick+0x24>)
 8004ed2:	6013      	str	r3, [r2, #0]
}
 8004ed4:	bf00      	nop
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000018 	.word	0x20000018
 8004ee4:	20000544 	.word	0x20000544

08004ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  return uwTick;
 8004eec:	4b03      	ldr	r3, [pc, #12]	; (8004efc <HAL_GetTick+0x14>)
 8004eee:	681b      	ldr	r3, [r3, #0]
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	20000544 	.word	0x20000544

08004f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f08:	f7ff ffee 	bl	8004ee8 <HAL_GetTick>
 8004f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f18:	d005      	beq.n	8004f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_Delay+0x40>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	461a      	mov	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004f26:	bf00      	nop
 8004f28:	f7ff ffde 	bl	8004ee8 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	68fa      	ldr	r2, [r7, #12]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d8f7      	bhi.n	8004f28 <HAL_Delay+0x28>
  {
  }
}
 8004f38:	bf00      	nop
 8004f3a:	3710      	adds	r7, #16
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	20000018 	.word	0x20000018

08004f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004f54:	4b0c      	ldr	r3, [pc, #48]	; (8004f88 <__NVIC_SetPriorityGrouping+0x44>)
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f60:	4013      	ands	r3, r2
 8004f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f76:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <__NVIC_SetPriorityGrouping+0x44>)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	60d3      	str	r3, [r2, #12]
}
 8004f7c:	bf00      	nop
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr
 8004f88:	e000ed00 	.word	0xe000ed00

08004f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f90:	4b04      	ldr	r3, [pc, #16]	; (8004fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	0a1b      	lsrs	r3, r3, #8
 8004f96:	f003 0307 	and.w	r3, r3, #7
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	e000ed00 	.word	0xe000ed00

08004fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	4603      	mov	r3, r0
 8004fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	db0b      	blt.n	8004fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004fba:	79fb      	ldrb	r3, [r7, #7]
 8004fbc:	f003 021f 	and.w	r2, r3, #31
 8004fc0:	4907      	ldr	r1, [pc, #28]	; (8004fe0 <__NVIC_EnableIRQ+0x38>)
 8004fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	2001      	movs	r0, #1
 8004fca:	fa00 f202 	lsl.w	r2, r0, r2
 8004fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004fd2:	bf00      	nop
 8004fd4:	370c      	adds	r7, #12
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	e000e100 	.word	0xe000e100

08004fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	4603      	mov	r3, r0
 8004fec:	6039      	str	r1, [r7, #0]
 8004fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	db0a      	blt.n	800500e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	490c      	ldr	r1, [pc, #48]	; (8005030 <__NVIC_SetPriority+0x4c>)
 8004ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005002:	0112      	lsls	r2, r2, #4
 8005004:	b2d2      	uxtb	r2, r2
 8005006:	440b      	add	r3, r1
 8005008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800500c:	e00a      	b.n	8005024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	b2da      	uxtb	r2, r3
 8005012:	4908      	ldr	r1, [pc, #32]	; (8005034 <__NVIC_SetPriority+0x50>)
 8005014:	79fb      	ldrb	r3, [r7, #7]
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	3b04      	subs	r3, #4
 800501c:	0112      	lsls	r2, r2, #4
 800501e:	b2d2      	uxtb	r2, r2
 8005020:	440b      	add	r3, r1
 8005022:	761a      	strb	r2, [r3, #24]
}
 8005024:	bf00      	nop
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	e000e100 	.word	0xe000e100
 8005034:	e000ed00 	.word	0xe000ed00

08005038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005038:	b480      	push	{r7}
 800503a:	b089      	sub	sp, #36	; 0x24
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f1c3 0307 	rsb	r3, r3, #7
 8005052:	2b04      	cmp	r3, #4
 8005054:	bf28      	it	cs
 8005056:	2304      	movcs	r3, #4
 8005058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	3304      	adds	r3, #4
 800505e:	2b06      	cmp	r3, #6
 8005060:	d902      	bls.n	8005068 <NVIC_EncodePriority+0x30>
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3b03      	subs	r3, #3
 8005066:	e000      	b.n	800506a <NVIC_EncodePriority+0x32>
 8005068:	2300      	movs	r3, #0
 800506a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800506c:	f04f 32ff 	mov.w	r2, #4294967295
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	fa02 f303 	lsl.w	r3, r2, r3
 8005076:	43da      	mvns	r2, r3
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	401a      	ands	r2, r3
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005080:	f04f 31ff 	mov.w	r1, #4294967295
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	fa01 f303 	lsl.w	r3, r1, r3
 800508a:	43d9      	mvns	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005090:	4313      	orrs	r3, r2
         );
}
 8005092:	4618      	mov	r0, r3
 8005094:	3724      	adds	r7, #36	; 0x24
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3b01      	subs	r3, #1
 80050ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050b0:	d301      	bcc.n	80050b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80050b2:	2301      	movs	r3, #1
 80050b4:	e00f      	b.n	80050d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80050b6:	4a0a      	ldr	r2, [pc, #40]	; (80050e0 <SysTick_Config+0x40>)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3b01      	subs	r3, #1
 80050bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80050be:	210f      	movs	r1, #15
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	f7ff ff8e 	bl	8004fe4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <SysTick_Config+0x40>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80050ce:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <SysTick_Config+0x40>)
 80050d0:	2207      	movs	r2, #7
 80050d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3708      	adds	r7, #8
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	e000e010 	.word	0xe000e010

080050e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff ff29 	bl	8004f44 <__NVIC_SetPriorityGrouping>
}
 80050f2:	bf00      	nop
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b086      	sub	sp, #24
 80050fe:	af00      	add	r7, sp, #0
 8005100:	4603      	mov	r3, r0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005108:	2300      	movs	r3, #0
 800510a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800510c:	f7ff ff3e 	bl	8004f8c <__NVIC_GetPriorityGrouping>
 8005110:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	6978      	ldr	r0, [r7, #20]
 8005118:	f7ff ff8e 	bl	8005038 <NVIC_EncodePriority>
 800511c:	4602      	mov	r2, r0
 800511e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f7ff ff5d 	bl	8004fe4 <__NVIC_SetPriority>
}
 800512a:	bf00      	nop
 800512c:	3718      	adds	r7, #24
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b082      	sub	sp, #8
 8005136:	af00      	add	r7, sp, #0
 8005138:	4603      	mov	r3, r0
 800513a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800513c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005140:	4618      	mov	r0, r3
 8005142:	f7ff ff31 	bl	8004fa8 <__NVIC_EnableIRQ>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f7ff ffa2 	bl	80050a0 <SysTick_Config>
 800515c:	4603      	mov	r3, r0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005168:	b480      	push	{r7}
 800516a:	b089      	sub	sp, #36	; 0x24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005172:	2300      	movs	r3, #0
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005176:	2300      	movs	r3, #0
 8005178:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800517a:	2300      	movs	r3, #0
 800517c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800517e:	2300      	movs	r3, #0
 8005180:	61fb      	str	r3, [r7, #28]
 8005182:	e16b      	b.n	800545c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005184:	2201      	movs	r2, #1
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	fa02 f303 	lsl.w	r3, r2, r3
 800518c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	697a      	ldr	r2, [r7, #20]
 8005194:	4013      	ands	r3, r2
 8005196:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	429a      	cmp	r2, r3
 800519e:	f040 815a 	bne.w	8005456 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d00b      	beq.n	80051c2 <HAL_GPIO_Init+0x5a>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d007      	beq.n	80051c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80051b6:	2b11      	cmp	r3, #17
 80051b8:	d003      	beq.n	80051c2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2b12      	cmp	r3, #18
 80051c0:	d130      	bne.n	8005224 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	005b      	lsls	r3, r3, #1
 80051cc:	2203      	movs	r2, #3
 80051ce:	fa02 f303 	lsl.w	r3, r2, r3
 80051d2:	43db      	mvns	r3, r3
 80051d4:	69ba      	ldr	r2, [r7, #24]
 80051d6:	4013      	ands	r3, r2
 80051d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68da      	ldr	r2, [r3, #12]
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	fa02 f303 	lsl.w	r3, r2, r3
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80051f8:	2201      	movs	r2, #1
 80051fa:	69fb      	ldr	r3, [r7, #28]
 80051fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005200:	43db      	mvns	r3, r3
 8005202:	69ba      	ldr	r2, [r7, #24]
 8005204:	4013      	ands	r3, r2
 8005206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 0201 	and.w	r2, r3, #1
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	69ba      	ldr	r2, [r7, #24]
 8005222:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	2203      	movs	r2, #3
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	4013      	ands	r3, r2
 800523a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	689a      	ldr	r2, [r3, #8]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	fa02 f303 	lsl.w	r3, r2, r3
 8005248:	69ba      	ldr	r2, [r7, #24]
 800524a:	4313      	orrs	r3, r2
 800524c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	69ba      	ldr	r2, [r7, #24]
 8005252:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d003      	beq.n	8005264 <HAL_GPIO_Init+0xfc>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	2b12      	cmp	r3, #18
 8005262:	d123      	bne.n	80052ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005264:	69fb      	ldr	r3, [r7, #28]
 8005266:	08da      	lsrs	r2, r3, #3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	3208      	adds	r2, #8
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	f003 0307 	and.w	r3, r3, #7
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	220f      	movs	r2, #15
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	69ba      	ldr	r2, [r7, #24]
 8005284:	4013      	ands	r3, r2
 8005286:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	691a      	ldr	r2, [r3, #16]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	f003 0307 	and.w	r3, r3, #7
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	fa02 f303 	lsl.w	r3, r2, r3
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	4313      	orrs	r3, r2
 800529c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	08da      	lsrs	r2, r3, #3
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	3208      	adds	r2, #8
 80052a6:	69b9      	ldr	r1, [r7, #24]
 80052a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	2203      	movs	r2, #3
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	43db      	mvns	r3, r3
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	4013      	ands	r3, r2
 80052c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f003 0203 	and.w	r2, r3, #3
 80052cc:	69fb      	ldr	r3, [r7, #28]
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	fa02 f303 	lsl.w	r3, r2, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	69ba      	ldr	r2, [r7, #24]
 80052de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	f000 80b4 	beq.w	8005456 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	4b5f      	ldr	r3, [pc, #380]	; (8005470 <HAL_GPIO_Init+0x308>)
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	4a5e      	ldr	r2, [pc, #376]	; (8005470 <HAL_GPIO_Init+0x308>)
 80052f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fc:	6453      	str	r3, [r2, #68]	; 0x44
 80052fe:	4b5c      	ldr	r3, [pc, #368]	; (8005470 <HAL_GPIO_Init+0x308>)
 8005300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005306:	60fb      	str	r3, [r7, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800530a:	4a5a      	ldr	r2, [pc, #360]	; (8005474 <HAL_GPIO_Init+0x30c>)
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	089b      	lsrs	r3, r3, #2
 8005310:	3302      	adds	r3, #2
 8005312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	220f      	movs	r2, #15
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	43db      	mvns	r3, r3
 8005328:	69ba      	ldr	r2, [r7, #24]
 800532a:	4013      	ands	r3, r2
 800532c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a51      	ldr	r2, [pc, #324]	; (8005478 <HAL_GPIO_Init+0x310>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d02b      	beq.n	800538e <HAL_GPIO_Init+0x226>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a50      	ldr	r2, [pc, #320]	; (800547c <HAL_GPIO_Init+0x314>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d025      	beq.n	800538a <HAL_GPIO_Init+0x222>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a4f      	ldr	r2, [pc, #316]	; (8005480 <HAL_GPIO_Init+0x318>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d01f      	beq.n	8005386 <HAL_GPIO_Init+0x21e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a4e      	ldr	r2, [pc, #312]	; (8005484 <HAL_GPIO_Init+0x31c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d019      	beq.n	8005382 <HAL_GPIO_Init+0x21a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a4d      	ldr	r2, [pc, #308]	; (8005488 <HAL_GPIO_Init+0x320>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d013      	beq.n	800537e <HAL_GPIO_Init+0x216>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a4c      	ldr	r2, [pc, #304]	; (800548c <HAL_GPIO_Init+0x324>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d00d      	beq.n	800537a <HAL_GPIO_Init+0x212>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a4b      	ldr	r2, [pc, #300]	; (8005490 <HAL_GPIO_Init+0x328>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d007      	beq.n	8005376 <HAL_GPIO_Init+0x20e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a4a      	ldr	r2, [pc, #296]	; (8005494 <HAL_GPIO_Init+0x32c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d101      	bne.n	8005372 <HAL_GPIO_Init+0x20a>
 800536e:	2307      	movs	r3, #7
 8005370:	e00e      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005372:	2308      	movs	r3, #8
 8005374:	e00c      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005376:	2306      	movs	r3, #6
 8005378:	e00a      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800537a:	2305      	movs	r3, #5
 800537c:	e008      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800537e:	2304      	movs	r3, #4
 8005380:	e006      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005382:	2303      	movs	r3, #3
 8005384:	e004      	b.n	8005390 <HAL_GPIO_Init+0x228>
 8005386:	2302      	movs	r3, #2
 8005388:	e002      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800538a:	2301      	movs	r3, #1
 800538c:	e000      	b.n	8005390 <HAL_GPIO_Init+0x228>
 800538e:	2300      	movs	r3, #0
 8005390:	69fa      	ldr	r2, [r7, #28]
 8005392:	f002 0203 	and.w	r2, r2, #3
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	4093      	lsls	r3, r2
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	4313      	orrs	r3, r2
 800539e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053a0:	4934      	ldr	r1, [pc, #208]	; (8005474 <HAL_GPIO_Init+0x30c>)
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	089b      	lsrs	r3, r3, #2
 80053a6:	3302      	adds	r3, #2
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80053ae:	4b3a      	ldr	r3, [pc, #232]	; (8005498 <HAL_GPIO_Init+0x330>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	69ba      	ldr	r2, [r7, #24]
 80053ba:	4013      	ands	r3, r2
 80053bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d003      	beq.n	80053d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80053d2:	4a31      	ldr	r2, [pc, #196]	; (8005498 <HAL_GPIO_Init+0x330>)
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80053d8:	4b2f      	ldr	r3, [pc, #188]	; (8005498 <HAL_GPIO_Init+0x330>)
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	4013      	ands	r3, r2
 80053e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d003      	beq.n	80053fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	4313      	orrs	r3, r2
 80053fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80053fc:	4a26      	ldr	r2, [pc, #152]	; (8005498 <HAL_GPIO_Init+0x330>)
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005402:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_GPIO_Init+0x330>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	43db      	mvns	r3, r3
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	4013      	ands	r3, r2
 8005410:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800541e:	69ba      	ldr	r2, [r7, #24]
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005426:	4a1c      	ldr	r2, [pc, #112]	; (8005498 <HAL_GPIO_Init+0x330>)
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800542c:	4b1a      	ldr	r3, [pc, #104]	; (8005498 <HAL_GPIO_Init+0x330>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	43db      	mvns	r3, r3
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	4013      	ands	r3, r2
 800543a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005448:	69ba      	ldr	r2, [r7, #24]
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	4313      	orrs	r3, r2
 800544e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005450:	4a11      	ldr	r2, [pc, #68]	; (8005498 <HAL_GPIO_Init+0x330>)
 8005452:	69bb      	ldr	r3, [r7, #24]
 8005454:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	3301      	adds	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	69fb      	ldr	r3, [r7, #28]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	f67f ae90 	bls.w	8005184 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005464:	bf00      	nop
 8005466:	3724      	adds	r7, #36	; 0x24
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40023800 	.word	0x40023800
 8005474:	40013800 	.word	0x40013800
 8005478:	40020000 	.word	0x40020000
 800547c:	40020400 	.word	0x40020400
 8005480:	40020800 	.word	0x40020800
 8005484:	40020c00 	.word	0x40020c00
 8005488:	40021000 	.word	0x40021000
 800548c:	40021400 	.word	0x40021400
 8005490:	40021800 	.word	0x40021800
 8005494:	40021c00 	.word	0x40021c00
 8005498:	40013c00 	.word	0x40013c00

0800549c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	460b      	mov	r3, r1
 80054a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	691a      	ldr	r2, [r3, #16]
 80054ac:	887b      	ldrh	r3, [r7, #2]
 80054ae:	4013      	ands	r3, r2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
 80054b8:	e001      	b.n	80054be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80054ba:	2300      	movs	r3, #0
 80054bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80054be:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr

080054cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	460b      	mov	r3, r1
 80054d6:	807b      	strh	r3, [r7, #2]
 80054d8:	4613      	mov	r3, r2
 80054da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80054dc:	787b      	ldrb	r3, [r7, #1]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80054e2:	887a      	ldrh	r2, [r7, #2]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80054e8:	e003      	b.n	80054f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80054ea:	887b      	ldrh	r3, [r7, #2]
 80054ec:	041a      	lsls	r2, r3, #16
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	619a      	str	r2, [r3, #24]
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b082      	sub	sp, #8
 8005504:	af00      	add	r7, sp, #0
 8005506:	4603      	mov	r3, r0
 8005508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800550a:	4b08      	ldr	r3, [pc, #32]	; (800552c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800550c:	695a      	ldr	r2, [r3, #20]
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	4013      	ands	r3, r2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d006      	beq.n	8005524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005516:	4a05      	ldr	r2, [pc, #20]	; (800552c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005518:	88fb      	ldrh	r3, [r7, #6]
 800551a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800551c:	88fb      	ldrh	r3, [r7, #6]
 800551e:	4618      	mov	r0, r3
 8005520:	f7fe f8cc 	bl	80036bc <HAL_GPIO_EXTI_Callback>
  }
}
 8005524:	bf00      	nop
 8005526:	3708      	adds	r7, #8
 8005528:	46bd      	mov	sp, r7
 800552a:	bd80      	pop	{r7, pc}
 800552c:	40013c00 	.word	0x40013c00

08005530 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b086      	sub	sp, #24
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d101      	bne.n	8005542 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e25b      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d075      	beq.n	800563a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800554e:	4ba3      	ldr	r3, [pc, #652]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 030c 	and.w	r3, r3, #12
 8005556:	2b04      	cmp	r3, #4
 8005558:	d00c      	beq.n	8005574 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800555a:	4ba0      	ldr	r3, [pc, #640]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005562:	2b08      	cmp	r3, #8
 8005564:	d112      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005566:	4b9d      	ldr	r3, [pc, #628]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800556e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005572:	d10b      	bne.n	800558c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005574:	4b99      	ldr	r3, [pc, #612]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800557c:	2b00      	cmp	r3, #0
 800557e:	d05b      	beq.n	8005638 <HAL_RCC_OscConfig+0x108>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d157      	bne.n	8005638 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e236      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	d106      	bne.n	80055a4 <HAL_RCC_OscConfig+0x74>
 8005596:	4b91      	ldr	r3, [pc, #580]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a90      	ldr	r2, [pc, #576]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800559c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a0:	6013      	str	r3, [r2, #0]
 80055a2:	e01d      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055ac:	d10c      	bne.n	80055c8 <HAL_RCC_OscConfig+0x98>
 80055ae:	4b8b      	ldr	r3, [pc, #556]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a8a      	ldr	r2, [pc, #552]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055b8:	6013      	str	r3, [r2, #0]
 80055ba:	4b88      	ldr	r3, [pc, #544]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a87      	ldr	r2, [pc, #540]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055c4:	6013      	str	r3, [r2, #0]
 80055c6:	e00b      	b.n	80055e0 <HAL_RCC_OscConfig+0xb0>
 80055c8:	4b84      	ldr	r3, [pc, #528]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a83      	ldr	r2, [pc, #524]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	4b81      	ldr	r3, [pc, #516]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a80      	ldr	r2, [pc, #512]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80055da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d013      	beq.n	8005610 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e8:	f7ff fc7e 	bl	8004ee8 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f0:	f7ff fc7a 	bl	8004ee8 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b64      	cmp	r3, #100	; 0x64
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e1fb      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005602:	4b76      	ldr	r3, [pc, #472]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0xc0>
 800560e:	e014      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005610:	f7ff fc6a 	bl	8004ee8 <HAL_GetTick>
 8005614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005616:	e008      	b.n	800562a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005618:	f7ff fc66 	bl	8004ee8 <HAL_GetTick>
 800561c:	4602      	mov	r2, r0
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	2b64      	cmp	r3, #100	; 0x64
 8005624:	d901      	bls.n	800562a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005626:	2303      	movs	r3, #3
 8005628:	e1e7      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800562a:	4b6c      	ldr	r3, [pc, #432]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1f0      	bne.n	8005618 <HAL_RCC_OscConfig+0xe8>
 8005636:	e000      	b.n	800563a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d063      	beq.n	800570e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005646:	4b65      	ldr	r3, [pc, #404]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 030c 	and.w	r3, r3, #12
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00b      	beq.n	800566a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005652:	4b62      	ldr	r3, [pc, #392]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800565a:	2b08      	cmp	r3, #8
 800565c:	d11c      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565e:	4b5f      	ldr	r3, [pc, #380]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d116      	bne.n	8005698 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	4b5c      	ldr	r3, [pc, #368]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 0302 	and.w	r3, r3, #2
 8005672:	2b00      	cmp	r3, #0
 8005674:	d005      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	2b01      	cmp	r3, #1
 800567c:	d001      	beq.n	8005682 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e1bb      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005682:	4b56      	ldr	r3, [pc, #344]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	4952      	ldr	r1, [pc, #328]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005692:	4313      	orrs	r3, r2
 8005694:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005696:	e03a      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d020      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a0:	4b4f      	ldr	r3, [pc, #316]	; (80057e0 <HAL_RCC_OscConfig+0x2b0>)
 80056a2:	2201      	movs	r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056a6:	f7ff fc1f 	bl	8004ee8 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056ac:	e008      	b.n	80056c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056ae:	f7ff fc1b 	bl	8004ee8 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d901      	bls.n	80056c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056bc:	2303      	movs	r3, #3
 80056be:	e19c      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c0:	4b46      	ldr	r3, [pc, #280]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0f0      	beq.n	80056ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056cc:	4b43      	ldr	r3, [pc, #268]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4940      	ldr	r1, [pc, #256]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	600b      	str	r3, [r1, #0]
 80056e0:	e015      	b.n	800570e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056e2:	4b3f      	ldr	r3, [pc, #252]	; (80057e0 <HAL_RCC_OscConfig+0x2b0>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056e8:	f7ff fbfe 	bl	8004ee8 <HAL_GetTick>
 80056ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056ee:	e008      	b.n	8005702 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f0:	f7ff fbfa 	bl	8004ee8 <HAL_GetTick>
 80056f4:	4602      	mov	r2, r0
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d901      	bls.n	8005702 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056fe:	2303      	movs	r3, #3
 8005700:	e17b      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005702:	4b36      	ldr	r3, [pc, #216]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b00      	cmp	r3, #0
 800570c:	d1f0      	bne.n	80056f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0308 	and.w	r3, r3, #8
 8005716:	2b00      	cmp	r3, #0
 8005718:	d030      	beq.n	800577c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d016      	beq.n	8005750 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005722:	4b30      	ldr	r3, [pc, #192]	; (80057e4 <HAL_RCC_OscConfig+0x2b4>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005728:	f7ff fbde 	bl	8004ee8 <HAL_GetTick>
 800572c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005730:	f7ff fbda 	bl	8004ee8 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e15b      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005746:	f003 0302 	and.w	r3, r3, #2
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCC_OscConfig+0x200>
 800574e:	e015      	b.n	800577c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005750:	4b24      	ldr	r3, [pc, #144]	; (80057e4 <HAL_RCC_OscConfig+0x2b4>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005756:	f7ff fbc7 	bl	8004ee8 <HAL_GetTick>
 800575a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800575c:	e008      	b.n	8005770 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800575e:	f7ff fbc3 	bl	8004ee8 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e144      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005770:	4b1a      	ldr	r3, [pc, #104]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005774:	f003 0302 	and.w	r3, r3, #2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1f0      	bne.n	800575e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0304 	and.w	r3, r3, #4
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a0 	beq.w	80058ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800578a:	2300      	movs	r3, #0
 800578c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800578e:	4b13      	ldr	r3, [pc, #76]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10f      	bne.n	80057ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800579a:	2300      	movs	r3, #0
 800579c:	60bb      	str	r3, [r7, #8]
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6413      	str	r3, [r2, #64]	; 0x40
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	60bb      	str	r3, [r7, #8]
 80057b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057b6:	2301      	movs	r3, #1
 80057b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_RCC_OscConfig+0x2b8>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d121      	bne.n	800580a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057c6:	4b08      	ldr	r3, [pc, #32]	; (80057e8 <HAL_RCC_OscConfig+0x2b8>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a07      	ldr	r2, [pc, #28]	; (80057e8 <HAL_RCC_OscConfig+0x2b8>)
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d2:	f7ff fb89 	bl	8004ee8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057d8:	e011      	b.n	80057fe <HAL_RCC_OscConfig+0x2ce>
 80057da:	bf00      	nop
 80057dc:	40023800 	.word	0x40023800
 80057e0:	42470000 	.word	0x42470000
 80057e4:	42470e80 	.word	0x42470e80
 80057e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ec:	f7ff fb7c 	bl	8004ee8 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e0fd      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057fe:	4b81      	ldr	r3, [pc, #516]	; (8005a04 <HAL_RCC_OscConfig+0x4d4>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005806:	2b00      	cmp	r3, #0
 8005808:	d0f0      	beq.n	80057ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	2b01      	cmp	r3, #1
 8005810:	d106      	bne.n	8005820 <HAL_RCC_OscConfig+0x2f0>
 8005812:	4b7d      	ldr	r3, [pc, #500]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	4a7c      	ldr	r2, [pc, #496]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005818:	f043 0301 	orr.w	r3, r3, #1
 800581c:	6713      	str	r3, [r2, #112]	; 0x70
 800581e:	e01c      	b.n	800585a <HAL_RCC_OscConfig+0x32a>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	2b05      	cmp	r3, #5
 8005826:	d10c      	bne.n	8005842 <HAL_RCC_OscConfig+0x312>
 8005828:	4b77      	ldr	r3, [pc, #476]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 800582a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582c:	4a76      	ldr	r2, [pc, #472]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 800582e:	f043 0304 	orr.w	r3, r3, #4
 8005832:	6713      	str	r3, [r2, #112]	; 0x70
 8005834:	4b74      	ldr	r3, [pc, #464]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005838:	4a73      	ldr	r2, [pc, #460]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	6713      	str	r3, [r2, #112]	; 0x70
 8005840:	e00b      	b.n	800585a <HAL_RCC_OscConfig+0x32a>
 8005842:	4b71      	ldr	r3, [pc, #452]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005846:	4a70      	ldr	r2, [pc, #448]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005848:	f023 0301 	bic.w	r3, r3, #1
 800584c:	6713      	str	r3, [r2, #112]	; 0x70
 800584e:	4b6e      	ldr	r3, [pc, #440]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005852:	4a6d      	ldr	r2, [pc, #436]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d015      	beq.n	800588e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005862:	f7ff fb41 	bl	8004ee8 <HAL_GetTick>
 8005866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005868:	e00a      	b.n	8005880 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800586a:	f7ff fb3d 	bl	8004ee8 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	f241 3288 	movw	r2, #5000	; 0x1388
 8005878:	4293      	cmp	r3, r2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e0bc      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005880:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005884:	f003 0302 	and.w	r3, r3, #2
 8005888:	2b00      	cmp	r3, #0
 800588a:	d0ee      	beq.n	800586a <HAL_RCC_OscConfig+0x33a>
 800588c:	e014      	b.n	80058b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800588e:	f7ff fb2b 	bl	8004ee8 <HAL_GetTick>
 8005892:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005894:	e00a      	b.n	80058ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005896:	f7ff fb27 	bl	8004ee8 <HAL_GetTick>
 800589a:	4602      	mov	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d901      	bls.n	80058ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058a8:	2303      	movs	r3, #3
 80058aa:	e0a6      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058ac:	4b56      	ldr	r3, [pc, #344]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 80058ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d1ee      	bne.n	8005896 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058b8:	7dfb      	ldrb	r3, [r7, #23]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d105      	bne.n	80058ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058be:	4b52      	ldr	r3, [pc, #328]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	4a51      	ldr	r2, [pc, #324]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 80058c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	699b      	ldr	r3, [r3, #24]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8092 	beq.w	80059f8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058d4:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d05c      	beq.n	800599a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d141      	bne.n	800596c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e8:	4b48      	ldr	r3, [pc, #288]	; (8005a0c <HAL_RCC_OscConfig+0x4dc>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ee:	f7ff fafb 	bl	8004ee8 <HAL_GetTick>
 80058f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f4:	e008      	b.n	8005908 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f6:	f7ff faf7 	bl	8004ee8 <HAL_GetTick>
 80058fa:	4602      	mov	r2, r0
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	2b02      	cmp	r3, #2
 8005902:	d901      	bls.n	8005908 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005904:	2303      	movs	r3, #3
 8005906:	e078      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005908:	4b3f      	ldr	r3, [pc, #252]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1f0      	bne.n	80058f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69da      	ldr	r2, [r3, #28]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	019b      	lsls	r3, r3, #6
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800592a:	085b      	lsrs	r3, r3, #1
 800592c:	3b01      	subs	r3, #1
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005936:	061b      	lsls	r3, r3, #24
 8005938:	4933      	ldr	r1, [pc, #204]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 800593a:	4313      	orrs	r3, r2
 800593c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800593e:	4b33      	ldr	r3, [pc, #204]	; (8005a0c <HAL_RCC_OscConfig+0x4dc>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7ff fad0 	bl	8004ee8 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800594c:	f7ff facc 	bl	8004ee8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e04d      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800595e:	4b2a      	ldr	r3, [pc, #168]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0f0      	beq.n	800594c <HAL_RCC_OscConfig+0x41c>
 800596a:	e045      	b.n	80059f8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800596c:	4b27      	ldr	r3, [pc, #156]	; (8005a0c <HAL_RCC_OscConfig+0x4dc>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005972:	f7ff fab9 	bl	8004ee8 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800597a:	f7ff fab5 	bl	8004ee8 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e036      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800598c:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1f0      	bne.n	800597a <HAL_RCC_OscConfig+0x44a>
 8005998:	e02e      	b.n	80059f8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e029      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_RCC_OscConfig+0x4d8>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d11c      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d115      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059ce:	4013      	ands	r3, r2
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d10d      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d106      	bne.n	80059f4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d001      	beq.n	80059f8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e000      	b.n	80059fa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	40007000 	.word	0x40007000
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	42470060 	.word	0x42470060

08005a10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d101      	bne.n	8005a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0cc      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a24:	4b68      	ldr	r3, [pc, #416]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d90c      	bls.n	8005a4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a32:	4b65      	ldr	r3, [pc, #404]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a34:	683a      	ldr	r2, [r7, #0]
 8005a36:	b2d2      	uxtb	r2, r2
 8005a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 030f 	and.w	r3, r3, #15
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d001      	beq.n	8005a4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0b8      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d020      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a64:	4b59      	ldr	r3, [pc, #356]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	4a58      	ldr	r2, [pc, #352]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0308 	and.w	r3, r3, #8
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a7c:	4b53      	ldr	r3, [pc, #332]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a52      	ldr	r2, [pc, #328]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a88:	4b50      	ldr	r3, [pc, #320]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	494d      	ldr	r1, [pc, #308]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d044      	beq.n	8005b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d107      	bne.n	8005abe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aae:	4b47      	ldr	r3, [pc, #284]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d119      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e07f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d003      	beq.n	8005ace <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aca:	2b03      	cmp	r3, #3
 8005acc:	d107      	bne.n	8005ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ace:	4b3f      	ldr	r3, [pc, #252]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e06f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ade:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e067      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005aee:	4b37      	ldr	r3, [pc, #220]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f023 0203 	bic.w	r2, r3, #3
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	4934      	ldr	r1, [pc, #208]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b00:	f7ff f9f2 	bl	8004ee8 <HAL_GetTick>
 8005b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b06:	e00a      	b.n	8005b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b08:	f7ff f9ee 	bl	8004ee8 <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d901      	bls.n	8005b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e04f      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1e:	4b2b      	ldr	r3, [pc, #172]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 020c 	and.w	r2, r3, #12
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d1eb      	bne.n	8005b08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b30:	4b25      	ldr	r3, [pc, #148]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d20c      	bcs.n	8005b58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3e:	4b22      	ldr	r3, [pc, #136]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b40:	683a      	ldr	r2, [r7, #0]
 8005b42:	b2d2      	uxtb	r2, r2
 8005b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b46:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_RCC_ClockConfig+0x1b8>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	683a      	ldr	r2, [r7, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d001      	beq.n	8005b58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e032      	b.n	8005bbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0304 	and.w	r3, r3, #4
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b64:	4b19      	ldr	r3, [pc, #100]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	4916      	ldr	r1, [pc, #88]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b82:	4b12      	ldr	r3, [pc, #72]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	00db      	lsls	r3, r3, #3
 8005b90:	490e      	ldr	r1, [pc, #56]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b96:	f000 f821 	bl	8005bdc <HAL_RCC_GetSysClockFreq>
 8005b9a:	4601      	mov	r1, r0
 8005b9c:	4b0b      	ldr	r3, [pc, #44]	; (8005bcc <HAL_RCC_ClockConfig+0x1bc>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	091b      	lsrs	r3, r3, #4
 8005ba2:	f003 030f 	and.w	r3, r3, #15
 8005ba6:	4a0a      	ldr	r2, [pc, #40]	; (8005bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8005ba8:	5cd3      	ldrb	r3, [r2, r3]
 8005baa:	fa21 f303 	lsr.w	r3, r1, r3
 8005bae:	4a09      	ldr	r2, [pc, #36]	; (8005bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8005bb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f7ff f952 	bl	8004e60 <HAL_InitTick>

  return HAL_OK;
 8005bbc:	2300      	movs	r3, #0
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3710      	adds	r7, #16
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	40023c00 	.word	0x40023c00
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	080090ac 	.word	0x080090ac
 8005bd4:	20000010 	.word	0x20000010
 8005bd8:	20000014 	.word	0x20000014

08005bdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	2300      	movs	r3, #0
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	2300      	movs	r3, #0
 8005bec:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bf2:	4b63      	ldr	r3, [pc, #396]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f003 030c 	and.w	r3, r3, #12
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d007      	beq.n	8005c0e <HAL_RCC_GetSysClockFreq+0x32>
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d008      	beq.n	8005c14 <HAL_RCC_GetSysClockFreq+0x38>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f040 80b4 	bne.w	8005d70 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c08:	4b5e      	ldr	r3, [pc, #376]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c0a:	60bb      	str	r3, [r7, #8]
       break;
 8005c0c:	e0b3      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c0e:	4b5d      	ldr	r3, [pc, #372]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005c10:	60bb      	str	r3, [r7, #8]
      break;
 8005c12:	e0b0      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c14:	4b5a      	ldr	r3, [pc, #360]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c1c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c1e:	4b58      	ldr	r3, [pc, #352]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d04a      	beq.n	8005cc0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c2a:	4b55      	ldr	r3, [pc, #340]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	099b      	lsrs	r3, r3, #6
 8005c30:	f04f 0400 	mov.w	r4, #0
 8005c34:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	ea03 0501 	and.w	r5, r3, r1
 8005c40:	ea04 0602 	and.w	r6, r4, r2
 8005c44:	4629      	mov	r1, r5
 8005c46:	4632      	mov	r2, r6
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	f04f 0400 	mov.w	r4, #0
 8005c50:	0154      	lsls	r4, r2, #5
 8005c52:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005c56:	014b      	lsls	r3, r1, #5
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4622      	mov	r2, r4
 8005c5c:	1b49      	subs	r1, r1, r5
 8005c5e:	eb62 0206 	sbc.w	r2, r2, r6
 8005c62:	f04f 0300 	mov.w	r3, #0
 8005c66:	f04f 0400 	mov.w	r4, #0
 8005c6a:	0194      	lsls	r4, r2, #6
 8005c6c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005c70:	018b      	lsls	r3, r1, #6
 8005c72:	1a5b      	subs	r3, r3, r1
 8005c74:	eb64 0402 	sbc.w	r4, r4, r2
 8005c78:	f04f 0100 	mov.w	r1, #0
 8005c7c:	f04f 0200 	mov.w	r2, #0
 8005c80:	00e2      	lsls	r2, r4, #3
 8005c82:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005c86:	00d9      	lsls	r1, r3, #3
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4614      	mov	r4, r2
 8005c8c:	195b      	adds	r3, r3, r5
 8005c8e:	eb44 0406 	adc.w	r4, r4, r6
 8005c92:	f04f 0100 	mov.w	r1, #0
 8005c96:	f04f 0200 	mov.w	r2, #0
 8005c9a:	02a2      	lsls	r2, r4, #10
 8005c9c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005ca0:	0299      	lsls	r1, r3, #10
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	4614      	mov	r4, r2
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	4621      	mov	r1, r4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f04f 0400 	mov.w	r4, #0
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	f7fa ffe8 	bl	8000c88 <__aeabi_uldivmod>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	460c      	mov	r4, r1
 8005cbc:	60fb      	str	r3, [r7, #12]
 8005cbe:	e049      	b.n	8005d54 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005cc0:	4b2f      	ldr	r3, [pc, #188]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	099b      	lsrs	r3, r3, #6
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	ea03 0501 	and.w	r5, r3, r1
 8005cd6:	ea04 0602 	and.w	r6, r4, r2
 8005cda:	4629      	mov	r1, r5
 8005cdc:	4632      	mov	r2, r6
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	f04f 0400 	mov.w	r4, #0
 8005ce6:	0154      	lsls	r4, r2, #5
 8005ce8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005cec:	014b      	lsls	r3, r1, #5
 8005cee:	4619      	mov	r1, r3
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	1b49      	subs	r1, r1, r5
 8005cf4:	eb62 0206 	sbc.w	r2, r2, r6
 8005cf8:	f04f 0300 	mov.w	r3, #0
 8005cfc:	f04f 0400 	mov.w	r4, #0
 8005d00:	0194      	lsls	r4, r2, #6
 8005d02:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005d06:	018b      	lsls	r3, r1, #6
 8005d08:	1a5b      	subs	r3, r3, r1
 8005d0a:	eb64 0402 	sbc.w	r4, r4, r2
 8005d0e:	f04f 0100 	mov.w	r1, #0
 8005d12:	f04f 0200 	mov.w	r2, #0
 8005d16:	00e2      	lsls	r2, r4, #3
 8005d18:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005d1c:	00d9      	lsls	r1, r3, #3
 8005d1e:	460b      	mov	r3, r1
 8005d20:	4614      	mov	r4, r2
 8005d22:	195b      	adds	r3, r3, r5
 8005d24:	eb44 0406 	adc.w	r4, r4, r6
 8005d28:	f04f 0100 	mov.w	r1, #0
 8005d2c:	f04f 0200 	mov.w	r2, #0
 8005d30:	02a2      	lsls	r2, r4, #10
 8005d32:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005d36:	0299      	lsls	r1, r3, #10
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4614      	mov	r4, r2
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	4621      	mov	r1, r4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f04f 0400 	mov.w	r4, #0
 8005d46:	461a      	mov	r2, r3
 8005d48:	4623      	mov	r3, r4
 8005d4a:	f7fa ff9d 	bl	8000c88 <__aeabi_uldivmod>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d54:	4b0a      	ldr	r3, [pc, #40]	; (8005d80 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	3301      	adds	r3, #1
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6c:	60bb      	str	r3, [r7, #8]
      break;
 8005d6e:	e002      	b.n	8005d76 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005d72:	60bb      	str	r3, [r7, #8]
      break;
 8005d74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d76:	68bb      	ldr	r3, [r7, #8]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d80:	40023800 	.word	0x40023800
 8005d84:	00f42400 	.word	0x00f42400

08005d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d8c:	4b03      	ldr	r3, [pc, #12]	; (8005d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	20000010 	.word	0x20000010

08005da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005da4:	f7ff fff0 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005da8:	4601      	mov	r1, r0
 8005daa:	4b05      	ldr	r3, [pc, #20]	; (8005dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	0a9b      	lsrs	r3, r3, #10
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	4a03      	ldr	r2, [pc, #12]	; (8005dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005db6:	5cd3      	ldrb	r3, [r2, r3]
 8005db8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	40023800 	.word	0x40023800
 8005dc4:	080090bc 	.word	0x080090bc

08005dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005dcc:	f7ff ffdc 	bl	8005d88 <HAL_RCC_GetHCLKFreq>
 8005dd0:	4601      	mov	r1, r0
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0b5b      	lsrs	r3, r3, #13
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	4a03      	ldr	r2, [pc, #12]	; (8005dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dde:	5cd3      	ldrb	r3, [r2, r3]
 8005de0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40023800 	.word	0x40023800
 8005dec:	080090bc 	.word	0x080090bc

08005df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d101      	bne.n	8005e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e056      	b.n	8005eb0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fe fab9 	bl	8004394 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e38:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685a      	ldr	r2, [r3, #4]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	431a      	orrs	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e5e:	431a      	orrs	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	69db      	ldr	r3, [r3, #28]
 8005e64:	431a      	orrs	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	ea42 0103 	orr.w	r1, r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	430a      	orrs	r2, r1
 8005e78:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	0c1b      	lsrs	r3, r3, #16
 8005e80:	f003 0104 	and.w	r1, r3, #4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	69da      	ldr	r2, [r3, #28]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e9e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3708      	adds	r7, #8
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	603b      	str	r3, [r7, #0]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d101      	bne.n	8005eda <HAL_SPI_Transmit+0x22>
 8005ed6:	2302      	movs	r3, #2
 8005ed8:	e11e      	b.n	8006118 <HAL_SPI_Transmit+0x260>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ee2:	f7ff f801 	bl	8004ee8 <HAL_GetTick>
 8005ee6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ee8:	88fb      	ldrh	r3, [r7, #6]
 8005eea:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d002      	beq.n	8005efe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005ef8:	2302      	movs	r3, #2
 8005efa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005efc:	e103      	b.n	8006106 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_SPI_Transmit+0x52>
 8005f04:	88fb      	ldrh	r3, [r7, #6]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d102      	bne.n	8005f10 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005f0a:	2301      	movs	r3, #1
 8005f0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005f0e:	e0fa      	b.n	8006106 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2203      	movs	r2, #3
 8005f14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	88fa      	ldrh	r2, [r7, #6]
 8005f28:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	88fa      	ldrh	r2, [r7, #6]
 8005f2e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2200      	movs	r2, #0
 8005f46:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f56:	d107      	bne.n	8005f68 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f66:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b40      	cmp	r3, #64	; 0x40
 8005f74:	d007      	beq.n	8005f86 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8e:	d14b      	bne.n	8006028 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d002      	beq.n	8005f9e <HAL_SPI_Transmit+0xe6>
 8005f98:	8afb      	ldrh	r3, [r7, #22]
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d13e      	bne.n	800601c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa2:	881a      	ldrh	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	1c9a      	adds	r2, r3, #2
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fc2:	e02b      	b.n	800601c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	d112      	bne.n	8005ff8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd6:	881a      	ldrh	r2, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	1c9a      	adds	r2, r3, #2
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	b29a      	uxth	r2, r3
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	86da      	strh	r2, [r3, #54]	; 0x36
 8005ff6:	e011      	b.n	800601c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ff8:	f7fe ff76 	bl	8004ee8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	683a      	ldr	r2, [r7, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d803      	bhi.n	8006010 <HAL_SPI_Transmit+0x158>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600e:	d102      	bne.n	8006016 <HAL_SPI_Transmit+0x15e>
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d102      	bne.n	800601c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	77fb      	strb	r3, [r7, #31]
          goto error;
 800601a:	e074      	b.n	8006106 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006020:	b29b      	uxth	r3, r3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1ce      	bne.n	8005fc4 <HAL_SPI_Transmit+0x10c>
 8006026:	e04c      	b.n	80060c2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d002      	beq.n	8006036 <HAL_SPI_Transmit+0x17e>
 8006030:	8afb      	ldrh	r3, [r7, #22]
 8006032:	2b01      	cmp	r3, #1
 8006034:	d140      	bne.n	80060b8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800605c:	e02c      	b.n	80060b8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f003 0302 	and.w	r3, r3, #2
 8006068:	2b02      	cmp	r3, #2
 800606a:	d113      	bne.n	8006094 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	330c      	adds	r3, #12
 8006076:	7812      	ldrb	r2, [r2, #0]
 8006078:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607e:	1c5a      	adds	r2, r3, #1
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006088:	b29b      	uxth	r3, r3
 800608a:	3b01      	subs	r3, #1
 800608c:	b29a      	uxth	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	86da      	strh	r2, [r3, #54]	; 0x36
 8006092:	e011      	b.n	80060b8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006094:	f7fe ff28 	bl	8004ee8 <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	683a      	ldr	r2, [r7, #0]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d803      	bhi.n	80060ac <HAL_SPI_Transmit+0x1f4>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060aa:	d102      	bne.n	80060b2 <HAL_SPI_Transmit+0x1fa>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d102      	bne.n	80060b8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80060b6:	e026      	b.n	8006106 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80060bc:	b29b      	uxth	r3, r3
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1cd      	bne.n	800605e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060c2:	69ba      	ldr	r2, [r7, #24]
 80060c4:	6839      	ldr	r1, [r7, #0]
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f000 fba4 	bl	8006814 <SPI_EndRxTxTransaction>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2220      	movs	r2, #32
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68db      	ldr	r3, [r3, #12]
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e000      	b.n	8006106 <HAL_SPI_Transmit+0x24e>
  }

error:
 8006104:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2201      	movs	r2, #1
 800610a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006116:	7ffb      	ldrb	r3, [r7, #31]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3720      	adds	r7, #32
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b088      	sub	sp, #32
 8006124:	af02      	add	r7, sp, #8
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	603b      	str	r3, [r7, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800613c:	d112      	bne.n	8006164 <HAL_SPI_Receive+0x44>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	689b      	ldr	r3, [r3, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10e      	bne.n	8006164 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2204      	movs	r2, #4
 800614a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800614e:	88fa      	ldrh	r2, [r7, #6]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	4613      	mov	r3, r2
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f8e9 	bl	8006332 <HAL_SPI_TransmitReceive>
 8006160:	4603      	mov	r3, r0
 8006162:	e0e2      	b.n	800632a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_SPI_Receive+0x52>
 800616e:	2302      	movs	r3, #2
 8006170:	e0db      	b.n	800632a <HAL_SPI_Receive+0x20a>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800617a:	f7fe feb5 	bl	8004ee8 <HAL_GetTick>
 800617e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	d002      	beq.n	8006192 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800618c:	2302      	movs	r3, #2
 800618e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006190:	e0c2      	b.n	8006318 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <HAL_SPI_Receive+0x7e>
 8006198:	88fb      	ldrh	r3, [r7, #6]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061a2:	e0b9      	b.n	8006318 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2204      	movs	r2, #4
 80061a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	88fa      	ldrh	r2, [r7, #6]
 80061bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	88fa      	ldrh	r2, [r7, #6]
 80061c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2200      	movs	r2, #0
 80061c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2200      	movs	r2, #0
 80061ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2200      	movs	r2, #0
 80061d4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ea:	d107      	bne.n	80061fc <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80061fa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006206:	2b40      	cmp	r3, #64	; 0x40
 8006208:	d007      	beq.n	800621a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006218:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d162      	bne.n	80062e8 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006222:	e02e      	b.n	8006282 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	2b01      	cmp	r3, #1
 8006230:	d115      	bne.n	800625e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f103 020c 	add.w	r2, r3, #12
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800623e:	7812      	ldrb	r2, [r2, #0]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	1c5a      	adds	r2, r3, #1
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006252:	b29b      	uxth	r3, r3
 8006254:	3b01      	subs	r3, #1
 8006256:	b29a      	uxth	r2, r3
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800625c:	e011      	b.n	8006282 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800625e:	f7fe fe43 	bl	8004ee8 <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	429a      	cmp	r2, r3
 800626c:	d803      	bhi.n	8006276 <HAL_SPI_Receive+0x156>
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006274:	d102      	bne.n	800627c <HAL_SPI_Receive+0x15c>
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d102      	bne.n	8006282 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800627c:	2303      	movs	r3, #3
 800627e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006280:	e04a      	b.n	8006318 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006286:	b29b      	uxth	r3, r3
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1cb      	bne.n	8006224 <HAL_SPI_Receive+0x104>
 800628c:	e031      	b.n	80062f2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b01      	cmp	r3, #1
 800629a:	d113      	bne.n	80062c4 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a6:	b292      	uxth	r2, r2
 80062a8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	1c9a      	adds	r2, r3, #2
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062b8:	b29b      	uxth	r3, r3
 80062ba:	3b01      	subs	r3, #1
 80062bc:	b29a      	uxth	r2, r3
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80062c2:	e011      	b.n	80062e8 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062c4:	f7fe fe10 	bl	8004ee8 <HAL_GetTick>
 80062c8:	4602      	mov	r2, r0
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d803      	bhi.n	80062dc <HAL_SPI_Receive+0x1bc>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062da:	d102      	bne.n	80062e2 <HAL_SPI_Receive+0x1c2>
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d102      	bne.n	80062e8 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80062e2:	2303      	movs	r3, #3
 80062e4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80062e6:	e017      	b.n	8006318 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d1cd      	bne.n	800628e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	6839      	ldr	r1, [r7, #0]
 80062f6:	68f8      	ldr	r0, [r7, #12]
 80062f8:	f000 fa27 	bl	800674a <SPI_EndRxTransaction>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d002      	beq.n	8006308 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2220      	movs	r2, #32
 8006306:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630c:	2b00      	cmp	r3, #0
 800630e:	d002      	beq.n	8006316 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	75fb      	strb	r3, [r7, #23]
 8006314:	e000      	b.n	8006318 <HAL_SPI_Receive+0x1f8>
  }

error :
 8006316:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b08c      	sub	sp, #48	; 0x30
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
 800633e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006340:	2301      	movs	r3, #1
 8006342:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_SPI_TransmitReceive+0x26>
 8006354:	2302      	movs	r3, #2
 8006356:	e18a      	b.n	800666e <HAL_SPI_TransmitReceive+0x33c>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006360:	f7fe fdc2 	bl	8004ee8 <HAL_GetTick>
 8006364:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800636c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800637a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800637e:	2b01      	cmp	r3, #1
 8006380:	d00f      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x70>
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006388:	d107      	bne.n	800639a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d103      	bne.n	800639a <HAL_SPI_TransmitReceive+0x68>
 8006392:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006396:	2b04      	cmp	r3, #4
 8006398:	d003      	beq.n	80063a2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800639a:	2302      	movs	r3, #2
 800639c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063a0:	e15b      	b.n	800665a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d005      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x82>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <HAL_SPI_TransmitReceive+0x82>
 80063ae:	887b      	ldrh	r3, [r7, #2]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d103      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80063ba:	e14e      	b.n	800665a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b04      	cmp	r3, #4
 80063c6:	d003      	beq.n	80063d0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2205      	movs	r2, #5
 80063cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	887a      	ldrh	r2, [r7, #2]
 80063e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	887a      	ldrh	r2, [r7, #2]
 80063e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	887a      	ldrh	r2, [r7, #2]
 80063f2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	887a      	ldrh	r2, [r7, #2]
 80063f8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b40      	cmp	r3, #64	; 0x40
 8006412:	d007      	beq.n	8006424 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006422:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800642c:	d178      	bne.n	8006520 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <HAL_SPI_TransmitReceive+0x10a>
 8006436:	8b7b      	ldrh	r3, [r7, #26]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d166      	bne.n	800650a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	881a      	ldrh	r2, [r3, #0]
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800644c:	1c9a      	adds	r2, r3, #2
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006456:	b29b      	uxth	r3, r3
 8006458:	3b01      	subs	r3, #1
 800645a:	b29a      	uxth	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006460:	e053      	b.n	800650a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f003 0302 	and.w	r3, r3, #2
 800646c:	2b02      	cmp	r3, #2
 800646e:	d11b      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x176>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d016      	beq.n	80064a8 <HAL_SPI_TransmitReceive+0x176>
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	2b01      	cmp	r3, #1
 800647e:	d113      	bne.n	80064a8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006484:	881a      	ldrh	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	1c9a      	adds	r2, r3, #2
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800649a:	b29b      	uxth	r3, r3
 800649c:	3b01      	subs	r3, #1
 800649e:	b29a      	uxth	r2, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d119      	bne.n	80064ea <HAL_SPI_TransmitReceive+0x1b8>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d014      	beq.n	80064ea <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064ca:	b292      	uxth	r2, r2
 80064cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d2:	1c9a      	adds	r2, r3, #2
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064dc:	b29b      	uxth	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064e6:	2301      	movs	r3, #1
 80064e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064ea:	f7fe fcfd 	bl	8004ee8 <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d807      	bhi.n	800650a <HAL_SPI_TransmitReceive+0x1d8>
 80064fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d003      	beq.n	800650a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006508:	e0a7      	b.n	800665a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1a6      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x130>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006518:	b29b      	uxth	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1a1      	bne.n	8006462 <HAL_SPI_TransmitReceive+0x130>
 800651e:	e07c      	b.n	800661a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_SPI_TransmitReceive+0x1fc>
 8006528:	8b7b      	ldrh	r3, [r7, #26]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d16b      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	330c      	adds	r3, #12
 8006538:	7812      	ldrb	r2, [r2, #0]
 800653a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800654a:	b29b      	uxth	r3, r3
 800654c:	3b01      	subs	r3, #1
 800654e:	b29a      	uxth	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006554:	e057      	b.n	8006606 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b02      	cmp	r3, #2
 8006562:	d11c      	bne.n	800659e <HAL_SPI_TransmitReceive+0x26c>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d017      	beq.n	800659e <HAL_SPI_TransmitReceive+0x26c>
 800656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006570:	2b01      	cmp	r3, #1
 8006572:	d114      	bne.n	800659e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	7812      	ldrb	r2, [r2, #0]
 8006580:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006590:	b29b      	uxth	r3, r3
 8006592:	3b01      	subs	r3, #1
 8006594:	b29a      	uxth	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800659a:	2300      	movs	r3, #0
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	f003 0301 	and.w	r3, r3, #1
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d119      	bne.n	80065e0 <HAL_SPI_TransmitReceive+0x2ae>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d014      	beq.n	80065e0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	68da      	ldr	r2, [r3, #12]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c8:	1c5a      	adds	r2, r3, #1
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065d2:	b29b      	uxth	r3, r3
 80065d4:	3b01      	subs	r3, #1
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065dc:	2301      	movs	r3, #1
 80065de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065e0:	f7fe fc82 	bl	8004ee8 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d803      	bhi.n	80065f8 <HAL_SPI_TransmitReceive+0x2c6>
 80065f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065f6:	d102      	bne.n	80065fe <HAL_SPI_TransmitReceive+0x2cc>
 80065f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80065fe:	2303      	movs	r3, #3
 8006600:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006604:	e029      	b.n	800665a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d1a2      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x224>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006614:	b29b      	uxth	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d19d      	bne.n	8006556 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800661a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800661c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800661e:	68f8      	ldr	r0, [r7, #12]
 8006620:	f000 f8f8 	bl	8006814 <SPI_EndRxTxTransaction>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d006      	beq.n	8006638 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2220      	movs	r2, #32
 8006634:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006636:	e010      	b.n	800665a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006640:	2300      	movs	r3, #0
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68db      	ldr	r3, [r3, #12]
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	617b      	str	r3, [r7, #20]
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	e000      	b.n	800665a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006658:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800666a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800666e:	4618      	mov	r0, r3
 8006670:	3730      	adds	r7, #48	; 0x30
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	603b      	str	r3, [r7, #0]
 8006682:	4613      	mov	r3, r2
 8006684:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006686:	e04c      	b.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668e:	d048      	beq.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006690:	f7fe fc2a 	bl	8004ee8 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	683a      	ldr	r2, [r7, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d902      	bls.n	80066a6 <SPI_WaitFlagStateUntilTimeout+0x30>
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13d      	bne.n	8006722 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80066b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066be:	d111      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c8:	d004      	beq.n	80066d4 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066d2:	d107      	bne.n	80066e4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ec:	d10f      	bne.n	800670e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066fc:	601a      	str	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800670c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2200      	movs	r2, #0
 800671a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e00f      	b.n	8006742 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	689a      	ldr	r2, [r3, #8]
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	4013      	ands	r3, r2
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	429a      	cmp	r2, r3
 8006730:	bf0c      	ite	eq
 8006732:	2301      	moveq	r3, #1
 8006734:	2300      	movne	r3, #0
 8006736:	b2db      	uxtb	r3, r3
 8006738:	461a      	mov	r2, r3
 800673a:	79fb      	ldrb	r3, [r7, #7]
 800673c:	429a      	cmp	r2, r3
 800673e:	d1a3      	bne.n	8006688 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af02      	add	r7, sp, #8
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800675e:	d111      	bne.n	8006784 <SPI_EndRxTransaction+0x3a>
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006768:	d004      	beq.n	8006774 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006772:	d107      	bne.n	8006784 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006782:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678c:	d12a      	bne.n	80067e4 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006796:	d012      	beq.n	80067be <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2200      	movs	r2, #0
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f7ff ff67 	bl	8006676 <SPI_WaitFlagStateUntilTimeout>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d02d      	beq.n	800680a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b2:	f043 0220 	orr.w	r2, r3, #32
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e026      	b.n	800680c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	2200      	movs	r2, #0
 80067c6:	2101      	movs	r1, #1
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f7ff ff54 	bl	8006676 <SPI_WaitFlagStateUntilTimeout>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d01a      	beq.n	800680a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d8:	f043 0220 	orr.w	r2, r3, #32
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e013      	b.n	800680c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	2200      	movs	r2, #0
 80067ec:	2101      	movs	r1, #1
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f7ff ff41 	bl	8006676 <SPI_WaitFlagStateUntilTimeout>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067fe:	f043 0220 	orr.w	r2, r3, #32
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006806:	2303      	movs	r3, #3
 8006808:	e000      	b.n	800680c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800680a:	2300      	movs	r3, #0
}
 800680c:	4618      	mov	r0, r3
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b088      	sub	sp, #32
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006820:	4b1b      	ldr	r3, [pc, #108]	; (8006890 <SPI_EndRxTxTransaction+0x7c>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a1b      	ldr	r2, [pc, #108]	; (8006894 <SPI_EndRxTxTransaction+0x80>)
 8006826:	fba2 2303 	umull	r2, r3, r2, r3
 800682a:	0d5b      	lsrs	r3, r3, #21
 800682c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006830:	fb02 f303 	mul.w	r3, r2, r3
 8006834:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683e:	d112      	bne.n	8006866 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	2200      	movs	r2, #0
 8006848:	2180      	movs	r1, #128	; 0x80
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	f7ff ff13 	bl	8006676 <SPI_WaitFlagStateUntilTimeout>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d016      	beq.n	8006884 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685a:	f043 0220 	orr.w	r2, r3, #32
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e00f      	b.n	8006886 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00a      	beq.n	8006882 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	3b01      	subs	r3, #1
 8006870:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800687c:	2b80      	cmp	r3, #128	; 0x80
 800687e:	d0f2      	beq.n	8006866 <SPI_EndRxTxTransaction+0x52>
 8006880:	e000      	b.n	8006884 <SPI_EndRxTxTransaction+0x70>
        break;
 8006882:	bf00      	nop
  }

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	20000010 	.word	0x20000010
 8006894:	165e9f81 	.word	0x165e9f81

08006898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d101      	bne.n	80068aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	e01d      	b.n	80068e6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d106      	bne.n	80068c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f7fe f8f4 	bl	8004aac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2202      	movs	r2, #2
 80068c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	3304      	adds	r3, #4
 80068d4:	4619      	mov	r1, r3
 80068d6:	4610      	mov	r0, r2
 80068d8:	f000 fb4e 	bl	8006f78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3708      	adds	r7, #8
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2b06      	cmp	r3, #6
 8006916:	d007      	beq.n	8006928 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0201 	orr.w	r2, r2, #1
 8006926:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006928:	2300      	movs	r3, #0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3714      	adds	r7, #20
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr

08006936 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d101      	bne.n	8006948 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e01d      	b.n	8006984 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d106      	bne.n	8006962 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f815 	bl	800698c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	3304      	adds	r3, #4
 8006972:	4619      	mov	r1, r3
 8006974:	4610      	mov	r0, r2
 8006976:	f000 faff 	bl	8006f78 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3708      	adds	r7, #8
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2201      	movs	r2, #1
 80069b0:	6839      	ldr	r1, [r7, #0]
 80069b2:	4618      	mov	r0, r3
 80069b4:	f000 fdca 	bl	800754c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a15      	ldr	r2, [pc, #84]	; (8006a14 <HAL_TIM_PWM_Start+0x74>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d004      	beq.n	80069cc <HAL_TIM_PWM_Start+0x2c>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4a14      	ldr	r2, [pc, #80]	; (8006a18 <HAL_TIM_PWM_Start+0x78>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d101      	bne.n	80069d0 <HAL_TIM_PWM_Start+0x30>
 80069cc:	2301      	movs	r3, #1
 80069ce:	e000      	b.n	80069d2 <HAL_TIM_PWM_Start+0x32>
 80069d0:	2300      	movs	r3, #0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f003 0307 	and.w	r3, r3, #7
 80069f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2b06      	cmp	r3, #6
 80069f6:	d007      	beq.n	8006a08 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0201 	orr.w	r2, r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40010000 	.word	0x40010000
 8006a18:	40010400 	.word	0x40010400

08006a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b082      	sub	sp, #8
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d122      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0302 	and.w	r3, r3, #2
 8006a3c:	2b02      	cmp	r3, #2
 8006a3e:	d11b      	bne.n	8006a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f06f 0202 	mvn.w	r2, #2
 8006a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	f003 0303 	and.w	r3, r3, #3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f000 fa6b 	bl	8006f3a <HAL_TIM_IC_CaptureCallback>
 8006a64:	e005      	b.n	8006a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fa5d 	bl	8006f26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 fa6e 	bl	8006f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d122      	bne.n	8006acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d11b      	bne.n	8006acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f06f 0204 	mvn.w	r2, #4
 8006a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d003      	beq.n	8006aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	f000 fa41 	bl	8006f3a <HAL_TIM_IC_CaptureCallback>
 8006ab8:	e005      	b.n	8006ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa33 	bl	8006f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 fa44 	bl	8006f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f003 0308 	and.w	r3, r3, #8
 8006ad6:	2b08      	cmp	r3, #8
 8006ad8:	d122      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	f003 0308 	and.w	r3, r3, #8
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d11b      	bne.n	8006b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0208 	mvn.w	r2, #8
 8006af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2204      	movs	r2, #4
 8006af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	69db      	ldr	r3, [r3, #28]
 8006afe:	f003 0303 	and.w	r3, r3, #3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d003      	beq.n	8006b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f000 fa17 	bl	8006f3a <HAL_TIM_IC_CaptureCallback>
 8006b0c:	e005      	b.n	8006b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fa09 	bl	8006f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 fa1a 	bl	8006f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	f003 0310 	and.w	r3, r3, #16
 8006b2a:	2b10      	cmp	r3, #16
 8006b2c:	d122      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b10      	cmp	r3, #16
 8006b3a:	d11b      	bne.n	8006b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f06f 0210 	mvn.w	r2, #16
 8006b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d003      	beq.n	8006b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 f9ed 	bl	8006f3a <HAL_TIM_IC_CaptureCallback>
 8006b60:	e005      	b.n	8006b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f000 f9df 	bl	8006f26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f9f0 	bl	8006f4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	691b      	ldr	r3, [r3, #16]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10e      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d107      	bne.n	8006ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f06f 0201 	mvn.w	r2, #1
 8006b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fc fe06 	bl	80037ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	691b      	ldr	r3, [r3, #16]
 8006ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d10e      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb8:	2b80      	cmp	r3, #128	; 0x80
 8006bba:	d107      	bne.n	8006bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f000 fdbe 	bl	8007748 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd6:	2b40      	cmp	r3, #64	; 0x40
 8006bd8:	d10e      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be4:	2b40      	cmp	r3, #64	; 0x40
 8006be6:	d107      	bne.n	8006bf8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f9b5 	bl	8006f62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	f003 0320 	and.w	r3, r3, #32
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d10e      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	f003 0320 	and.w	r3, r3, #32
 8006c10:	2b20      	cmp	r3, #32
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f06f 0220 	mvn.w	r2, #32
 8006c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 fd88 	bl	8007734 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d101      	bne.n	8006c46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006c42:	2302      	movs	r3, #2
 8006c44:	e0b4      	b.n	8006db0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2b0c      	cmp	r3, #12
 8006c5a:	f200 809f 	bhi.w	8006d9c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006c5e:	a201      	add	r2, pc, #4	; (adr r2, 8006c64 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c64:	08006c99 	.word	0x08006c99
 8006c68:	08006d9d 	.word	0x08006d9d
 8006c6c:	08006d9d 	.word	0x08006d9d
 8006c70:	08006d9d 	.word	0x08006d9d
 8006c74:	08006cd9 	.word	0x08006cd9
 8006c78:	08006d9d 	.word	0x08006d9d
 8006c7c:	08006d9d 	.word	0x08006d9d
 8006c80:	08006d9d 	.word	0x08006d9d
 8006c84:	08006d1b 	.word	0x08006d1b
 8006c88:	08006d9d 	.word	0x08006d9d
 8006c8c:	08006d9d 	.word	0x08006d9d
 8006c90:	08006d9d 	.word	0x08006d9d
 8006c94:	08006d5b 	.word	0x08006d5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	68b9      	ldr	r1, [r7, #8]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fa0a 	bl	80070b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	699a      	ldr	r2, [r3, #24]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0208 	orr.w	r2, r2, #8
 8006cb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699a      	ldr	r2, [r3, #24]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0204 	bic.w	r2, r2, #4
 8006cc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	6999      	ldr	r1, [r3, #24]
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	691a      	ldr	r2, [r3, #16]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	619a      	str	r2, [r3, #24]
      break;
 8006cd6:	e062      	b.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68b9      	ldr	r1, [r7, #8]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fa5a 	bl	8007198 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	699a      	ldr	r2, [r3, #24]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006cf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	699a      	ldr	r2, [r3, #24]
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6999      	ldr	r1, [r3, #24]
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	021a      	lsls	r2, r3, #8
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	430a      	orrs	r2, r1
 8006d16:	619a      	str	r2, [r3, #24]
      break;
 8006d18:	e041      	b.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f000 faaf 	bl	8007284 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	69da      	ldr	r2, [r3, #28]
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	f042 0208 	orr.w	r2, r2, #8
 8006d34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	69da      	ldr	r2, [r3, #28]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f022 0204 	bic.w	r2, r2, #4
 8006d44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	69d9      	ldr	r1, [r3, #28]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	691a      	ldr	r2, [r3, #16]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	430a      	orrs	r2, r1
 8006d56:	61da      	str	r2, [r3, #28]
      break;
 8006d58:	e021      	b.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68b9      	ldr	r1, [r7, #8]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fb03 	bl	800736c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	69da      	ldr	r2, [r3, #28]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	69da      	ldr	r2, [r3, #28]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	69d9      	ldr	r1, [r3, #28]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	691b      	ldr	r3, [r3, #16]
 8006d90:	021a      	lsls	r2, r3, #8
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	61da      	str	r2, [r3, #28]
      break;
 8006d9a:	e000      	b.n	8006d9e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d9c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2201      	movs	r2, #1
 8006da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
 8006dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dc8:	2b01      	cmp	r3, #1
 8006dca:	d101      	bne.n	8006dd0 <HAL_TIM_ConfigClockSource+0x18>
 8006dcc:	2302      	movs	r3, #2
 8006dce:	e0a6      	b.n	8006f1e <HAL_TIM_ConfigClockSource+0x166>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2202      	movs	r2, #2
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006dee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006df6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d067      	beq.n	8006ed8 <HAL_TIM_ConfigClockSource+0x120>
 8006e08:	2b40      	cmp	r3, #64	; 0x40
 8006e0a:	d80b      	bhi.n	8006e24 <HAL_TIM_ConfigClockSource+0x6c>
 8006e0c:	2b10      	cmp	r3, #16
 8006e0e:	d073      	beq.n	8006ef8 <HAL_TIM_ConfigClockSource+0x140>
 8006e10:	2b10      	cmp	r3, #16
 8006e12:	d802      	bhi.n	8006e1a <HAL_TIM_ConfigClockSource+0x62>
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d06f      	beq.n	8006ef8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006e18:	e078      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e1a:	2b20      	cmp	r3, #32
 8006e1c:	d06c      	beq.n	8006ef8 <HAL_TIM_ConfigClockSource+0x140>
 8006e1e:	2b30      	cmp	r3, #48	; 0x30
 8006e20:	d06a      	beq.n	8006ef8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006e22:	e073      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e24:	2b70      	cmp	r3, #112	; 0x70
 8006e26:	d00d      	beq.n	8006e44 <HAL_TIM_ConfigClockSource+0x8c>
 8006e28:	2b70      	cmp	r3, #112	; 0x70
 8006e2a:	d804      	bhi.n	8006e36 <HAL_TIM_ConfigClockSource+0x7e>
 8006e2c:	2b50      	cmp	r3, #80	; 0x50
 8006e2e:	d033      	beq.n	8006e98 <HAL_TIM_ConfigClockSource+0xe0>
 8006e30:	2b60      	cmp	r3, #96	; 0x60
 8006e32:	d041      	beq.n	8006eb8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006e34:	e06a      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e3a:	d066      	beq.n	8006f0a <HAL_TIM_ConfigClockSource+0x152>
 8006e3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e40:	d017      	beq.n	8006e72 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006e42:	e063      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6818      	ldr	r0, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	6899      	ldr	r1, [r3, #8]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	f000 fb5a 	bl	800750c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e66:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	609a      	str	r2, [r3, #8]
      break;
 8006e70:	e04c      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6818      	ldr	r0, [r3, #0]
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	6899      	ldr	r1, [r3, #8]
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f000 fb43 	bl	800750c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	689a      	ldr	r2, [r3, #8]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e94:	609a      	str	r2, [r3, #8]
      break;
 8006e96:	e039      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6818      	ldr	r0, [r3, #0]
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	6859      	ldr	r1, [r3, #4]
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f000 fab7 	bl	8007418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2150      	movs	r1, #80	; 0x50
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f000 fb10 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006eb6:	e029      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6818      	ldr	r0, [r3, #0]
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	6859      	ldr	r1, [r3, #4]
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	f000 fad6 	bl	8007476 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2160      	movs	r1, #96	; 0x60
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fb00 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006ed6:	e019      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6818      	ldr	r0, [r3, #0]
 8006edc:	683b      	ldr	r3, [r7, #0]
 8006ede:	6859      	ldr	r1, [r3, #4]
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	68db      	ldr	r3, [r3, #12]
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	f000 fa97 	bl	8007418 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	2140      	movs	r1, #64	; 0x40
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 faf0 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006ef6:	e009      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681a      	ldr	r2, [r3, #0]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f000 fae7 	bl	80074d6 <TIM_ITRx_SetConfig>
      break;
 8006f08:	e000      	b.n	8006f0c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006f0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3710      	adds	r7, #16
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	4a40      	ldr	r2, [pc, #256]	; (800708c <TIM_Base_SetConfig+0x114>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d013      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f96:	d00f      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	4a3d      	ldr	r2, [pc, #244]	; (8007090 <TIM_Base_SetConfig+0x118>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d00b      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a3c      	ldr	r2, [pc, #240]	; (8007094 <TIM_Base_SetConfig+0x11c>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d007      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a3b      	ldr	r2, [pc, #236]	; (8007098 <TIM_Base_SetConfig+0x120>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d003      	beq.n	8006fb8 <TIM_Base_SetConfig+0x40>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	4a3a      	ldr	r2, [pc, #232]	; (800709c <TIM_Base_SetConfig+0x124>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d108      	bne.n	8006fca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a2f      	ldr	r2, [pc, #188]	; (800708c <TIM_Base_SetConfig+0x114>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d02b      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d027      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a2c      	ldr	r2, [pc, #176]	; (8007090 <TIM_Base_SetConfig+0x118>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d023      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a2b      	ldr	r2, [pc, #172]	; (8007094 <TIM_Base_SetConfig+0x11c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01f      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a2a      	ldr	r2, [pc, #168]	; (8007098 <TIM_Base_SetConfig+0x120>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d01b      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a29      	ldr	r2, [pc, #164]	; (800709c <TIM_Base_SetConfig+0x124>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d017      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a28      	ldr	r2, [pc, #160]	; (80070a0 <TIM_Base_SetConfig+0x128>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d013      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a27      	ldr	r2, [pc, #156]	; (80070a4 <TIM_Base_SetConfig+0x12c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d00f      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a26      	ldr	r2, [pc, #152]	; (80070a8 <TIM_Base_SetConfig+0x130>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d00b      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a25      	ldr	r2, [pc, #148]	; (80070ac <TIM_Base_SetConfig+0x134>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d007      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a24      	ldr	r2, [pc, #144]	; (80070b0 <TIM_Base_SetConfig+0x138>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d003      	beq.n	800702a <TIM_Base_SetConfig+0xb2>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <TIM_Base_SetConfig+0x13c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d108      	bne.n	800703c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	68db      	ldr	r3, [r3, #12]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a0a      	ldr	r2, [pc, #40]	; (800708c <TIM_Base_SetConfig+0x114>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d003      	beq.n	8007070 <TIM_Base_SetConfig+0xf8>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	4a0c      	ldr	r2, [pc, #48]	; (800709c <TIM_Base_SetConfig+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d103      	bne.n	8007078 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	691a      	ldr	r2, [r3, #16]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	615a      	str	r2, [r3, #20]
}
 800707e:	bf00      	nop
 8007080:	3714      	adds	r7, #20
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop
 800708c:	40010000 	.word	0x40010000
 8007090:	40000400 	.word	0x40000400
 8007094:	40000800 	.word	0x40000800
 8007098:	40000c00 	.word	0x40000c00
 800709c:	40010400 	.word	0x40010400
 80070a0:	40014000 	.word	0x40014000
 80070a4:	40014400 	.word	0x40014400
 80070a8:	40014800 	.word	0x40014800
 80070ac:	40001800 	.word	0x40001800
 80070b0:	40001c00 	.word	0x40001c00
 80070b4:	40002000 	.word	0x40002000

080070b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b087      	sub	sp, #28
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	f023 0303 	bic.w	r3, r3, #3
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	4313      	orrs	r3, r2
 80070f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f023 0302 	bic.w	r3, r3, #2
 8007100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	697a      	ldr	r2, [r7, #20]
 8007108:	4313      	orrs	r3, r2
 800710a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a20      	ldr	r2, [pc, #128]	; (8007190 <TIM_OC1_SetConfig+0xd8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d003      	beq.n	800711c <TIM_OC1_SetConfig+0x64>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a1f      	ldr	r2, [pc, #124]	; (8007194 <TIM_OC1_SetConfig+0xdc>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d10c      	bne.n	8007136 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f023 0308 	bic.w	r3, r3, #8
 8007122:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	4313      	orrs	r3, r2
 800712c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	f023 0304 	bic.w	r3, r3, #4
 8007134:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a15      	ldr	r2, [pc, #84]	; (8007190 <TIM_OC1_SetConfig+0xd8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_OC1_SetConfig+0x8e>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a14      	ldr	r2, [pc, #80]	; (8007194 <TIM_OC1_SetConfig+0xdc>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d111      	bne.n	800716a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800714c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007154:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	693a      	ldr	r2, [r7, #16]
 800715c:	4313      	orrs	r3, r2
 800715e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	699b      	ldr	r3, [r3, #24]
 8007164:	693a      	ldr	r2, [r7, #16]
 8007166:	4313      	orrs	r3, r2
 8007168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	693a      	ldr	r2, [r7, #16]
 800716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	685a      	ldr	r2, [r3, #4]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	621a      	str	r2, [r3, #32]
}
 8007184:	bf00      	nop
 8007186:	371c      	adds	r7, #28
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr
 8007190:	40010000 	.word	0x40010000
 8007194:	40010400 	.word	0x40010400

08007198 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007198:	b480      	push	{r7}
 800719a:	b087      	sub	sp, #28
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	f023 0210 	bic.w	r2, r3, #16
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	021b      	lsls	r3, r3, #8
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	4313      	orrs	r3, r2
 80071da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f023 0320 	bic.w	r3, r3, #32
 80071e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	011b      	lsls	r3, r3, #4
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	4313      	orrs	r3, r2
 80071ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a22      	ldr	r2, [pc, #136]	; (800727c <TIM_OC2_SetConfig+0xe4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d003      	beq.n	8007200 <TIM_OC2_SetConfig+0x68>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a21      	ldr	r2, [pc, #132]	; (8007280 <TIM_OC2_SetConfig+0xe8>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d10d      	bne.n	800721c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	011b      	lsls	r3, r3, #4
 800720e:	697a      	ldr	r2, [r7, #20]
 8007210:	4313      	orrs	r3, r2
 8007212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800721a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	4a17      	ldr	r2, [pc, #92]	; (800727c <TIM_OC2_SetConfig+0xe4>)
 8007220:	4293      	cmp	r3, r2
 8007222:	d003      	beq.n	800722c <TIM_OC2_SetConfig+0x94>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a16      	ldr	r2, [pc, #88]	; (8007280 <TIM_OC2_SetConfig+0xe8>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d113      	bne.n	8007254 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007232:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	699b      	ldr	r3, [r3, #24]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	693a      	ldr	r2, [r7, #16]
 8007258:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	685a      	ldr	r2, [r3, #4]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	621a      	str	r2, [r3, #32]
}
 800726e:	bf00      	nop
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40010000 	.word	0x40010000
 8007280:	40010400 	.word	0x40010400

08007284 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007284:	b480      	push	{r7}
 8007286:	b087      	sub	sp, #28
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f023 0303 	bic.w	r3, r3, #3
 80072ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80072cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	021b      	lsls	r3, r3, #8
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a21      	ldr	r2, [pc, #132]	; (8007364 <TIM_OC3_SetConfig+0xe0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d003      	beq.n	80072ea <TIM_OC3_SetConfig+0x66>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a20      	ldr	r2, [pc, #128]	; (8007368 <TIM_OC3_SetConfig+0xe4>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d10d      	bne.n	8007306 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	021b      	lsls	r3, r3, #8
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a16      	ldr	r2, [pc, #88]	; (8007364 <TIM_OC3_SetConfig+0xe0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d003      	beq.n	8007316 <TIM_OC3_SetConfig+0x92>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a15      	ldr	r2, [pc, #84]	; (8007368 <TIM_OC3_SetConfig+0xe4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d113      	bne.n	800733e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007324:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	695b      	ldr	r3, [r3, #20]
 800732a:	011b      	lsls	r3, r3, #4
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4313      	orrs	r3, r2
 800733c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	693a      	ldr	r2, [r7, #16]
 8007342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	68fa      	ldr	r2, [r7, #12]
 8007348:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	621a      	str	r2, [r3, #32]
}
 8007358:	bf00      	nop
 800735a:	371c      	adds	r7, #28
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr
 8007364:	40010000 	.word	0x40010000
 8007368:	40010400 	.word	0x40010400

0800736c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	69db      	ldr	r3, [r3, #28]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800739a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	021b      	lsls	r3, r3, #8
 80073aa:	68fa      	ldr	r2, [r7, #12]
 80073ac:	4313      	orrs	r3, r2
 80073ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	031b      	lsls	r3, r3, #12
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a12      	ldr	r2, [pc, #72]	; (8007410 <TIM_OC4_SetConfig+0xa4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d003      	beq.n	80073d4 <TIM_OC4_SetConfig+0x68>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a11      	ldr	r2, [pc, #68]	; (8007414 <TIM_OC4_SetConfig+0xa8>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d109      	bne.n	80073e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	019b      	lsls	r3, r3, #6
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68fa      	ldr	r2, [r7, #12]
 80073f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	693a      	ldr	r2, [r7, #16]
 8007400:	621a      	str	r2, [r3, #32]
}
 8007402:	bf00      	nop
 8007404:	371c      	adds	r7, #28
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr
 800740e:	bf00      	nop
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	60b9      	str	r1, [r7, #8]
 8007422:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f023 0201 	bic.w	r2, r3, #1
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007442:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 030a 	bic.w	r3, r3, #10
 8007454:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	4313      	orrs	r3, r2
 800745c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	697a      	ldr	r2, [r7, #20]
 8007468:	621a      	str	r2, [r3, #32]
}
 800746a:	bf00      	nop
 800746c:	371c      	adds	r7, #28
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007476:	b480      	push	{r7}
 8007478:	b087      	sub	sp, #28
 800747a:	af00      	add	r7, sp, #0
 800747c:	60f8      	str	r0, [r7, #12]
 800747e:	60b9      	str	r1, [r7, #8]
 8007480:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	f023 0210 	bic.w	r2, r3, #16
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6a1b      	ldr	r3, [r3, #32]
 8007498:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	031b      	lsls	r3, r3, #12
 80074a6:	697a      	ldr	r2, [r7, #20]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	697a      	ldr	r2, [r7, #20]
 80074c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	693a      	ldr	r2, [r7, #16]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b085      	sub	sp, #20
 80074da:	af00      	add	r7, sp, #0
 80074dc:	6078      	str	r0, [r7, #4]
 80074de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	f043 0307 	orr.w	r3, r3, #7
 80074f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	609a      	str	r2, [r3, #8]
}
 8007500:	bf00      	nop
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007526:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	021a      	lsls	r2, r3, #8
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	431a      	orrs	r2, r3
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	4313      	orrs	r3, r2
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	4313      	orrs	r3, r2
 8007538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	697a      	ldr	r2, [r7, #20]
 800753e:	609a      	str	r2, [r3, #8]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f003 031f 	and.w	r3, r3, #31
 800755e:	2201      	movs	r2, #1
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1a      	ldr	r2, [r3, #32]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	43db      	mvns	r3, r3
 800756e:	401a      	ands	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1a      	ldr	r2, [r3, #32]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	6879      	ldr	r1, [r7, #4]
 8007580:	fa01 f303 	lsl.w	r3, r1, r3
 8007584:	431a      	orrs	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	bf00      	nop
 800758c:	371c      	adds	r7, #28
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e05a      	b.n	8007666 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	68fa      	ldr	r2, [r7, #12]
 80075de:	4313      	orrs	r3, r2
 80075e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a21      	ldr	r2, [pc, #132]	; (8007674 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d022      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075fc:	d01d      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a1d      	ldr	r2, [pc, #116]	; (8007678 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d018      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1b      	ldr	r2, [pc, #108]	; (800767c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d013      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1a      	ldr	r2, [pc, #104]	; (8007680 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d00e      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a18      	ldr	r2, [pc, #96]	; (8007684 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d009      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a17      	ldr	r2, [pc, #92]	; (8007688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d004      	beq.n	800763a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a15      	ldr	r2, [pc, #84]	; (800768c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d10c      	bne.n	8007654 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007640:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	68ba      	ldr	r2, [r7, #8]
 8007648:	4313      	orrs	r3, r2
 800764a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68ba      	ldr	r2, [r7, #8]
 8007652:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	40010000 	.word	0x40010000
 8007678:	40000400 	.word	0x40000400
 800767c:	40000800 	.word	0x40000800
 8007680:	40000c00 	.word	0x40000c00
 8007684:	40010400 	.word	0x40010400
 8007688:	40014000 	.word	0x40014000
 800768c:	40001800 	.word	0x40001800

08007690 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d101      	bne.n	80076ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80076a8:	2302      	movs	r3, #2
 80076aa:	e03d      	b.n	8007728 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689b      	ldr	r3, [r3, #8]
 80076cc:	4313      	orrs	r3, r2
 80076ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	4313      	orrs	r3, r2
 80076dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	691b      	ldr	r3, [r3, #16]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	4313      	orrs	r3, r2
 8007706:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	4313      	orrs	r3, r2
 8007714:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007726:	2300      	movs	r3, #0
}
 8007728:	4618      	mov	r0, r3
 800772a:	3714      	adds	r7, #20
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007748:	b480      	push	{r7}
 800774a:	b083      	sub	sp, #12
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007750:	bf00      	nop
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d101      	bne.n	800776e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e03f      	b.n	80077ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007774:	b2db      	uxtb	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d106      	bne.n	8007788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f7fd fad8 	bl	8004d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2224      	movs	r2, #36	; 0x24
 800778c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800779e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f90b 	bl	80079bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	691a      	ldr	r2, [r3, #16]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2220      	movs	r2, #32
 80077e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b088      	sub	sp, #32
 80077fa:	af02      	add	r7, sp, #8
 80077fc:	60f8      	str	r0, [r7, #12]
 80077fe:	60b9      	str	r1, [r7, #8]
 8007800:	603b      	str	r3, [r7, #0]
 8007802:	4613      	mov	r3, r2
 8007804:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007810:	b2db      	uxtb	r3, r3
 8007812:	2b20      	cmp	r3, #32
 8007814:	f040 8083 	bne.w	800791e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d002      	beq.n	8007824 <HAL_UART_Transmit+0x2e>
 800781e:	88fb      	ldrh	r3, [r7, #6]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8007824:	2301      	movs	r3, #1
 8007826:	e07b      	b.n	8007920 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <HAL_UART_Transmit+0x40>
 8007832:	2302      	movs	r3, #2
 8007834:	e074      	b.n	8007920 <HAL_UART_Transmit+0x12a>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2221      	movs	r2, #33	; 0x21
 8007848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800784c:	f7fd fb4c 	bl	8004ee8 <HAL_GetTick>
 8007850:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	88fa      	ldrh	r2, [r7, #6]
 8007856:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	88fa      	ldrh	r2, [r7, #6]
 800785c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8007866:	e042      	b.n	80078ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800786c:	b29b      	uxth	r3, r3
 800786e:	3b01      	subs	r3, #1
 8007870:	b29a      	uxth	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	689b      	ldr	r3, [r3, #8]
 800787a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800787e:	d122      	bne.n	80078c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	2200      	movs	r2, #0
 8007888:	2180      	movs	r1, #128	; 0x80
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f000 f84c 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 8007890:	4603      	mov	r3, r0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d001      	beq.n	800789a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8007896:	2303      	movs	r3, #3
 8007898:	e042      	b.n	8007920 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	881b      	ldrh	r3, [r3, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	3302      	adds	r3, #2
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	e017      	b.n	80078ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	3301      	adds	r3, #1
 80078c2:	60bb      	str	r3, [r7, #8]
 80078c4:	e013      	b.n	80078ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	2200      	movs	r2, #0
 80078ce:	2180      	movs	r1, #128	; 0x80
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 f829 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d001      	beq.n	80078e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e01f      	b.n	8007920 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	1c5a      	adds	r2, r3, #1
 80078e4:	60ba      	str	r2, [r7, #8]
 80078e6:	781a      	ldrb	r2, [r3, #0]
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d1b7      	bne.n	8007868 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	9300      	str	r3, [sp, #0]
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	2200      	movs	r2, #0
 8007900:	2140      	movs	r1, #64	; 0x40
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f810 	bl	8007928 <UART_WaitOnFlagUntilTimeout>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d001      	beq.n	8007912 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e006      	b.n	8007920 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2220      	movs	r2, #32
 8007916:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800791a:	2300      	movs	r3, #0
 800791c:	e000      	b.n	8007920 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800791e:	2302      	movs	r3, #2
  }
}
 8007920:	4618      	mov	r0, r3
 8007922:	3718      	adds	r7, #24
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007938:	e02c      	b.n	8007994 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800793a:	69bb      	ldr	r3, [r7, #24]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d028      	beq.n	8007994 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007942:	69bb      	ldr	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <UART_WaitOnFlagUntilTimeout+0x30>
 8007948:	f7fd face 	bl	8004ee8 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	69ba      	ldr	r2, [r7, #24]
 8007954:	429a      	cmp	r2, r3
 8007956:	d21d      	bcs.n	8007994 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007966:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	695a      	ldr	r2, [r3, #20]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0201 	bic.w	r2, r2, #1
 8007976:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2220      	movs	r2, #32
 8007984:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e00f      	b.n	80079b4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	4013      	ands	r3, r2
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	bf0c      	ite	eq
 80079a4:	2301      	moveq	r3, #1
 80079a6:	2300      	movne	r3, #0
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d0c3      	beq.n	800793a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079c0:	b085      	sub	sp, #20
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	68da      	ldr	r2, [r3, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80079fe:	f023 030c 	bic.w	r3, r3, #12
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	430b      	orrs	r3, r1
 8007a0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	69db      	ldr	r3, [r3, #28]
 8007a26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a2a:	f040 818b 	bne.w	8007d44 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4ac1      	ldr	r2, [pc, #772]	; (8007d38 <UART_SetConfig+0x37c>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d005      	beq.n	8007a44 <UART_SetConfig+0x88>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4abf      	ldr	r2, [pc, #764]	; (8007d3c <UART_SetConfig+0x380>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	f040 80bd 	bne.w	8007bbe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a44:	f7fe f9c0 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 8007a48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	461d      	mov	r5, r3
 8007a4e:	f04f 0600 	mov.w	r6, #0
 8007a52:	46a8      	mov	r8, r5
 8007a54:	46b1      	mov	r9, r6
 8007a56:	eb18 0308 	adds.w	r3, r8, r8
 8007a5a:	eb49 0409 	adc.w	r4, r9, r9
 8007a5e:	4698      	mov	r8, r3
 8007a60:	46a1      	mov	r9, r4
 8007a62:	eb18 0805 	adds.w	r8, r8, r5
 8007a66:	eb49 0906 	adc.w	r9, r9, r6
 8007a6a:	f04f 0100 	mov.w	r1, #0
 8007a6e:	f04f 0200 	mov.w	r2, #0
 8007a72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a7e:	4688      	mov	r8, r1
 8007a80:	4691      	mov	r9, r2
 8007a82:	eb18 0005 	adds.w	r0, r8, r5
 8007a86:	eb49 0106 	adc.w	r1, r9, r6
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	461d      	mov	r5, r3
 8007a90:	f04f 0600 	mov.w	r6, #0
 8007a94:	196b      	adds	r3, r5, r5
 8007a96:	eb46 0406 	adc.w	r4, r6, r6
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	4623      	mov	r3, r4
 8007a9e:	f7f9 f8f3 	bl	8000c88 <__aeabi_uldivmod>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4ba5      	ldr	r3, [pc, #660]	; (8007d40 <UART_SetConfig+0x384>)
 8007aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8007aae:	095b      	lsrs	r3, r3, #5
 8007ab0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	461d      	mov	r5, r3
 8007ab8:	f04f 0600 	mov.w	r6, #0
 8007abc:	46a9      	mov	r9, r5
 8007abe:	46b2      	mov	sl, r6
 8007ac0:	eb19 0309 	adds.w	r3, r9, r9
 8007ac4:	eb4a 040a 	adc.w	r4, sl, sl
 8007ac8:	4699      	mov	r9, r3
 8007aca:	46a2      	mov	sl, r4
 8007acc:	eb19 0905 	adds.w	r9, r9, r5
 8007ad0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ad4:	f04f 0100 	mov.w	r1, #0
 8007ad8:	f04f 0200 	mov.w	r2, #0
 8007adc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ae0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ae4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ae8:	4689      	mov	r9, r1
 8007aea:	4692      	mov	sl, r2
 8007aec:	eb19 0005 	adds.w	r0, r9, r5
 8007af0:	eb4a 0106 	adc.w	r1, sl, r6
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	461d      	mov	r5, r3
 8007afa:	f04f 0600 	mov.w	r6, #0
 8007afe:	196b      	adds	r3, r5, r5
 8007b00:	eb46 0406 	adc.w	r4, r6, r6
 8007b04:	461a      	mov	r2, r3
 8007b06:	4623      	mov	r3, r4
 8007b08:	f7f9 f8be 	bl	8000c88 <__aeabi_uldivmod>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	460c      	mov	r4, r1
 8007b10:	461a      	mov	r2, r3
 8007b12:	4b8b      	ldr	r3, [pc, #556]	; (8007d40 <UART_SetConfig+0x384>)
 8007b14:	fba3 1302 	umull	r1, r3, r3, r2
 8007b18:	095b      	lsrs	r3, r3, #5
 8007b1a:	2164      	movs	r1, #100	; 0x64
 8007b1c:	fb01 f303 	mul.w	r3, r1, r3
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	00db      	lsls	r3, r3, #3
 8007b24:	3332      	adds	r3, #50	; 0x32
 8007b26:	4a86      	ldr	r2, [pc, #536]	; (8007d40 <UART_SetConfig+0x384>)
 8007b28:	fba2 2303 	umull	r2, r3, r2, r3
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	005b      	lsls	r3, r3, #1
 8007b30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b34:	4498      	add	r8, r3
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	461d      	mov	r5, r3
 8007b3a:	f04f 0600 	mov.w	r6, #0
 8007b3e:	46a9      	mov	r9, r5
 8007b40:	46b2      	mov	sl, r6
 8007b42:	eb19 0309 	adds.w	r3, r9, r9
 8007b46:	eb4a 040a 	adc.w	r4, sl, sl
 8007b4a:	4699      	mov	r9, r3
 8007b4c:	46a2      	mov	sl, r4
 8007b4e:	eb19 0905 	adds.w	r9, r9, r5
 8007b52:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b56:	f04f 0100 	mov.w	r1, #0
 8007b5a:	f04f 0200 	mov.w	r2, #0
 8007b5e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b62:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b66:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b6a:	4689      	mov	r9, r1
 8007b6c:	4692      	mov	sl, r2
 8007b6e:	eb19 0005 	adds.w	r0, r9, r5
 8007b72:	eb4a 0106 	adc.w	r1, sl, r6
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	461d      	mov	r5, r3
 8007b7c:	f04f 0600 	mov.w	r6, #0
 8007b80:	196b      	adds	r3, r5, r5
 8007b82:	eb46 0406 	adc.w	r4, r6, r6
 8007b86:	461a      	mov	r2, r3
 8007b88:	4623      	mov	r3, r4
 8007b8a:	f7f9 f87d 	bl	8000c88 <__aeabi_uldivmod>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	460c      	mov	r4, r1
 8007b92:	461a      	mov	r2, r3
 8007b94:	4b6a      	ldr	r3, [pc, #424]	; (8007d40 <UART_SetConfig+0x384>)
 8007b96:	fba3 1302 	umull	r1, r3, r3, r2
 8007b9a:	095b      	lsrs	r3, r3, #5
 8007b9c:	2164      	movs	r1, #100	; 0x64
 8007b9e:	fb01 f303 	mul.w	r3, r1, r3
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	00db      	lsls	r3, r3, #3
 8007ba6:	3332      	adds	r3, #50	; 0x32
 8007ba8:	4a65      	ldr	r2, [pc, #404]	; (8007d40 <UART_SetConfig+0x384>)
 8007baa:	fba2 2303 	umull	r2, r3, r2, r3
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	f003 0207 	and.w	r2, r3, #7
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4442      	add	r2, r8
 8007bba:	609a      	str	r2, [r3, #8]
 8007bbc:	e26f      	b.n	800809e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bbe:	f7fe f8ef 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8007bc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	461d      	mov	r5, r3
 8007bc8:	f04f 0600 	mov.w	r6, #0
 8007bcc:	46a8      	mov	r8, r5
 8007bce:	46b1      	mov	r9, r6
 8007bd0:	eb18 0308 	adds.w	r3, r8, r8
 8007bd4:	eb49 0409 	adc.w	r4, r9, r9
 8007bd8:	4698      	mov	r8, r3
 8007bda:	46a1      	mov	r9, r4
 8007bdc:	eb18 0805 	adds.w	r8, r8, r5
 8007be0:	eb49 0906 	adc.w	r9, r9, r6
 8007be4:	f04f 0100 	mov.w	r1, #0
 8007be8:	f04f 0200 	mov.w	r2, #0
 8007bec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007bf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007bf8:	4688      	mov	r8, r1
 8007bfa:	4691      	mov	r9, r2
 8007bfc:	eb18 0005 	adds.w	r0, r8, r5
 8007c00:	eb49 0106 	adc.w	r1, r9, r6
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	461d      	mov	r5, r3
 8007c0a:	f04f 0600 	mov.w	r6, #0
 8007c0e:	196b      	adds	r3, r5, r5
 8007c10:	eb46 0406 	adc.w	r4, r6, r6
 8007c14:	461a      	mov	r2, r3
 8007c16:	4623      	mov	r3, r4
 8007c18:	f7f9 f836 	bl	8000c88 <__aeabi_uldivmod>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	461a      	mov	r2, r3
 8007c22:	4b47      	ldr	r3, [pc, #284]	; (8007d40 <UART_SetConfig+0x384>)
 8007c24:	fba3 2302 	umull	r2, r3, r3, r2
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	461d      	mov	r5, r3
 8007c32:	f04f 0600 	mov.w	r6, #0
 8007c36:	46a9      	mov	r9, r5
 8007c38:	46b2      	mov	sl, r6
 8007c3a:	eb19 0309 	adds.w	r3, r9, r9
 8007c3e:	eb4a 040a 	adc.w	r4, sl, sl
 8007c42:	4699      	mov	r9, r3
 8007c44:	46a2      	mov	sl, r4
 8007c46:	eb19 0905 	adds.w	r9, r9, r5
 8007c4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c4e:	f04f 0100 	mov.w	r1, #0
 8007c52:	f04f 0200 	mov.w	r2, #0
 8007c56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c62:	4689      	mov	r9, r1
 8007c64:	4692      	mov	sl, r2
 8007c66:	eb19 0005 	adds.w	r0, r9, r5
 8007c6a:	eb4a 0106 	adc.w	r1, sl, r6
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	461d      	mov	r5, r3
 8007c74:	f04f 0600 	mov.w	r6, #0
 8007c78:	196b      	adds	r3, r5, r5
 8007c7a:	eb46 0406 	adc.w	r4, r6, r6
 8007c7e:	461a      	mov	r2, r3
 8007c80:	4623      	mov	r3, r4
 8007c82:	f7f9 f801 	bl	8000c88 <__aeabi_uldivmod>
 8007c86:	4603      	mov	r3, r0
 8007c88:	460c      	mov	r4, r1
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	4b2c      	ldr	r3, [pc, #176]	; (8007d40 <UART_SetConfig+0x384>)
 8007c8e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c92:	095b      	lsrs	r3, r3, #5
 8007c94:	2164      	movs	r1, #100	; 0x64
 8007c96:	fb01 f303 	mul.w	r3, r1, r3
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	00db      	lsls	r3, r3, #3
 8007c9e:	3332      	adds	r3, #50	; 0x32
 8007ca0:	4a27      	ldr	r2, [pc, #156]	; (8007d40 <UART_SetConfig+0x384>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	005b      	lsls	r3, r3, #1
 8007caa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cae:	4498      	add	r8, r3
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	461d      	mov	r5, r3
 8007cb4:	f04f 0600 	mov.w	r6, #0
 8007cb8:	46a9      	mov	r9, r5
 8007cba:	46b2      	mov	sl, r6
 8007cbc:	eb19 0309 	adds.w	r3, r9, r9
 8007cc0:	eb4a 040a 	adc.w	r4, sl, sl
 8007cc4:	4699      	mov	r9, r3
 8007cc6:	46a2      	mov	sl, r4
 8007cc8:	eb19 0905 	adds.w	r9, r9, r5
 8007ccc:	eb4a 0a06 	adc.w	sl, sl, r6
 8007cd0:	f04f 0100 	mov.w	r1, #0
 8007cd4:	f04f 0200 	mov.w	r2, #0
 8007cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007ce0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007ce4:	4689      	mov	r9, r1
 8007ce6:	4692      	mov	sl, r2
 8007ce8:	eb19 0005 	adds.w	r0, r9, r5
 8007cec:	eb4a 0106 	adc.w	r1, sl, r6
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	461d      	mov	r5, r3
 8007cf6:	f04f 0600 	mov.w	r6, #0
 8007cfa:	196b      	adds	r3, r5, r5
 8007cfc:	eb46 0406 	adc.w	r4, r6, r6
 8007d00:	461a      	mov	r2, r3
 8007d02:	4623      	mov	r3, r4
 8007d04:	f7f8 ffc0 	bl	8000c88 <__aeabi_uldivmod>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	460c      	mov	r4, r1
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	4b0c      	ldr	r3, [pc, #48]	; (8007d40 <UART_SetConfig+0x384>)
 8007d10:	fba3 1302 	umull	r1, r3, r3, r2
 8007d14:	095b      	lsrs	r3, r3, #5
 8007d16:	2164      	movs	r1, #100	; 0x64
 8007d18:	fb01 f303 	mul.w	r3, r1, r3
 8007d1c:	1ad3      	subs	r3, r2, r3
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	3332      	adds	r3, #50	; 0x32
 8007d22:	4a07      	ldr	r2, [pc, #28]	; (8007d40 <UART_SetConfig+0x384>)
 8007d24:	fba2 2303 	umull	r2, r3, r2, r3
 8007d28:	095b      	lsrs	r3, r3, #5
 8007d2a:	f003 0207 	and.w	r2, r3, #7
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4442      	add	r2, r8
 8007d34:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007d36:	e1b2      	b.n	800809e <UART_SetConfig+0x6e2>
 8007d38:	40011000 	.word	0x40011000
 8007d3c:	40011400 	.word	0x40011400
 8007d40:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4ad7      	ldr	r2, [pc, #860]	; (80080a8 <UART_SetConfig+0x6ec>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d005      	beq.n	8007d5a <UART_SetConfig+0x39e>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4ad6      	ldr	r2, [pc, #856]	; (80080ac <UART_SetConfig+0x6f0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	f040 80d1 	bne.w	8007efc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d5a:	f7fe f835 	bl	8005dc8 <HAL_RCC_GetPCLK2Freq>
 8007d5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	469a      	mov	sl, r3
 8007d64:	f04f 0b00 	mov.w	fp, #0
 8007d68:	46d0      	mov	r8, sl
 8007d6a:	46d9      	mov	r9, fp
 8007d6c:	eb18 0308 	adds.w	r3, r8, r8
 8007d70:	eb49 0409 	adc.w	r4, r9, r9
 8007d74:	4698      	mov	r8, r3
 8007d76:	46a1      	mov	r9, r4
 8007d78:	eb18 080a 	adds.w	r8, r8, sl
 8007d7c:	eb49 090b 	adc.w	r9, r9, fp
 8007d80:	f04f 0100 	mov.w	r1, #0
 8007d84:	f04f 0200 	mov.w	r2, #0
 8007d88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d94:	4688      	mov	r8, r1
 8007d96:	4691      	mov	r9, r2
 8007d98:	eb1a 0508 	adds.w	r5, sl, r8
 8007d9c:	eb4b 0609 	adc.w	r6, fp, r9
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	4619      	mov	r1, r3
 8007da6:	f04f 0200 	mov.w	r2, #0
 8007daa:	f04f 0300 	mov.w	r3, #0
 8007dae:	f04f 0400 	mov.w	r4, #0
 8007db2:	0094      	lsls	r4, r2, #2
 8007db4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007db8:	008b      	lsls	r3, r1, #2
 8007dba:	461a      	mov	r2, r3
 8007dbc:	4623      	mov	r3, r4
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	4631      	mov	r1, r6
 8007dc2:	f7f8 ff61 	bl	8000c88 <__aeabi_uldivmod>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	460c      	mov	r4, r1
 8007dca:	461a      	mov	r2, r3
 8007dcc:	4bb8      	ldr	r3, [pc, #736]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007dce:	fba3 2302 	umull	r2, r3, r3, r2
 8007dd2:	095b      	lsrs	r3, r3, #5
 8007dd4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	469b      	mov	fp, r3
 8007ddc:	f04f 0c00 	mov.w	ip, #0
 8007de0:	46d9      	mov	r9, fp
 8007de2:	46e2      	mov	sl, ip
 8007de4:	eb19 0309 	adds.w	r3, r9, r9
 8007de8:	eb4a 040a 	adc.w	r4, sl, sl
 8007dec:	4699      	mov	r9, r3
 8007dee:	46a2      	mov	sl, r4
 8007df0:	eb19 090b 	adds.w	r9, r9, fp
 8007df4:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007df8:	f04f 0100 	mov.w	r1, #0
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e0c:	4689      	mov	r9, r1
 8007e0e:	4692      	mov	sl, r2
 8007e10:	eb1b 0509 	adds.w	r5, fp, r9
 8007e14:	eb4c 060a 	adc.w	r6, ip, sl
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f04f 0200 	mov.w	r2, #0
 8007e22:	f04f 0300 	mov.w	r3, #0
 8007e26:	f04f 0400 	mov.w	r4, #0
 8007e2a:	0094      	lsls	r4, r2, #2
 8007e2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e30:	008b      	lsls	r3, r1, #2
 8007e32:	461a      	mov	r2, r3
 8007e34:	4623      	mov	r3, r4
 8007e36:	4628      	mov	r0, r5
 8007e38:	4631      	mov	r1, r6
 8007e3a:	f7f8 ff25 	bl	8000c88 <__aeabi_uldivmod>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	461a      	mov	r2, r3
 8007e44:	4b9a      	ldr	r3, [pc, #616]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007e46:	fba3 1302 	umull	r1, r3, r3, r2
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	2164      	movs	r1, #100	; 0x64
 8007e4e:	fb01 f303 	mul.w	r3, r1, r3
 8007e52:	1ad3      	subs	r3, r2, r3
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	3332      	adds	r3, #50	; 0x32
 8007e58:	4a95      	ldr	r2, [pc, #596]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e64:	4498      	add	r8, r3
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	469b      	mov	fp, r3
 8007e6a:	f04f 0c00 	mov.w	ip, #0
 8007e6e:	46d9      	mov	r9, fp
 8007e70:	46e2      	mov	sl, ip
 8007e72:	eb19 0309 	adds.w	r3, r9, r9
 8007e76:	eb4a 040a 	adc.w	r4, sl, sl
 8007e7a:	4699      	mov	r9, r3
 8007e7c:	46a2      	mov	sl, r4
 8007e7e:	eb19 090b 	adds.w	r9, r9, fp
 8007e82:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e86:	f04f 0100 	mov.w	r1, #0
 8007e8a:	f04f 0200 	mov.w	r2, #0
 8007e8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e92:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e96:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e9a:	4689      	mov	r9, r1
 8007e9c:	4692      	mov	sl, r2
 8007e9e:	eb1b 0509 	adds.w	r5, fp, r9
 8007ea2:	eb4c 060a 	adc.w	r6, ip, sl
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4619      	mov	r1, r3
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	f04f 0400 	mov.w	r4, #0
 8007eb8:	0094      	lsls	r4, r2, #2
 8007eba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ebe:	008b      	lsls	r3, r1, #2
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	4623      	mov	r3, r4
 8007ec4:	4628      	mov	r0, r5
 8007ec6:	4631      	mov	r1, r6
 8007ec8:	f7f8 fede 	bl	8000c88 <__aeabi_uldivmod>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	460c      	mov	r4, r1
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4b77      	ldr	r3, [pc, #476]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ed8:	095b      	lsrs	r3, r3, #5
 8007eda:	2164      	movs	r1, #100	; 0x64
 8007edc:	fb01 f303 	mul.w	r3, r1, r3
 8007ee0:	1ad3      	subs	r3, r2, r3
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	3332      	adds	r3, #50	; 0x32
 8007ee6:	4a72      	ldr	r2, [pc, #456]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	f003 020f 	and.w	r2, r3, #15
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4442      	add	r2, r8
 8007ef8:	609a      	str	r2, [r3, #8]
 8007efa:	e0d0      	b.n	800809e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007efc:	f7fd ff50 	bl	8005da0 <HAL_RCC_GetPCLK1Freq>
 8007f00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	469a      	mov	sl, r3
 8007f06:	f04f 0b00 	mov.w	fp, #0
 8007f0a:	46d0      	mov	r8, sl
 8007f0c:	46d9      	mov	r9, fp
 8007f0e:	eb18 0308 	adds.w	r3, r8, r8
 8007f12:	eb49 0409 	adc.w	r4, r9, r9
 8007f16:	4698      	mov	r8, r3
 8007f18:	46a1      	mov	r9, r4
 8007f1a:	eb18 080a 	adds.w	r8, r8, sl
 8007f1e:	eb49 090b 	adc.w	r9, r9, fp
 8007f22:	f04f 0100 	mov.w	r1, #0
 8007f26:	f04f 0200 	mov.w	r2, #0
 8007f2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f36:	4688      	mov	r8, r1
 8007f38:	4691      	mov	r9, r2
 8007f3a:	eb1a 0508 	adds.w	r5, sl, r8
 8007f3e:	eb4b 0609 	adc.w	r6, fp, r9
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	4619      	mov	r1, r3
 8007f48:	f04f 0200 	mov.w	r2, #0
 8007f4c:	f04f 0300 	mov.w	r3, #0
 8007f50:	f04f 0400 	mov.w	r4, #0
 8007f54:	0094      	lsls	r4, r2, #2
 8007f56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f5a:	008b      	lsls	r3, r1, #2
 8007f5c:	461a      	mov	r2, r3
 8007f5e:	4623      	mov	r3, r4
 8007f60:	4628      	mov	r0, r5
 8007f62:	4631      	mov	r1, r6
 8007f64:	f7f8 fe90 	bl	8000c88 <__aeabi_uldivmod>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	4b50      	ldr	r3, [pc, #320]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007f70:	fba3 2302 	umull	r2, r3, r3, r2
 8007f74:	095b      	lsrs	r3, r3, #5
 8007f76:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	469b      	mov	fp, r3
 8007f7e:	f04f 0c00 	mov.w	ip, #0
 8007f82:	46d9      	mov	r9, fp
 8007f84:	46e2      	mov	sl, ip
 8007f86:	eb19 0309 	adds.w	r3, r9, r9
 8007f8a:	eb4a 040a 	adc.w	r4, sl, sl
 8007f8e:	4699      	mov	r9, r3
 8007f90:	46a2      	mov	sl, r4
 8007f92:	eb19 090b 	adds.w	r9, r9, fp
 8007f96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f9a:	f04f 0100 	mov.w	r1, #0
 8007f9e:	f04f 0200 	mov.w	r2, #0
 8007fa2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fa6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007faa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fae:	4689      	mov	r9, r1
 8007fb0:	4692      	mov	sl, r2
 8007fb2:	eb1b 0509 	adds.w	r5, fp, r9
 8007fb6:	eb4c 060a 	adc.w	r6, ip, sl
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	f04f 0200 	mov.w	r2, #0
 8007fc4:	f04f 0300 	mov.w	r3, #0
 8007fc8:	f04f 0400 	mov.w	r4, #0
 8007fcc:	0094      	lsls	r4, r2, #2
 8007fce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fd2:	008b      	lsls	r3, r1, #2
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4623      	mov	r3, r4
 8007fd8:	4628      	mov	r0, r5
 8007fda:	4631      	mov	r1, r6
 8007fdc:	f7f8 fe54 	bl	8000c88 <__aeabi_uldivmod>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	4b32      	ldr	r3, [pc, #200]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fec:	095b      	lsrs	r3, r3, #5
 8007fee:	2164      	movs	r1, #100	; 0x64
 8007ff0:	fb01 f303 	mul.w	r3, r1, r3
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	011b      	lsls	r3, r3, #4
 8007ff8:	3332      	adds	r3, #50	; 0x32
 8007ffa:	4a2d      	ldr	r2, [pc, #180]	; (80080b0 <UART_SetConfig+0x6f4>)
 8007ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008006:	4498      	add	r8, r3
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	469b      	mov	fp, r3
 800800c:	f04f 0c00 	mov.w	ip, #0
 8008010:	46d9      	mov	r9, fp
 8008012:	46e2      	mov	sl, ip
 8008014:	eb19 0309 	adds.w	r3, r9, r9
 8008018:	eb4a 040a 	adc.w	r4, sl, sl
 800801c:	4699      	mov	r9, r3
 800801e:	46a2      	mov	sl, r4
 8008020:	eb19 090b 	adds.w	r9, r9, fp
 8008024:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008028:	f04f 0100 	mov.w	r1, #0
 800802c:	f04f 0200 	mov.w	r2, #0
 8008030:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008034:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008038:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800803c:	4689      	mov	r9, r1
 800803e:	4692      	mov	sl, r2
 8008040:	eb1b 0509 	adds.w	r5, fp, r9
 8008044:	eb4c 060a 	adc.w	r6, ip, sl
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	4619      	mov	r1, r3
 800804e:	f04f 0200 	mov.w	r2, #0
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	f04f 0400 	mov.w	r4, #0
 800805a:	0094      	lsls	r4, r2, #2
 800805c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008060:	008b      	lsls	r3, r1, #2
 8008062:	461a      	mov	r2, r3
 8008064:	4623      	mov	r3, r4
 8008066:	4628      	mov	r0, r5
 8008068:	4631      	mov	r1, r6
 800806a:	f7f8 fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800806e:	4603      	mov	r3, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461a      	mov	r2, r3
 8008074:	4b0e      	ldr	r3, [pc, #56]	; (80080b0 <UART_SetConfig+0x6f4>)
 8008076:	fba3 1302 	umull	r1, r3, r3, r2
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	2164      	movs	r1, #100	; 0x64
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	1ad3      	subs	r3, r2, r3
 8008084:	011b      	lsls	r3, r3, #4
 8008086:	3332      	adds	r3, #50	; 0x32
 8008088:	4a09      	ldr	r2, [pc, #36]	; (80080b0 <UART_SetConfig+0x6f4>)
 800808a:	fba2 2303 	umull	r2, r3, r2, r3
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	f003 020f 	and.w	r2, r3, #15
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4442      	add	r2, r8
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	e7ff      	b.n	800809e <UART_SetConfig+0x6e2>
 800809e:	bf00      	nop
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a8:	40011000 	.word	0x40011000
 80080ac:	40011400 	.word	0x40011400
 80080b0:	51eb851f 	.word	0x51eb851f

080080b4 <__errno>:
 80080b4:	4b01      	ldr	r3, [pc, #4]	; (80080bc <__errno+0x8>)
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	2000001c 	.word	0x2000001c

080080c0 <__libc_init_array>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	4e0d      	ldr	r6, [pc, #52]	; (80080f8 <__libc_init_array+0x38>)
 80080c4:	4c0d      	ldr	r4, [pc, #52]	; (80080fc <__libc_init_array+0x3c>)
 80080c6:	1ba4      	subs	r4, r4, r6
 80080c8:	10a4      	asrs	r4, r4, #2
 80080ca:	2500      	movs	r5, #0
 80080cc:	42a5      	cmp	r5, r4
 80080ce:	d109      	bne.n	80080e4 <__libc_init_array+0x24>
 80080d0:	4e0b      	ldr	r6, [pc, #44]	; (8008100 <__libc_init_array+0x40>)
 80080d2:	4c0c      	ldr	r4, [pc, #48]	; (8008104 <__libc_init_array+0x44>)
 80080d4:	f000 fd34 	bl	8008b40 <_init>
 80080d8:	1ba4      	subs	r4, r4, r6
 80080da:	10a4      	asrs	r4, r4, #2
 80080dc:	2500      	movs	r5, #0
 80080de:	42a5      	cmp	r5, r4
 80080e0:	d105      	bne.n	80080ee <__libc_init_array+0x2e>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080e8:	4798      	blx	r3
 80080ea:	3501      	adds	r5, #1
 80080ec:	e7ee      	b.n	80080cc <__libc_init_array+0xc>
 80080ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80080f2:	4798      	blx	r3
 80080f4:	3501      	adds	r5, #1
 80080f6:	e7f2      	b.n	80080de <__libc_init_array+0x1e>
 80080f8:	08009104 	.word	0x08009104
 80080fc:	08009104 	.word	0x08009104
 8008100:	08009104 	.word	0x08009104
 8008104:	08009108 	.word	0x08009108

08008108 <memcpy>:
 8008108:	b510      	push	{r4, lr}
 800810a:	1e43      	subs	r3, r0, #1
 800810c:	440a      	add	r2, r1
 800810e:	4291      	cmp	r1, r2
 8008110:	d100      	bne.n	8008114 <memcpy+0xc>
 8008112:	bd10      	pop	{r4, pc}
 8008114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800811c:	e7f7      	b.n	800810e <memcpy+0x6>

0800811e <memset>:
 800811e:	4402      	add	r2, r0
 8008120:	4603      	mov	r3, r0
 8008122:	4293      	cmp	r3, r2
 8008124:	d100      	bne.n	8008128 <memset+0xa>
 8008126:	4770      	bx	lr
 8008128:	f803 1b01 	strb.w	r1, [r3], #1
 800812c:	e7f9      	b.n	8008122 <memset+0x4>
	...

08008130 <siprintf>:
 8008130:	b40e      	push	{r1, r2, r3}
 8008132:	b500      	push	{lr}
 8008134:	b09c      	sub	sp, #112	; 0x70
 8008136:	ab1d      	add	r3, sp, #116	; 0x74
 8008138:	9002      	str	r0, [sp, #8]
 800813a:	9006      	str	r0, [sp, #24]
 800813c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008140:	4809      	ldr	r0, [pc, #36]	; (8008168 <siprintf+0x38>)
 8008142:	9107      	str	r1, [sp, #28]
 8008144:	9104      	str	r1, [sp, #16]
 8008146:	4909      	ldr	r1, [pc, #36]	; (800816c <siprintf+0x3c>)
 8008148:	f853 2b04 	ldr.w	r2, [r3], #4
 800814c:	9105      	str	r1, [sp, #20]
 800814e:	6800      	ldr	r0, [r0, #0]
 8008150:	9301      	str	r3, [sp, #4]
 8008152:	a902      	add	r1, sp, #8
 8008154:	f000 f866 	bl	8008224 <_svfiprintf_r>
 8008158:	9b02      	ldr	r3, [sp, #8]
 800815a:	2200      	movs	r2, #0
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	b01c      	add	sp, #112	; 0x70
 8008160:	f85d eb04 	ldr.w	lr, [sp], #4
 8008164:	b003      	add	sp, #12
 8008166:	4770      	bx	lr
 8008168:	2000001c 	.word	0x2000001c
 800816c:	ffff0208 	.word	0xffff0208

08008170 <__ssputs_r>:
 8008170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008174:	688e      	ldr	r6, [r1, #8]
 8008176:	429e      	cmp	r6, r3
 8008178:	4682      	mov	sl, r0
 800817a:	460c      	mov	r4, r1
 800817c:	4690      	mov	r8, r2
 800817e:	4699      	mov	r9, r3
 8008180:	d837      	bhi.n	80081f2 <__ssputs_r+0x82>
 8008182:	898a      	ldrh	r2, [r1, #12]
 8008184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008188:	d031      	beq.n	80081ee <__ssputs_r+0x7e>
 800818a:	6825      	ldr	r5, [r4, #0]
 800818c:	6909      	ldr	r1, [r1, #16]
 800818e:	1a6f      	subs	r7, r5, r1
 8008190:	6965      	ldr	r5, [r4, #20]
 8008192:	2302      	movs	r3, #2
 8008194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008198:	fb95 f5f3 	sdiv	r5, r5, r3
 800819c:	f109 0301 	add.w	r3, r9, #1
 80081a0:	443b      	add	r3, r7
 80081a2:	429d      	cmp	r5, r3
 80081a4:	bf38      	it	cc
 80081a6:	461d      	movcc	r5, r3
 80081a8:	0553      	lsls	r3, r2, #21
 80081aa:	d530      	bpl.n	800820e <__ssputs_r+0x9e>
 80081ac:	4629      	mov	r1, r5
 80081ae:	f000 fb21 	bl	80087f4 <_malloc_r>
 80081b2:	4606      	mov	r6, r0
 80081b4:	b950      	cbnz	r0, 80081cc <__ssputs_r+0x5c>
 80081b6:	230c      	movs	r3, #12
 80081b8:	f8ca 3000 	str.w	r3, [sl]
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081c2:	81a3      	strh	r3, [r4, #12]
 80081c4:	f04f 30ff 	mov.w	r0, #4294967295
 80081c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081cc:	463a      	mov	r2, r7
 80081ce:	6921      	ldr	r1, [r4, #16]
 80081d0:	f7ff ff9a 	bl	8008108 <memcpy>
 80081d4:	89a3      	ldrh	r3, [r4, #12]
 80081d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80081da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081de:	81a3      	strh	r3, [r4, #12]
 80081e0:	6126      	str	r6, [r4, #16]
 80081e2:	6165      	str	r5, [r4, #20]
 80081e4:	443e      	add	r6, r7
 80081e6:	1bed      	subs	r5, r5, r7
 80081e8:	6026      	str	r6, [r4, #0]
 80081ea:	60a5      	str	r5, [r4, #8]
 80081ec:	464e      	mov	r6, r9
 80081ee:	454e      	cmp	r6, r9
 80081f0:	d900      	bls.n	80081f4 <__ssputs_r+0x84>
 80081f2:	464e      	mov	r6, r9
 80081f4:	4632      	mov	r2, r6
 80081f6:	4641      	mov	r1, r8
 80081f8:	6820      	ldr	r0, [r4, #0]
 80081fa:	f000 fa93 	bl	8008724 <memmove>
 80081fe:	68a3      	ldr	r3, [r4, #8]
 8008200:	1b9b      	subs	r3, r3, r6
 8008202:	60a3      	str	r3, [r4, #8]
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	441e      	add	r6, r3
 8008208:	6026      	str	r6, [r4, #0]
 800820a:	2000      	movs	r0, #0
 800820c:	e7dc      	b.n	80081c8 <__ssputs_r+0x58>
 800820e:	462a      	mov	r2, r5
 8008210:	f000 fb4a 	bl	80088a8 <_realloc_r>
 8008214:	4606      	mov	r6, r0
 8008216:	2800      	cmp	r0, #0
 8008218:	d1e2      	bne.n	80081e0 <__ssputs_r+0x70>
 800821a:	6921      	ldr	r1, [r4, #16]
 800821c:	4650      	mov	r0, sl
 800821e:	f000 fa9b 	bl	8008758 <_free_r>
 8008222:	e7c8      	b.n	80081b6 <__ssputs_r+0x46>

08008224 <_svfiprintf_r>:
 8008224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008228:	461d      	mov	r5, r3
 800822a:	898b      	ldrh	r3, [r1, #12]
 800822c:	061f      	lsls	r7, r3, #24
 800822e:	b09d      	sub	sp, #116	; 0x74
 8008230:	4680      	mov	r8, r0
 8008232:	460c      	mov	r4, r1
 8008234:	4616      	mov	r6, r2
 8008236:	d50f      	bpl.n	8008258 <_svfiprintf_r+0x34>
 8008238:	690b      	ldr	r3, [r1, #16]
 800823a:	b96b      	cbnz	r3, 8008258 <_svfiprintf_r+0x34>
 800823c:	2140      	movs	r1, #64	; 0x40
 800823e:	f000 fad9 	bl	80087f4 <_malloc_r>
 8008242:	6020      	str	r0, [r4, #0]
 8008244:	6120      	str	r0, [r4, #16]
 8008246:	b928      	cbnz	r0, 8008254 <_svfiprintf_r+0x30>
 8008248:	230c      	movs	r3, #12
 800824a:	f8c8 3000 	str.w	r3, [r8]
 800824e:	f04f 30ff 	mov.w	r0, #4294967295
 8008252:	e0c8      	b.n	80083e6 <_svfiprintf_r+0x1c2>
 8008254:	2340      	movs	r3, #64	; 0x40
 8008256:	6163      	str	r3, [r4, #20]
 8008258:	2300      	movs	r3, #0
 800825a:	9309      	str	r3, [sp, #36]	; 0x24
 800825c:	2320      	movs	r3, #32
 800825e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008262:	2330      	movs	r3, #48	; 0x30
 8008264:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008268:	9503      	str	r5, [sp, #12]
 800826a:	f04f 0b01 	mov.w	fp, #1
 800826e:	4637      	mov	r7, r6
 8008270:	463d      	mov	r5, r7
 8008272:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008276:	b10b      	cbz	r3, 800827c <_svfiprintf_r+0x58>
 8008278:	2b25      	cmp	r3, #37	; 0x25
 800827a:	d13e      	bne.n	80082fa <_svfiprintf_r+0xd6>
 800827c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008280:	d00b      	beq.n	800829a <_svfiprintf_r+0x76>
 8008282:	4653      	mov	r3, sl
 8008284:	4632      	mov	r2, r6
 8008286:	4621      	mov	r1, r4
 8008288:	4640      	mov	r0, r8
 800828a:	f7ff ff71 	bl	8008170 <__ssputs_r>
 800828e:	3001      	adds	r0, #1
 8008290:	f000 80a4 	beq.w	80083dc <_svfiprintf_r+0x1b8>
 8008294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008296:	4453      	add	r3, sl
 8008298:	9309      	str	r3, [sp, #36]	; 0x24
 800829a:	783b      	ldrb	r3, [r7, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	f000 809d 	beq.w	80083dc <_svfiprintf_r+0x1b8>
 80082a2:	2300      	movs	r3, #0
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295
 80082a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	9307      	str	r3, [sp, #28]
 80082b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082b4:	931a      	str	r3, [sp, #104]	; 0x68
 80082b6:	462f      	mov	r7, r5
 80082b8:	2205      	movs	r2, #5
 80082ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 80082be:	4850      	ldr	r0, [pc, #320]	; (8008400 <_svfiprintf_r+0x1dc>)
 80082c0:	f7f7 ff8e 	bl	80001e0 <memchr>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	b9d0      	cbnz	r0, 80082fe <_svfiprintf_r+0xda>
 80082c8:	06d9      	lsls	r1, r3, #27
 80082ca:	bf44      	itt	mi
 80082cc:	2220      	movmi	r2, #32
 80082ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082d2:	071a      	lsls	r2, r3, #28
 80082d4:	bf44      	itt	mi
 80082d6:	222b      	movmi	r2, #43	; 0x2b
 80082d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80082dc:	782a      	ldrb	r2, [r5, #0]
 80082de:	2a2a      	cmp	r2, #42	; 0x2a
 80082e0:	d015      	beq.n	800830e <_svfiprintf_r+0xea>
 80082e2:	9a07      	ldr	r2, [sp, #28]
 80082e4:	462f      	mov	r7, r5
 80082e6:	2000      	movs	r0, #0
 80082e8:	250a      	movs	r5, #10
 80082ea:	4639      	mov	r1, r7
 80082ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082f0:	3b30      	subs	r3, #48	; 0x30
 80082f2:	2b09      	cmp	r3, #9
 80082f4:	d94d      	bls.n	8008392 <_svfiprintf_r+0x16e>
 80082f6:	b1b8      	cbz	r0, 8008328 <_svfiprintf_r+0x104>
 80082f8:	e00f      	b.n	800831a <_svfiprintf_r+0xf6>
 80082fa:	462f      	mov	r7, r5
 80082fc:	e7b8      	b.n	8008270 <_svfiprintf_r+0x4c>
 80082fe:	4a40      	ldr	r2, [pc, #256]	; (8008400 <_svfiprintf_r+0x1dc>)
 8008300:	1a80      	subs	r0, r0, r2
 8008302:	fa0b f000 	lsl.w	r0, fp, r0
 8008306:	4318      	orrs	r0, r3
 8008308:	9004      	str	r0, [sp, #16]
 800830a:	463d      	mov	r5, r7
 800830c:	e7d3      	b.n	80082b6 <_svfiprintf_r+0x92>
 800830e:	9a03      	ldr	r2, [sp, #12]
 8008310:	1d11      	adds	r1, r2, #4
 8008312:	6812      	ldr	r2, [r2, #0]
 8008314:	9103      	str	r1, [sp, #12]
 8008316:	2a00      	cmp	r2, #0
 8008318:	db01      	blt.n	800831e <_svfiprintf_r+0xfa>
 800831a:	9207      	str	r2, [sp, #28]
 800831c:	e004      	b.n	8008328 <_svfiprintf_r+0x104>
 800831e:	4252      	negs	r2, r2
 8008320:	f043 0302 	orr.w	r3, r3, #2
 8008324:	9207      	str	r2, [sp, #28]
 8008326:	9304      	str	r3, [sp, #16]
 8008328:	783b      	ldrb	r3, [r7, #0]
 800832a:	2b2e      	cmp	r3, #46	; 0x2e
 800832c:	d10c      	bne.n	8008348 <_svfiprintf_r+0x124>
 800832e:	787b      	ldrb	r3, [r7, #1]
 8008330:	2b2a      	cmp	r3, #42	; 0x2a
 8008332:	d133      	bne.n	800839c <_svfiprintf_r+0x178>
 8008334:	9b03      	ldr	r3, [sp, #12]
 8008336:	1d1a      	adds	r2, r3, #4
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	9203      	str	r2, [sp, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb8      	it	lt
 8008340:	f04f 33ff 	movlt.w	r3, #4294967295
 8008344:	3702      	adds	r7, #2
 8008346:	9305      	str	r3, [sp, #20]
 8008348:	4d2e      	ldr	r5, [pc, #184]	; (8008404 <_svfiprintf_r+0x1e0>)
 800834a:	7839      	ldrb	r1, [r7, #0]
 800834c:	2203      	movs	r2, #3
 800834e:	4628      	mov	r0, r5
 8008350:	f7f7 ff46 	bl	80001e0 <memchr>
 8008354:	b138      	cbz	r0, 8008366 <_svfiprintf_r+0x142>
 8008356:	2340      	movs	r3, #64	; 0x40
 8008358:	1b40      	subs	r0, r0, r5
 800835a:	fa03 f000 	lsl.w	r0, r3, r0
 800835e:	9b04      	ldr	r3, [sp, #16]
 8008360:	4303      	orrs	r3, r0
 8008362:	3701      	adds	r7, #1
 8008364:	9304      	str	r3, [sp, #16]
 8008366:	7839      	ldrb	r1, [r7, #0]
 8008368:	4827      	ldr	r0, [pc, #156]	; (8008408 <_svfiprintf_r+0x1e4>)
 800836a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800836e:	2206      	movs	r2, #6
 8008370:	1c7e      	adds	r6, r7, #1
 8008372:	f7f7 ff35 	bl	80001e0 <memchr>
 8008376:	2800      	cmp	r0, #0
 8008378:	d038      	beq.n	80083ec <_svfiprintf_r+0x1c8>
 800837a:	4b24      	ldr	r3, [pc, #144]	; (800840c <_svfiprintf_r+0x1e8>)
 800837c:	bb13      	cbnz	r3, 80083c4 <_svfiprintf_r+0x1a0>
 800837e:	9b03      	ldr	r3, [sp, #12]
 8008380:	3307      	adds	r3, #7
 8008382:	f023 0307 	bic.w	r3, r3, #7
 8008386:	3308      	adds	r3, #8
 8008388:	9303      	str	r3, [sp, #12]
 800838a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838c:	444b      	add	r3, r9
 800838e:	9309      	str	r3, [sp, #36]	; 0x24
 8008390:	e76d      	b.n	800826e <_svfiprintf_r+0x4a>
 8008392:	fb05 3202 	mla	r2, r5, r2, r3
 8008396:	2001      	movs	r0, #1
 8008398:	460f      	mov	r7, r1
 800839a:	e7a6      	b.n	80082ea <_svfiprintf_r+0xc6>
 800839c:	2300      	movs	r3, #0
 800839e:	3701      	adds	r7, #1
 80083a0:	9305      	str	r3, [sp, #20]
 80083a2:	4619      	mov	r1, r3
 80083a4:	250a      	movs	r5, #10
 80083a6:	4638      	mov	r0, r7
 80083a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083ac:	3a30      	subs	r2, #48	; 0x30
 80083ae:	2a09      	cmp	r2, #9
 80083b0:	d903      	bls.n	80083ba <_svfiprintf_r+0x196>
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0c8      	beq.n	8008348 <_svfiprintf_r+0x124>
 80083b6:	9105      	str	r1, [sp, #20]
 80083b8:	e7c6      	b.n	8008348 <_svfiprintf_r+0x124>
 80083ba:	fb05 2101 	mla	r1, r5, r1, r2
 80083be:	2301      	movs	r3, #1
 80083c0:	4607      	mov	r7, r0
 80083c2:	e7f0      	b.n	80083a6 <_svfiprintf_r+0x182>
 80083c4:	ab03      	add	r3, sp, #12
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	4622      	mov	r2, r4
 80083ca:	4b11      	ldr	r3, [pc, #68]	; (8008410 <_svfiprintf_r+0x1ec>)
 80083cc:	a904      	add	r1, sp, #16
 80083ce:	4640      	mov	r0, r8
 80083d0:	f3af 8000 	nop.w
 80083d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80083d8:	4681      	mov	r9, r0
 80083da:	d1d6      	bne.n	800838a <_svfiprintf_r+0x166>
 80083dc:	89a3      	ldrh	r3, [r4, #12]
 80083de:	065b      	lsls	r3, r3, #25
 80083e0:	f53f af35 	bmi.w	800824e <_svfiprintf_r+0x2a>
 80083e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083e6:	b01d      	add	sp, #116	; 0x74
 80083e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ec:	ab03      	add	r3, sp, #12
 80083ee:	9300      	str	r3, [sp, #0]
 80083f0:	4622      	mov	r2, r4
 80083f2:	4b07      	ldr	r3, [pc, #28]	; (8008410 <_svfiprintf_r+0x1ec>)
 80083f4:	a904      	add	r1, sp, #16
 80083f6:	4640      	mov	r0, r8
 80083f8:	f000 f882 	bl	8008500 <_printf_i>
 80083fc:	e7ea      	b.n	80083d4 <_svfiprintf_r+0x1b0>
 80083fe:	bf00      	nop
 8008400:	080090c4 	.word	0x080090c4
 8008404:	080090ca 	.word	0x080090ca
 8008408:	080090ce 	.word	0x080090ce
 800840c:	00000000 	.word	0x00000000
 8008410:	08008171 	.word	0x08008171

08008414 <_printf_common>:
 8008414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008418:	4691      	mov	r9, r2
 800841a:	461f      	mov	r7, r3
 800841c:	688a      	ldr	r2, [r1, #8]
 800841e:	690b      	ldr	r3, [r1, #16]
 8008420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008424:	4293      	cmp	r3, r2
 8008426:	bfb8      	it	lt
 8008428:	4613      	movlt	r3, r2
 800842a:	f8c9 3000 	str.w	r3, [r9]
 800842e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008432:	4606      	mov	r6, r0
 8008434:	460c      	mov	r4, r1
 8008436:	b112      	cbz	r2, 800843e <_printf_common+0x2a>
 8008438:	3301      	adds	r3, #1
 800843a:	f8c9 3000 	str.w	r3, [r9]
 800843e:	6823      	ldr	r3, [r4, #0]
 8008440:	0699      	lsls	r1, r3, #26
 8008442:	bf42      	ittt	mi
 8008444:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008448:	3302      	addmi	r3, #2
 800844a:	f8c9 3000 	strmi.w	r3, [r9]
 800844e:	6825      	ldr	r5, [r4, #0]
 8008450:	f015 0506 	ands.w	r5, r5, #6
 8008454:	d107      	bne.n	8008466 <_printf_common+0x52>
 8008456:	f104 0a19 	add.w	sl, r4, #25
 800845a:	68e3      	ldr	r3, [r4, #12]
 800845c:	f8d9 2000 	ldr.w	r2, [r9]
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	42ab      	cmp	r3, r5
 8008464:	dc28      	bgt.n	80084b8 <_printf_common+0xa4>
 8008466:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800846a:	6822      	ldr	r2, [r4, #0]
 800846c:	3300      	adds	r3, #0
 800846e:	bf18      	it	ne
 8008470:	2301      	movne	r3, #1
 8008472:	0692      	lsls	r2, r2, #26
 8008474:	d42d      	bmi.n	80084d2 <_printf_common+0xbe>
 8008476:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800847a:	4639      	mov	r1, r7
 800847c:	4630      	mov	r0, r6
 800847e:	47c0      	blx	r8
 8008480:	3001      	adds	r0, #1
 8008482:	d020      	beq.n	80084c6 <_printf_common+0xb2>
 8008484:	6823      	ldr	r3, [r4, #0]
 8008486:	68e5      	ldr	r5, [r4, #12]
 8008488:	f8d9 2000 	ldr.w	r2, [r9]
 800848c:	f003 0306 	and.w	r3, r3, #6
 8008490:	2b04      	cmp	r3, #4
 8008492:	bf08      	it	eq
 8008494:	1aad      	subeq	r5, r5, r2
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	6922      	ldr	r2, [r4, #16]
 800849a:	bf0c      	ite	eq
 800849c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084a0:	2500      	movne	r5, #0
 80084a2:	4293      	cmp	r3, r2
 80084a4:	bfc4      	itt	gt
 80084a6:	1a9b      	subgt	r3, r3, r2
 80084a8:	18ed      	addgt	r5, r5, r3
 80084aa:	f04f 0900 	mov.w	r9, #0
 80084ae:	341a      	adds	r4, #26
 80084b0:	454d      	cmp	r5, r9
 80084b2:	d11a      	bne.n	80084ea <_printf_common+0xd6>
 80084b4:	2000      	movs	r0, #0
 80084b6:	e008      	b.n	80084ca <_printf_common+0xb6>
 80084b8:	2301      	movs	r3, #1
 80084ba:	4652      	mov	r2, sl
 80084bc:	4639      	mov	r1, r7
 80084be:	4630      	mov	r0, r6
 80084c0:	47c0      	blx	r8
 80084c2:	3001      	adds	r0, #1
 80084c4:	d103      	bne.n	80084ce <_printf_common+0xba>
 80084c6:	f04f 30ff 	mov.w	r0, #4294967295
 80084ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ce:	3501      	adds	r5, #1
 80084d0:	e7c3      	b.n	800845a <_printf_common+0x46>
 80084d2:	18e1      	adds	r1, r4, r3
 80084d4:	1c5a      	adds	r2, r3, #1
 80084d6:	2030      	movs	r0, #48	; 0x30
 80084d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084dc:	4422      	add	r2, r4
 80084de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084e6:	3302      	adds	r3, #2
 80084e8:	e7c5      	b.n	8008476 <_printf_common+0x62>
 80084ea:	2301      	movs	r3, #1
 80084ec:	4622      	mov	r2, r4
 80084ee:	4639      	mov	r1, r7
 80084f0:	4630      	mov	r0, r6
 80084f2:	47c0      	blx	r8
 80084f4:	3001      	adds	r0, #1
 80084f6:	d0e6      	beq.n	80084c6 <_printf_common+0xb2>
 80084f8:	f109 0901 	add.w	r9, r9, #1
 80084fc:	e7d8      	b.n	80084b0 <_printf_common+0x9c>
	...

08008500 <_printf_i>:
 8008500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008504:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008508:	460c      	mov	r4, r1
 800850a:	7e09      	ldrb	r1, [r1, #24]
 800850c:	b085      	sub	sp, #20
 800850e:	296e      	cmp	r1, #110	; 0x6e
 8008510:	4617      	mov	r7, r2
 8008512:	4606      	mov	r6, r0
 8008514:	4698      	mov	r8, r3
 8008516:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008518:	f000 80b3 	beq.w	8008682 <_printf_i+0x182>
 800851c:	d822      	bhi.n	8008564 <_printf_i+0x64>
 800851e:	2963      	cmp	r1, #99	; 0x63
 8008520:	d036      	beq.n	8008590 <_printf_i+0x90>
 8008522:	d80a      	bhi.n	800853a <_printf_i+0x3a>
 8008524:	2900      	cmp	r1, #0
 8008526:	f000 80b9 	beq.w	800869c <_printf_i+0x19c>
 800852a:	2958      	cmp	r1, #88	; 0x58
 800852c:	f000 8083 	beq.w	8008636 <_printf_i+0x136>
 8008530:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008534:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008538:	e032      	b.n	80085a0 <_printf_i+0xa0>
 800853a:	2964      	cmp	r1, #100	; 0x64
 800853c:	d001      	beq.n	8008542 <_printf_i+0x42>
 800853e:	2969      	cmp	r1, #105	; 0x69
 8008540:	d1f6      	bne.n	8008530 <_printf_i+0x30>
 8008542:	6820      	ldr	r0, [r4, #0]
 8008544:	6813      	ldr	r3, [r2, #0]
 8008546:	0605      	lsls	r5, r0, #24
 8008548:	f103 0104 	add.w	r1, r3, #4
 800854c:	d52a      	bpl.n	80085a4 <_printf_i+0xa4>
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	6011      	str	r1, [r2, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	da03      	bge.n	800855e <_printf_i+0x5e>
 8008556:	222d      	movs	r2, #45	; 0x2d
 8008558:	425b      	negs	r3, r3
 800855a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800855e:	486f      	ldr	r0, [pc, #444]	; (800871c <_printf_i+0x21c>)
 8008560:	220a      	movs	r2, #10
 8008562:	e039      	b.n	80085d8 <_printf_i+0xd8>
 8008564:	2973      	cmp	r1, #115	; 0x73
 8008566:	f000 809d 	beq.w	80086a4 <_printf_i+0x1a4>
 800856a:	d808      	bhi.n	800857e <_printf_i+0x7e>
 800856c:	296f      	cmp	r1, #111	; 0x6f
 800856e:	d020      	beq.n	80085b2 <_printf_i+0xb2>
 8008570:	2970      	cmp	r1, #112	; 0x70
 8008572:	d1dd      	bne.n	8008530 <_printf_i+0x30>
 8008574:	6823      	ldr	r3, [r4, #0]
 8008576:	f043 0320 	orr.w	r3, r3, #32
 800857a:	6023      	str	r3, [r4, #0]
 800857c:	e003      	b.n	8008586 <_printf_i+0x86>
 800857e:	2975      	cmp	r1, #117	; 0x75
 8008580:	d017      	beq.n	80085b2 <_printf_i+0xb2>
 8008582:	2978      	cmp	r1, #120	; 0x78
 8008584:	d1d4      	bne.n	8008530 <_printf_i+0x30>
 8008586:	2378      	movs	r3, #120	; 0x78
 8008588:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800858c:	4864      	ldr	r0, [pc, #400]	; (8008720 <_printf_i+0x220>)
 800858e:	e055      	b.n	800863c <_printf_i+0x13c>
 8008590:	6813      	ldr	r3, [r2, #0]
 8008592:	1d19      	adds	r1, r3, #4
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6011      	str	r1, [r2, #0]
 8008598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800859c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085a0:	2301      	movs	r3, #1
 80085a2:	e08c      	b.n	80086be <_printf_i+0x1be>
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6011      	str	r1, [r2, #0]
 80085a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085ac:	bf18      	it	ne
 80085ae:	b21b      	sxthne	r3, r3
 80085b0:	e7cf      	b.n	8008552 <_printf_i+0x52>
 80085b2:	6813      	ldr	r3, [r2, #0]
 80085b4:	6825      	ldr	r5, [r4, #0]
 80085b6:	1d18      	adds	r0, r3, #4
 80085b8:	6010      	str	r0, [r2, #0]
 80085ba:	0628      	lsls	r0, r5, #24
 80085bc:	d501      	bpl.n	80085c2 <_printf_i+0xc2>
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	e002      	b.n	80085c8 <_printf_i+0xc8>
 80085c2:	0668      	lsls	r0, r5, #25
 80085c4:	d5fb      	bpl.n	80085be <_printf_i+0xbe>
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	4854      	ldr	r0, [pc, #336]	; (800871c <_printf_i+0x21c>)
 80085ca:	296f      	cmp	r1, #111	; 0x6f
 80085cc:	bf14      	ite	ne
 80085ce:	220a      	movne	r2, #10
 80085d0:	2208      	moveq	r2, #8
 80085d2:	2100      	movs	r1, #0
 80085d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085d8:	6865      	ldr	r5, [r4, #4]
 80085da:	60a5      	str	r5, [r4, #8]
 80085dc:	2d00      	cmp	r5, #0
 80085de:	f2c0 8095 	blt.w	800870c <_printf_i+0x20c>
 80085e2:	6821      	ldr	r1, [r4, #0]
 80085e4:	f021 0104 	bic.w	r1, r1, #4
 80085e8:	6021      	str	r1, [r4, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d13d      	bne.n	800866a <_printf_i+0x16a>
 80085ee:	2d00      	cmp	r5, #0
 80085f0:	f040 808e 	bne.w	8008710 <_printf_i+0x210>
 80085f4:	4665      	mov	r5, ip
 80085f6:	2a08      	cmp	r2, #8
 80085f8:	d10b      	bne.n	8008612 <_printf_i+0x112>
 80085fa:	6823      	ldr	r3, [r4, #0]
 80085fc:	07db      	lsls	r3, r3, #31
 80085fe:	d508      	bpl.n	8008612 <_printf_i+0x112>
 8008600:	6923      	ldr	r3, [r4, #16]
 8008602:	6862      	ldr	r2, [r4, #4]
 8008604:	429a      	cmp	r2, r3
 8008606:	bfde      	ittt	le
 8008608:	2330      	movle	r3, #48	; 0x30
 800860a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800860e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008612:	ebac 0305 	sub.w	r3, ip, r5
 8008616:	6123      	str	r3, [r4, #16]
 8008618:	f8cd 8000 	str.w	r8, [sp]
 800861c:	463b      	mov	r3, r7
 800861e:	aa03      	add	r2, sp, #12
 8008620:	4621      	mov	r1, r4
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff fef6 	bl	8008414 <_printf_common>
 8008628:	3001      	adds	r0, #1
 800862a:	d14d      	bne.n	80086c8 <_printf_i+0x1c8>
 800862c:	f04f 30ff 	mov.w	r0, #4294967295
 8008630:	b005      	add	sp, #20
 8008632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008636:	4839      	ldr	r0, [pc, #228]	; (800871c <_printf_i+0x21c>)
 8008638:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800863c:	6813      	ldr	r3, [r2, #0]
 800863e:	6821      	ldr	r1, [r4, #0]
 8008640:	1d1d      	adds	r5, r3, #4
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6015      	str	r5, [r2, #0]
 8008646:	060a      	lsls	r2, r1, #24
 8008648:	d50b      	bpl.n	8008662 <_printf_i+0x162>
 800864a:	07ca      	lsls	r2, r1, #31
 800864c:	bf44      	itt	mi
 800864e:	f041 0120 	orrmi.w	r1, r1, #32
 8008652:	6021      	strmi	r1, [r4, #0]
 8008654:	b91b      	cbnz	r3, 800865e <_printf_i+0x15e>
 8008656:	6822      	ldr	r2, [r4, #0]
 8008658:	f022 0220 	bic.w	r2, r2, #32
 800865c:	6022      	str	r2, [r4, #0]
 800865e:	2210      	movs	r2, #16
 8008660:	e7b7      	b.n	80085d2 <_printf_i+0xd2>
 8008662:	064d      	lsls	r5, r1, #25
 8008664:	bf48      	it	mi
 8008666:	b29b      	uxthmi	r3, r3
 8008668:	e7ef      	b.n	800864a <_printf_i+0x14a>
 800866a:	4665      	mov	r5, ip
 800866c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008670:	fb02 3311 	mls	r3, r2, r1, r3
 8008674:	5cc3      	ldrb	r3, [r0, r3]
 8008676:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800867a:	460b      	mov	r3, r1
 800867c:	2900      	cmp	r1, #0
 800867e:	d1f5      	bne.n	800866c <_printf_i+0x16c>
 8008680:	e7b9      	b.n	80085f6 <_printf_i+0xf6>
 8008682:	6813      	ldr	r3, [r2, #0]
 8008684:	6825      	ldr	r5, [r4, #0]
 8008686:	6961      	ldr	r1, [r4, #20]
 8008688:	1d18      	adds	r0, r3, #4
 800868a:	6010      	str	r0, [r2, #0]
 800868c:	0628      	lsls	r0, r5, #24
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	d501      	bpl.n	8008696 <_printf_i+0x196>
 8008692:	6019      	str	r1, [r3, #0]
 8008694:	e002      	b.n	800869c <_printf_i+0x19c>
 8008696:	066a      	lsls	r2, r5, #25
 8008698:	d5fb      	bpl.n	8008692 <_printf_i+0x192>
 800869a:	8019      	strh	r1, [r3, #0]
 800869c:	2300      	movs	r3, #0
 800869e:	6123      	str	r3, [r4, #16]
 80086a0:	4665      	mov	r5, ip
 80086a2:	e7b9      	b.n	8008618 <_printf_i+0x118>
 80086a4:	6813      	ldr	r3, [r2, #0]
 80086a6:	1d19      	adds	r1, r3, #4
 80086a8:	6011      	str	r1, [r2, #0]
 80086aa:	681d      	ldr	r5, [r3, #0]
 80086ac:	6862      	ldr	r2, [r4, #4]
 80086ae:	2100      	movs	r1, #0
 80086b0:	4628      	mov	r0, r5
 80086b2:	f7f7 fd95 	bl	80001e0 <memchr>
 80086b6:	b108      	cbz	r0, 80086bc <_printf_i+0x1bc>
 80086b8:	1b40      	subs	r0, r0, r5
 80086ba:	6060      	str	r0, [r4, #4]
 80086bc:	6863      	ldr	r3, [r4, #4]
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	2300      	movs	r3, #0
 80086c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c6:	e7a7      	b.n	8008618 <_printf_i+0x118>
 80086c8:	6923      	ldr	r3, [r4, #16]
 80086ca:	462a      	mov	r2, r5
 80086cc:	4639      	mov	r1, r7
 80086ce:	4630      	mov	r0, r6
 80086d0:	47c0      	blx	r8
 80086d2:	3001      	adds	r0, #1
 80086d4:	d0aa      	beq.n	800862c <_printf_i+0x12c>
 80086d6:	6823      	ldr	r3, [r4, #0]
 80086d8:	079b      	lsls	r3, r3, #30
 80086da:	d413      	bmi.n	8008704 <_printf_i+0x204>
 80086dc:	68e0      	ldr	r0, [r4, #12]
 80086de:	9b03      	ldr	r3, [sp, #12]
 80086e0:	4298      	cmp	r0, r3
 80086e2:	bfb8      	it	lt
 80086e4:	4618      	movlt	r0, r3
 80086e6:	e7a3      	b.n	8008630 <_printf_i+0x130>
 80086e8:	2301      	movs	r3, #1
 80086ea:	464a      	mov	r2, r9
 80086ec:	4639      	mov	r1, r7
 80086ee:	4630      	mov	r0, r6
 80086f0:	47c0      	blx	r8
 80086f2:	3001      	adds	r0, #1
 80086f4:	d09a      	beq.n	800862c <_printf_i+0x12c>
 80086f6:	3501      	adds	r5, #1
 80086f8:	68e3      	ldr	r3, [r4, #12]
 80086fa:	9a03      	ldr	r2, [sp, #12]
 80086fc:	1a9b      	subs	r3, r3, r2
 80086fe:	42ab      	cmp	r3, r5
 8008700:	dcf2      	bgt.n	80086e8 <_printf_i+0x1e8>
 8008702:	e7eb      	b.n	80086dc <_printf_i+0x1dc>
 8008704:	2500      	movs	r5, #0
 8008706:	f104 0919 	add.w	r9, r4, #25
 800870a:	e7f5      	b.n	80086f8 <_printf_i+0x1f8>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d1ac      	bne.n	800866a <_printf_i+0x16a>
 8008710:	7803      	ldrb	r3, [r0, #0]
 8008712:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008716:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800871a:	e76c      	b.n	80085f6 <_printf_i+0xf6>
 800871c:	080090d5 	.word	0x080090d5
 8008720:	080090e6 	.word	0x080090e6

08008724 <memmove>:
 8008724:	4288      	cmp	r0, r1
 8008726:	b510      	push	{r4, lr}
 8008728:	eb01 0302 	add.w	r3, r1, r2
 800872c:	d807      	bhi.n	800873e <memmove+0x1a>
 800872e:	1e42      	subs	r2, r0, #1
 8008730:	4299      	cmp	r1, r3
 8008732:	d00a      	beq.n	800874a <memmove+0x26>
 8008734:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008738:	f802 4f01 	strb.w	r4, [r2, #1]!
 800873c:	e7f8      	b.n	8008730 <memmove+0xc>
 800873e:	4283      	cmp	r3, r0
 8008740:	d9f5      	bls.n	800872e <memmove+0xa>
 8008742:	1881      	adds	r1, r0, r2
 8008744:	1ad2      	subs	r2, r2, r3
 8008746:	42d3      	cmn	r3, r2
 8008748:	d100      	bne.n	800874c <memmove+0x28>
 800874a:	bd10      	pop	{r4, pc}
 800874c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008750:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008754:	e7f7      	b.n	8008746 <memmove+0x22>
	...

08008758 <_free_r>:
 8008758:	b538      	push	{r3, r4, r5, lr}
 800875a:	4605      	mov	r5, r0
 800875c:	2900      	cmp	r1, #0
 800875e:	d045      	beq.n	80087ec <_free_r+0x94>
 8008760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008764:	1f0c      	subs	r4, r1, #4
 8008766:	2b00      	cmp	r3, #0
 8008768:	bfb8      	it	lt
 800876a:	18e4      	addlt	r4, r4, r3
 800876c:	f000 f8d2 	bl	8008914 <__malloc_lock>
 8008770:	4a1f      	ldr	r2, [pc, #124]	; (80087f0 <_free_r+0x98>)
 8008772:	6813      	ldr	r3, [r2, #0]
 8008774:	4610      	mov	r0, r2
 8008776:	b933      	cbnz	r3, 8008786 <_free_r+0x2e>
 8008778:	6063      	str	r3, [r4, #4]
 800877a:	6014      	str	r4, [r2, #0]
 800877c:	4628      	mov	r0, r5
 800877e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008782:	f000 b8c8 	b.w	8008916 <__malloc_unlock>
 8008786:	42a3      	cmp	r3, r4
 8008788:	d90c      	bls.n	80087a4 <_free_r+0x4c>
 800878a:	6821      	ldr	r1, [r4, #0]
 800878c:	1862      	adds	r2, r4, r1
 800878e:	4293      	cmp	r3, r2
 8008790:	bf04      	itt	eq
 8008792:	681a      	ldreq	r2, [r3, #0]
 8008794:	685b      	ldreq	r3, [r3, #4]
 8008796:	6063      	str	r3, [r4, #4]
 8008798:	bf04      	itt	eq
 800879a:	1852      	addeq	r2, r2, r1
 800879c:	6022      	streq	r2, [r4, #0]
 800879e:	6004      	str	r4, [r0, #0]
 80087a0:	e7ec      	b.n	800877c <_free_r+0x24>
 80087a2:	4613      	mov	r3, r2
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	b10a      	cbz	r2, 80087ac <_free_r+0x54>
 80087a8:	42a2      	cmp	r2, r4
 80087aa:	d9fa      	bls.n	80087a2 <_free_r+0x4a>
 80087ac:	6819      	ldr	r1, [r3, #0]
 80087ae:	1858      	adds	r0, r3, r1
 80087b0:	42a0      	cmp	r0, r4
 80087b2:	d10b      	bne.n	80087cc <_free_r+0x74>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	4401      	add	r1, r0
 80087b8:	1858      	adds	r0, r3, r1
 80087ba:	4282      	cmp	r2, r0
 80087bc:	6019      	str	r1, [r3, #0]
 80087be:	d1dd      	bne.n	800877c <_free_r+0x24>
 80087c0:	6810      	ldr	r0, [r2, #0]
 80087c2:	6852      	ldr	r2, [r2, #4]
 80087c4:	605a      	str	r2, [r3, #4]
 80087c6:	4401      	add	r1, r0
 80087c8:	6019      	str	r1, [r3, #0]
 80087ca:	e7d7      	b.n	800877c <_free_r+0x24>
 80087cc:	d902      	bls.n	80087d4 <_free_r+0x7c>
 80087ce:	230c      	movs	r3, #12
 80087d0:	602b      	str	r3, [r5, #0]
 80087d2:	e7d3      	b.n	800877c <_free_r+0x24>
 80087d4:	6820      	ldr	r0, [r4, #0]
 80087d6:	1821      	adds	r1, r4, r0
 80087d8:	428a      	cmp	r2, r1
 80087da:	bf04      	itt	eq
 80087dc:	6811      	ldreq	r1, [r2, #0]
 80087de:	6852      	ldreq	r2, [r2, #4]
 80087e0:	6062      	str	r2, [r4, #4]
 80087e2:	bf04      	itt	eq
 80087e4:	1809      	addeq	r1, r1, r0
 80087e6:	6021      	streq	r1, [r4, #0]
 80087e8:	605c      	str	r4, [r3, #4]
 80087ea:	e7c7      	b.n	800877c <_free_r+0x24>
 80087ec:	bd38      	pop	{r3, r4, r5, pc}
 80087ee:	bf00      	nop
 80087f0:	20000198 	.word	0x20000198

080087f4 <_malloc_r>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	1ccd      	adds	r5, r1, #3
 80087f8:	f025 0503 	bic.w	r5, r5, #3
 80087fc:	3508      	adds	r5, #8
 80087fe:	2d0c      	cmp	r5, #12
 8008800:	bf38      	it	cc
 8008802:	250c      	movcc	r5, #12
 8008804:	2d00      	cmp	r5, #0
 8008806:	4606      	mov	r6, r0
 8008808:	db01      	blt.n	800880e <_malloc_r+0x1a>
 800880a:	42a9      	cmp	r1, r5
 800880c:	d903      	bls.n	8008816 <_malloc_r+0x22>
 800880e:	230c      	movs	r3, #12
 8008810:	6033      	str	r3, [r6, #0]
 8008812:	2000      	movs	r0, #0
 8008814:	bd70      	pop	{r4, r5, r6, pc}
 8008816:	f000 f87d 	bl	8008914 <__malloc_lock>
 800881a:	4a21      	ldr	r2, [pc, #132]	; (80088a0 <_malloc_r+0xac>)
 800881c:	6814      	ldr	r4, [r2, #0]
 800881e:	4621      	mov	r1, r4
 8008820:	b991      	cbnz	r1, 8008848 <_malloc_r+0x54>
 8008822:	4c20      	ldr	r4, [pc, #128]	; (80088a4 <_malloc_r+0xb0>)
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	b91b      	cbnz	r3, 8008830 <_malloc_r+0x3c>
 8008828:	4630      	mov	r0, r6
 800882a:	f000 f863 	bl	80088f4 <_sbrk_r>
 800882e:	6020      	str	r0, [r4, #0]
 8008830:	4629      	mov	r1, r5
 8008832:	4630      	mov	r0, r6
 8008834:	f000 f85e 	bl	80088f4 <_sbrk_r>
 8008838:	1c43      	adds	r3, r0, #1
 800883a:	d124      	bne.n	8008886 <_malloc_r+0x92>
 800883c:	230c      	movs	r3, #12
 800883e:	6033      	str	r3, [r6, #0]
 8008840:	4630      	mov	r0, r6
 8008842:	f000 f868 	bl	8008916 <__malloc_unlock>
 8008846:	e7e4      	b.n	8008812 <_malloc_r+0x1e>
 8008848:	680b      	ldr	r3, [r1, #0]
 800884a:	1b5b      	subs	r3, r3, r5
 800884c:	d418      	bmi.n	8008880 <_malloc_r+0x8c>
 800884e:	2b0b      	cmp	r3, #11
 8008850:	d90f      	bls.n	8008872 <_malloc_r+0x7e>
 8008852:	600b      	str	r3, [r1, #0]
 8008854:	50cd      	str	r5, [r1, r3]
 8008856:	18cc      	adds	r4, r1, r3
 8008858:	4630      	mov	r0, r6
 800885a:	f000 f85c 	bl	8008916 <__malloc_unlock>
 800885e:	f104 000b 	add.w	r0, r4, #11
 8008862:	1d23      	adds	r3, r4, #4
 8008864:	f020 0007 	bic.w	r0, r0, #7
 8008868:	1ac3      	subs	r3, r0, r3
 800886a:	d0d3      	beq.n	8008814 <_malloc_r+0x20>
 800886c:	425a      	negs	r2, r3
 800886e:	50e2      	str	r2, [r4, r3]
 8008870:	e7d0      	b.n	8008814 <_malloc_r+0x20>
 8008872:	428c      	cmp	r4, r1
 8008874:	684b      	ldr	r3, [r1, #4]
 8008876:	bf16      	itet	ne
 8008878:	6063      	strne	r3, [r4, #4]
 800887a:	6013      	streq	r3, [r2, #0]
 800887c:	460c      	movne	r4, r1
 800887e:	e7eb      	b.n	8008858 <_malloc_r+0x64>
 8008880:	460c      	mov	r4, r1
 8008882:	6849      	ldr	r1, [r1, #4]
 8008884:	e7cc      	b.n	8008820 <_malloc_r+0x2c>
 8008886:	1cc4      	adds	r4, r0, #3
 8008888:	f024 0403 	bic.w	r4, r4, #3
 800888c:	42a0      	cmp	r0, r4
 800888e:	d005      	beq.n	800889c <_malloc_r+0xa8>
 8008890:	1a21      	subs	r1, r4, r0
 8008892:	4630      	mov	r0, r6
 8008894:	f000 f82e 	bl	80088f4 <_sbrk_r>
 8008898:	3001      	adds	r0, #1
 800889a:	d0cf      	beq.n	800883c <_malloc_r+0x48>
 800889c:	6025      	str	r5, [r4, #0]
 800889e:	e7db      	b.n	8008858 <_malloc_r+0x64>
 80088a0:	20000198 	.word	0x20000198
 80088a4:	2000019c 	.word	0x2000019c

080088a8 <_realloc_r>:
 80088a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088aa:	4607      	mov	r7, r0
 80088ac:	4614      	mov	r4, r2
 80088ae:	460e      	mov	r6, r1
 80088b0:	b921      	cbnz	r1, 80088bc <_realloc_r+0x14>
 80088b2:	4611      	mov	r1, r2
 80088b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088b8:	f7ff bf9c 	b.w	80087f4 <_malloc_r>
 80088bc:	b922      	cbnz	r2, 80088c8 <_realloc_r+0x20>
 80088be:	f7ff ff4b 	bl	8008758 <_free_r>
 80088c2:	4625      	mov	r5, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088c8:	f000 f826 	bl	8008918 <_malloc_usable_size_r>
 80088cc:	42a0      	cmp	r0, r4
 80088ce:	d20f      	bcs.n	80088f0 <_realloc_r+0x48>
 80088d0:	4621      	mov	r1, r4
 80088d2:	4638      	mov	r0, r7
 80088d4:	f7ff ff8e 	bl	80087f4 <_malloc_r>
 80088d8:	4605      	mov	r5, r0
 80088da:	2800      	cmp	r0, #0
 80088dc:	d0f2      	beq.n	80088c4 <_realloc_r+0x1c>
 80088de:	4631      	mov	r1, r6
 80088e0:	4622      	mov	r2, r4
 80088e2:	f7ff fc11 	bl	8008108 <memcpy>
 80088e6:	4631      	mov	r1, r6
 80088e8:	4638      	mov	r0, r7
 80088ea:	f7ff ff35 	bl	8008758 <_free_r>
 80088ee:	e7e9      	b.n	80088c4 <_realloc_r+0x1c>
 80088f0:	4635      	mov	r5, r6
 80088f2:	e7e7      	b.n	80088c4 <_realloc_r+0x1c>

080088f4 <_sbrk_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4c06      	ldr	r4, [pc, #24]	; (8008910 <_sbrk_r+0x1c>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4605      	mov	r5, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	f7fb fe26 	bl	8004550 <_sbrk>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_sbrk_r+0x1a>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	b103      	cbz	r3, 800890e <_sbrk_r+0x1a>
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20000548 	.word	0x20000548

08008914 <__malloc_lock>:
 8008914:	4770      	bx	lr

08008916 <__malloc_unlock>:
 8008916:	4770      	bx	lr

08008918 <_malloc_usable_size_r>:
 8008918:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800891c:	1f18      	subs	r0, r3, #4
 800891e:	2b00      	cmp	r3, #0
 8008920:	bfbc      	itt	lt
 8008922:	580b      	ldrlt	r3, [r1, r0]
 8008924:	18c0      	addlt	r0, r0, r3
 8008926:	4770      	bx	lr

08008928 <sqrt>:
 8008928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800892c:	ed2d 8b02 	vpush	{d8}
 8008930:	b08b      	sub	sp, #44	; 0x2c
 8008932:	ec55 4b10 	vmov	r4, r5, d0
 8008936:	f000 f851 	bl	80089dc <__ieee754_sqrt>
 800893a:	4b26      	ldr	r3, [pc, #152]	; (80089d4 <sqrt+0xac>)
 800893c:	eeb0 8a40 	vmov.f32	s16, s0
 8008940:	eef0 8a60 	vmov.f32	s17, s1
 8008944:	f993 6000 	ldrsb.w	r6, [r3]
 8008948:	1c73      	adds	r3, r6, #1
 800894a:	d02a      	beq.n	80089a2 <sqrt+0x7a>
 800894c:	4622      	mov	r2, r4
 800894e:	462b      	mov	r3, r5
 8008950:	4620      	mov	r0, r4
 8008952:	4629      	mov	r1, r5
 8008954:	f7f8 f8ea 	bl	8000b2c <__aeabi_dcmpun>
 8008958:	4607      	mov	r7, r0
 800895a:	bb10      	cbnz	r0, 80089a2 <sqrt+0x7a>
 800895c:	f04f 0800 	mov.w	r8, #0
 8008960:	f04f 0900 	mov.w	r9, #0
 8008964:	4642      	mov	r2, r8
 8008966:	464b      	mov	r3, r9
 8008968:	4620      	mov	r0, r4
 800896a:	4629      	mov	r1, r5
 800896c:	f7f8 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8008970:	b1b8      	cbz	r0, 80089a2 <sqrt+0x7a>
 8008972:	2301      	movs	r3, #1
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	4b18      	ldr	r3, [pc, #96]	; (80089d8 <sqrt+0xb0>)
 8008978:	9301      	str	r3, [sp, #4]
 800897a:	9708      	str	r7, [sp, #32]
 800897c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8008980:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008984:	b9b6      	cbnz	r6, 80089b4 <sqrt+0x8c>
 8008986:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800898a:	4668      	mov	r0, sp
 800898c:	f000 f8d6 	bl	8008b3c <matherr>
 8008990:	b1d0      	cbz	r0, 80089c8 <sqrt+0xa0>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	b11b      	cbz	r3, 800899e <sqrt+0x76>
 8008996:	f7ff fb8d 	bl	80080b4 <__errno>
 800899a:	9b08      	ldr	r3, [sp, #32]
 800899c:	6003      	str	r3, [r0, #0]
 800899e:	ed9d 8b06 	vldr	d8, [sp, #24]
 80089a2:	eeb0 0a48 	vmov.f32	s0, s16
 80089a6:	eef0 0a68 	vmov.f32	s1, s17
 80089aa:	b00b      	add	sp, #44	; 0x2c
 80089ac:	ecbd 8b02 	vpop	{d8}
 80089b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089b4:	4642      	mov	r2, r8
 80089b6:	464b      	mov	r3, r9
 80089b8:	4640      	mov	r0, r8
 80089ba:	4649      	mov	r1, r9
 80089bc:	f7f7 ff46 	bl	800084c <__aeabi_ddiv>
 80089c0:	2e02      	cmp	r6, #2
 80089c2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089c6:	d1e0      	bne.n	800898a <sqrt+0x62>
 80089c8:	f7ff fb74 	bl	80080b4 <__errno>
 80089cc:	2321      	movs	r3, #33	; 0x21
 80089ce:	6003      	str	r3, [r0, #0]
 80089d0:	e7df      	b.n	8008992 <sqrt+0x6a>
 80089d2:	bf00      	nop
 80089d4:	20000080 	.word	0x20000080
 80089d8:	080090f7 	.word	0x080090f7

080089dc <__ieee754_sqrt>:
 80089dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e0:	4955      	ldr	r1, [pc, #340]	; (8008b38 <__ieee754_sqrt+0x15c>)
 80089e2:	ec55 4b10 	vmov	r4, r5, d0
 80089e6:	43a9      	bics	r1, r5
 80089e8:	462b      	mov	r3, r5
 80089ea:	462a      	mov	r2, r5
 80089ec:	d112      	bne.n	8008a14 <__ieee754_sqrt+0x38>
 80089ee:	ee10 2a10 	vmov	r2, s0
 80089f2:	ee10 0a10 	vmov	r0, s0
 80089f6:	4629      	mov	r1, r5
 80089f8:	f7f7 fdfe 	bl	80005f8 <__aeabi_dmul>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4620      	mov	r0, r4
 8008a02:	4629      	mov	r1, r5
 8008a04:	f7f7 fc42 	bl	800028c <__adddf3>
 8008a08:	4604      	mov	r4, r0
 8008a0a:	460d      	mov	r5, r1
 8008a0c:	ec45 4b10 	vmov	d0, r4, r5
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	2d00      	cmp	r5, #0
 8008a16:	ee10 0a10 	vmov	r0, s0
 8008a1a:	4621      	mov	r1, r4
 8008a1c:	dc0f      	bgt.n	8008a3e <__ieee754_sqrt+0x62>
 8008a1e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008a22:	4330      	orrs	r0, r6
 8008a24:	d0f2      	beq.n	8008a0c <__ieee754_sqrt+0x30>
 8008a26:	b155      	cbz	r5, 8008a3e <__ieee754_sqrt+0x62>
 8008a28:	ee10 2a10 	vmov	r2, s0
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	4629      	mov	r1, r5
 8008a30:	f7f7 fc2a 	bl	8000288 <__aeabi_dsub>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	f7f7 ff08 	bl	800084c <__aeabi_ddiv>
 8008a3c:	e7e4      	b.n	8008a08 <__ieee754_sqrt+0x2c>
 8008a3e:	151b      	asrs	r3, r3, #20
 8008a40:	d073      	beq.n	8008b2a <__ieee754_sqrt+0x14e>
 8008a42:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008a46:	07dd      	lsls	r5, r3, #31
 8008a48:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008a4c:	bf48      	it	mi
 8008a4e:	0fc8      	lsrmi	r0, r1, #31
 8008a50:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008a54:	bf44      	itt	mi
 8008a56:	0049      	lslmi	r1, r1, #1
 8008a58:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8008a5c:	2500      	movs	r5, #0
 8008a5e:	1058      	asrs	r0, r3, #1
 8008a60:	0fcb      	lsrs	r3, r1, #31
 8008a62:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008a66:	0049      	lsls	r1, r1, #1
 8008a68:	2316      	movs	r3, #22
 8008a6a:	462c      	mov	r4, r5
 8008a6c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8008a70:	19a7      	adds	r7, r4, r6
 8008a72:	4297      	cmp	r7, r2
 8008a74:	bfde      	ittt	le
 8008a76:	19bc      	addle	r4, r7, r6
 8008a78:	1bd2      	suble	r2, r2, r7
 8008a7a:	19ad      	addle	r5, r5, r6
 8008a7c:	0fcf      	lsrs	r7, r1, #31
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8008a84:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008a88:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008a8c:	d1f0      	bne.n	8008a70 <__ieee754_sqrt+0x94>
 8008a8e:	f04f 0c20 	mov.w	ip, #32
 8008a92:	469e      	mov	lr, r3
 8008a94:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008a98:	42a2      	cmp	r2, r4
 8008a9a:	eb06 070e 	add.w	r7, r6, lr
 8008a9e:	dc02      	bgt.n	8008aa6 <__ieee754_sqrt+0xca>
 8008aa0:	d112      	bne.n	8008ac8 <__ieee754_sqrt+0xec>
 8008aa2:	428f      	cmp	r7, r1
 8008aa4:	d810      	bhi.n	8008ac8 <__ieee754_sqrt+0xec>
 8008aa6:	2f00      	cmp	r7, #0
 8008aa8:	eb07 0e06 	add.w	lr, r7, r6
 8008aac:	da42      	bge.n	8008b34 <__ieee754_sqrt+0x158>
 8008aae:	f1be 0f00 	cmp.w	lr, #0
 8008ab2:	db3f      	blt.n	8008b34 <__ieee754_sqrt+0x158>
 8008ab4:	f104 0801 	add.w	r8, r4, #1
 8008ab8:	1b12      	subs	r2, r2, r4
 8008aba:	428f      	cmp	r7, r1
 8008abc:	bf88      	it	hi
 8008abe:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008ac2:	1bc9      	subs	r1, r1, r7
 8008ac4:	4433      	add	r3, r6
 8008ac6:	4644      	mov	r4, r8
 8008ac8:	0052      	lsls	r2, r2, #1
 8008aca:	f1bc 0c01 	subs.w	ip, ip, #1
 8008ace:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008ad2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008ad6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008ada:	d1dd      	bne.n	8008a98 <__ieee754_sqrt+0xbc>
 8008adc:	430a      	orrs	r2, r1
 8008ade:	d006      	beq.n	8008aee <__ieee754_sqrt+0x112>
 8008ae0:	1c5c      	adds	r4, r3, #1
 8008ae2:	bf13      	iteet	ne
 8008ae4:	3301      	addne	r3, #1
 8008ae6:	3501      	addeq	r5, #1
 8008ae8:	4663      	moveq	r3, ip
 8008aea:	f023 0301 	bicne.w	r3, r3, #1
 8008aee:	106a      	asrs	r2, r5, #1
 8008af0:	085b      	lsrs	r3, r3, #1
 8008af2:	07e9      	lsls	r1, r5, #31
 8008af4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008af8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008afc:	bf48      	it	mi
 8008afe:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008b02:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008b06:	461c      	mov	r4, r3
 8008b08:	e780      	b.n	8008a0c <__ieee754_sqrt+0x30>
 8008b0a:	0aca      	lsrs	r2, r1, #11
 8008b0c:	3815      	subs	r0, #21
 8008b0e:	0549      	lsls	r1, r1, #21
 8008b10:	2a00      	cmp	r2, #0
 8008b12:	d0fa      	beq.n	8008b0a <__ieee754_sqrt+0x12e>
 8008b14:	02d6      	lsls	r6, r2, #11
 8008b16:	d50a      	bpl.n	8008b2e <__ieee754_sqrt+0x152>
 8008b18:	f1c3 0420 	rsb	r4, r3, #32
 8008b1c:	fa21 f404 	lsr.w	r4, r1, r4
 8008b20:	1e5d      	subs	r5, r3, #1
 8008b22:	4099      	lsls	r1, r3
 8008b24:	4322      	orrs	r2, r4
 8008b26:	1b43      	subs	r3, r0, r5
 8008b28:	e78b      	b.n	8008a42 <__ieee754_sqrt+0x66>
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	e7f0      	b.n	8008b10 <__ieee754_sqrt+0x134>
 8008b2e:	0052      	lsls	r2, r2, #1
 8008b30:	3301      	adds	r3, #1
 8008b32:	e7ef      	b.n	8008b14 <__ieee754_sqrt+0x138>
 8008b34:	46a0      	mov	r8, r4
 8008b36:	e7bf      	b.n	8008ab8 <__ieee754_sqrt+0xdc>
 8008b38:	7ff00000 	.word	0x7ff00000

08008b3c <matherr>:
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	4770      	bx	lr

08008b40 <_init>:
 8008b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b42:	bf00      	nop
 8008b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b46:	bc08      	pop	{r3}
 8008b48:	469e      	mov	lr, r3
 8008b4a:	4770      	bx	lr

08008b4c <_fini>:
 8008b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4e:	bf00      	nop
 8008b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b52:	bc08      	pop	{r3}
 8008b54:	469e      	mov	lr, r3
 8008b56:	4770      	bx	lr
